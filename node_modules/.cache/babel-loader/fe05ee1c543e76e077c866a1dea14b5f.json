{"ast":null,"code":"'use strict';\n/**\n * Calculates the moving average delta for the given pair ofsamples. A sample (S)\n * consists of a numerator (Sn) and a denominator (Sd).The moving average delta is\n * calculated as follows:\n *\n * MovingAvgDelta = (Sn[1] - Sn[0]) / (Sd[1] - Sd[0])\n */\n\nvar MovingAverageDelta =\n/** @class */\nfunction () {\n  /**\n   * Constructor.\n   */\n  function MovingAverageDelta() {\n    Object.defineProperties(this, {\n      _samples: {\n        value: [{\n          denominator: 0,\n          numerator: 0\n        }, {\n          denominator: 0,\n          numerator: 0\n        }]\n      }\n    });\n  }\n  /**\n   * Get the moving average delta.\n   * @returns {number}\n   */\n\n\n  MovingAverageDelta.prototype.get = function () {\n    var samples = this._samples;\n    var denominatorDelta = samples[1].denominator - samples[0].denominator || Infinity;\n    var numeratorDelta = samples[1].numerator - samples[0].numerator;\n    return numeratorDelta / denominatorDelta;\n  };\n  /**\n   * Put a sample and get rid of the older sample to maintain sample size of 2.\n   * @param numerator\n   * @param denominator\n   */\n\n\n  MovingAverageDelta.prototype.putSample = function (numerator, denominator) {\n    var samples = this._samples;\n    samples.shift();\n    samples.push({\n      denominator: denominator,\n      numerator: numerator\n    });\n  };\n\n  return MovingAverageDelta;\n}();\n\nmodule.exports = MovingAverageDelta;","map":{"version":3,"mappings":"AAAA;AAEA;;;;;;;;AAOA;AAAA;AAAA;EACE;;;EAGA;IACEA,MAAM,CAACC,gBAAP,CAAwB,IAAxB,EAA8B;MAC5BC,QAAQ,EAAE;QACRC,KAAK,EAAE,CACL;UAAEC,WAAW,EAAE,CAAf;UAAkBC,SAAS,EAAE;QAA7B,CADK,EAEL;UAAED,WAAW,EAAE,CAAf;UAAkBC,SAAS,EAAE;QAA7B,CAFK;MADC;IADkB,CAA9B;EAQD;EAED;;;;;;EAIAC;IACU,IAAUC,OAAO,GAAK,KAAIL,QAA1B;IACR,IAAMM,gBAAgB,GAAID,OAAO,CAAC,CAAD,CAAP,CAAWH,WAAX,GAAyBG,OAAO,CAAC,CAAD,CAAP,CAAWH,WAArC,IAAqDK,QAA9E;IACA,IAAMC,cAAc,GAAGH,OAAO,CAAC,CAAD,CAAP,CAAWF,SAAX,GAAuBE,OAAO,CAAC,CAAD,CAAP,CAAWF,SAAzD;IACA,OAAOK,cAAc,GAAGF,gBAAxB;EACD,CALD;EAOA;;;;;;;EAKAF,mDAAUD,SAAV,EAAqBD,WAArB,EAAgC;IACtB,IAAUG,OAAO,GAAK,KAAIL,QAA1B;IACRK,OAAO,CAACI,KAAR;IACAJ,OAAO,CAACK,IAAR,CAAa;MAAER,WAAW,aAAb;MAAeC,SAAS;IAAxB,CAAb;EACD,CAJD;;EAKF;AAAC,CApCD;;AAsCAQ,MAAM,CAACC,OAAP,GAAiBR,kBAAjB","names":["Object","defineProperties","_samples","value","denominator","numerator","MovingAverageDelta","samples","denominatorDelta","Infinity","numeratorDelta","shift","push","module","exports"],"sources":["/home/samliu/repos/ieee/tp-robot/node_modules/twilio-video/lib/util/movingaveragedelta.js"],"sourcesContent":["'use strict';\n\n/**\n * Calculates the moving average delta for the given pair ofsamples. A sample (S)\n * consists of a numerator (Sn) and a denominator (Sd).The moving average delta is\n * calculated as follows:\n *\n * MovingAvgDelta = (Sn[1] - Sn[0]) / (Sd[1] - Sd[0])\n */\nclass MovingAverageDelta {\n  /**\n   * Constructor.\n   */\n  constructor() {\n    Object.defineProperties(this, {\n      _samples: {\n        value: [\n          { denominator: 0, numerator: 0 },\n          { denominator: 0, numerator: 0 }\n        ],\n      }\n    });\n  }\n\n  /**\n   * Get the moving average delta.\n   * @returns {number}\n   */\n  get() {\n    const { _samples: samples } = this;\n    const denominatorDelta = (samples[1].denominator - samples[0].denominator) || Infinity;\n    const numeratorDelta = samples[1].numerator - samples[0].numerator;\n    return numeratorDelta / denominatorDelta;\n  }\n\n  /**\n   * Put a sample and get rid of the older sample to maintain sample size of 2.\n   * @param numerator\n   * @param denominator\n   */\n  putSample(numerator, denominator) {\n    const { _samples: samples } = this;\n    samples.shift();\n    samples.push({ denominator, numerator });\n  }\n}\n\nmodule.exports = MovingAverageDelta;\n"]},"metadata":{},"sourceType":"script"}