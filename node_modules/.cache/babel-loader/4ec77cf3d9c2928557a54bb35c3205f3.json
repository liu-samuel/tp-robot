{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nvar Track = require('./');\n\nvar _a = require('../../util/constants'),\n    E = _a.typeErrors,\n    trackPriority = _a.trackPriority;\n/**\n * A {@link RemoteDataTrack} represents data published to a {@link Room} by a\n * {@link RemoteParticipant}.\n * @extends Track\n * @property {boolean} isEnabled - true\n * @property {boolean} isSubscribed - Whether the {@link RemoteDataTrack} is\n *   subscribed to\n * @property {boolean} isSwitchedOff - Whether the {@link RemoteDataTrack} is\n *   switched off\n * @property {Track.Kind} kind - \"data\"\n * @property {?number} maxPacketLifeTime - If non-null, this represents a time\n *   limit (in milliseconds) during which data will be transmitted or\n *   retransmitted if not acknowledged on the underlying RTCDataChannel.\n * @property {?number} maxRetransmits - If non-null, this represents the number\n *   of times the data will be retransmitted if not successfully received on the\n *   underlying RTCDataChannel.\n * @property {boolean} ordered - true if data on the {@link RemoteDataTrack} can\n *   be received out-of-order.\n * @property {?Track.Priority} priority - The subscribe priority of the {@link RemoteDataTrack}\n * @property {boolean} reliable - This is true if both\n *   <code>maxPacketLifeTime</code> and <code>maxRetransmits</code> are set to\n *   null. In other words, if this is true, there is no bound on packet lifetime\n *   or the number of retransmits that will be attempted, ensuring \"reliable\"\n *   transmission.\n * @property {Track.SID} sid - The SID assigned to the {@link RemoteDataTrack}\n * @emits RemoteDataTrack#message\n * @emits RemoteDataTrack#switchedOff\n * @emits RemoteDataTrack#switchedOn\n */\n\n\nvar RemoteDataTrack =\n/** @class */\nfunction (_super) {\n  __extends(RemoteDataTrack, _super);\n  /**\n   * Construct a {@link RemoteDataTrack} from a {@link DataTrackReceiver}.\n   * @param {Track.SID} sid\n   * @param {DataTrackReceiver} dataTrackReceiver\n   * @param {{log: Log, name: ?string}} options\n   */\n\n\n  function RemoteDataTrack(sid, dataTrackReceiver, options) {\n    var _this = _super.call(this, dataTrackReceiver.id, 'data', options) || this;\n\n    Object.defineProperties(_this, {\n      _isSwitchedOff: {\n        value: false,\n        writable: true\n      },\n      _priority: {\n        value: null,\n        writable: true\n      },\n      isEnabled: {\n        enumerable: true,\n        value: true\n      },\n      isSwitchedOff: {\n        enumerable: true,\n        get: function () {\n          return this._isSwitchedOff;\n        }\n      },\n      maxPacketLifeTime: {\n        enumerable: true,\n        value: dataTrackReceiver.maxPacketLifeTime\n      },\n      maxRetransmits: {\n        enumerable: true,\n        value: dataTrackReceiver.maxRetransmits\n      },\n      ordered: {\n        enumerable: true,\n        value: dataTrackReceiver.ordered\n      },\n      priority: {\n        enumerable: true,\n        get: function () {\n          return this._priority;\n        }\n      },\n      reliable: {\n        enumerable: true,\n        value: dataTrackReceiver.maxPacketLifeTime === null && dataTrackReceiver.maxRetransmits === null\n      },\n      sid: {\n        enumerable: true,\n        value: sid\n      }\n    });\n    dataTrackReceiver.on('message', function (data) {\n      _this.emit('message', data, _this);\n    });\n    return _this;\n  }\n  /**\n   * Update the subscriber {@link Track.Priority} of the {@link RemoteDataTrack}.\n   * @param {?Track.Priority} priority - the new {@link Track.priority};\n   *   Currently setPriority has no effect on data tracks.\n   * @returns {this}\n   * @throws {RangeError}\n   */\n\n\n  RemoteDataTrack.prototype.setPriority = function (priority) {\n    var priorityValues = __spreadArray([null], __read(Object.values(trackPriority)));\n\n    if (!priorityValues.includes(priority)) {\n      // eslint-disable-next-line new-cap\n      throw E.INVALID_VALUE('priority', priorityValues);\n    } // Note: priority has no real effect on the data tracks.\n\n\n    this._priority = priority;\n    return this;\n  };\n  /**\n   * @private\n   */\n\n\n  RemoteDataTrack.prototype._setEnabled = function () {// Do nothing.\n  };\n  /**\n   * @private\n   * @param {boolean} isSwitchedOff\n   */\n\n\n  RemoteDataTrack.prototype._setSwitchedOff = function (isSwitchedOff) {\n    if (this._isSwitchedOff !== isSwitchedOff) {\n      this._isSwitchedOff = isSwitchedOff;\n      this.emit(isSwitchedOff ? 'switchedOff' : 'switchedOn', this);\n    }\n  };\n\n  return RemoteDataTrack;\n}(Track);\n/**\n * A message was received over the {@link RemoteDataTrack}.\n * @event RemoteDataTrack#message\n * @param {string|ArrayBuffer} data\n * @param {RemoteDataTrack} track - The {@link RemoteDataTrack} that received\n *   the message\n */\n\n/**\n * A {@link RemoteDataTrack} was switched off.\n * @param {RemoteDataTrack} track - The {@link RemoteDataTrack} that was\n *   switched off\n * @event RemoteDataTrack#switchedOff\n */\n\n/**\n * A {@link RemoteDataTrack} was switched on.\n * @param {RemoteDataTrack} track - The {@link RemoteDataTrack} that was\n *   switched on\n * @event RemoteDataTrack#switchedOn\n */\n\n\nmodule.exports = RemoteDataTrack;","map":{"version":3,"mappings":"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","names":["Track","require","E","trackPriority","__extends","sid","dataTrackReceiver","options","_super","id","Object","defineProperties","_this","_isSwitchedOff","value","writable","_priority","isEnabled","enumerable","isSwitchedOff","get","maxPacketLifeTime","maxRetransmits","ordered","priority","reliable","on","emit","data","RemoteDataTrack","priorityValues","__read","values","includes","INVALID_VALUE","module","exports"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/media/track/remotedatatrack.js"],"sourcesContent":["'use strict';\n\nconst Track = require('./');\nconst { typeErrors: E, trackPriority } = require('../../util/constants');\n\n/**\n * A {@link RemoteDataTrack} represents data published to a {@link Room} by a\n * {@link RemoteParticipant}.\n * @extends Track\n * @property {boolean} isEnabled - true\n * @property {boolean} isSubscribed - Whether the {@link RemoteDataTrack} is\n *   subscribed to\n * @property {boolean} isSwitchedOff - Whether the {@link RemoteDataTrack} is\n *   switched off\n * @property {Track.Kind} kind - \"data\"\n * @property {?number} maxPacketLifeTime - If non-null, this represents a time\n *   limit (in milliseconds) during which data will be transmitted or\n *   retransmitted if not acknowledged on the underlying RTCDataChannel.\n * @property {?number} maxRetransmits - If non-null, this represents the number\n *   of times the data will be retransmitted if not successfully received on the\n *   underlying RTCDataChannel.\n * @property {boolean} ordered - true if data on the {@link RemoteDataTrack} can\n *   be received out-of-order.\n * @property {?Track.Priority} priority - The subscribe priority of the {@link RemoteDataTrack}\n * @property {boolean} reliable - This is true if both\n *   <code>maxPacketLifeTime</code> and <code>maxRetransmits</code> are set to\n *   null. In other words, if this is true, there is no bound on packet lifetime\n *   or the number of retransmits that will be attempted, ensuring \"reliable\"\n *   transmission.\n * @property {Track.SID} sid - The SID assigned to the {@link RemoteDataTrack}\n * @emits RemoteDataTrack#message\n * @emits RemoteDataTrack#switchedOff\n * @emits RemoteDataTrack#switchedOn\n */\nclass RemoteDataTrack extends Track {\n  /**\n   * Construct a {@link RemoteDataTrack} from a {@link DataTrackReceiver}.\n   * @param {Track.SID} sid\n   * @param {DataTrackReceiver} dataTrackReceiver\n   * @param {{log: Log, name: ?string}} options\n   */\n  constructor(sid, dataTrackReceiver, options) {\n    super(dataTrackReceiver.id, 'data', options);\n\n    Object.defineProperties(this, {\n      _isSwitchedOff: {\n        value: false,\n        writable: true\n      },\n      _priority: {\n        value: null,\n        writable: true\n      },\n      isEnabled: {\n        enumerable: true,\n        value: true\n      },\n      isSwitchedOff: {\n        enumerable: true,\n        get() {\n          return this._isSwitchedOff;\n        }\n      },\n      maxPacketLifeTime: {\n        enumerable: true,\n        value: dataTrackReceiver.maxPacketLifeTime\n      },\n      maxRetransmits: {\n        enumerable: true,\n        value: dataTrackReceiver.maxRetransmits\n      },\n      ordered: {\n        enumerable: true,\n        value: dataTrackReceiver.ordered\n      },\n      priority: {\n        enumerable: true,\n        get() {\n          return this._priority;\n        }\n      },\n      reliable: {\n        enumerable: true,\n        value: dataTrackReceiver.maxPacketLifeTime === null\n          && dataTrackReceiver.maxRetransmits === null\n      },\n      sid: {\n        enumerable: true,\n        value: sid\n      }\n    });\n\n    dataTrackReceiver.on('message', data => {\n      this.emit('message', data, this);\n    });\n  }\n\n  /**\n   * Update the subscriber {@link Track.Priority} of the {@link RemoteDataTrack}.\n   * @param {?Track.Priority} priority - the new {@link Track.priority};\n   *   Currently setPriority has no effect on data tracks.\n   * @returns {this}\n   * @throws {RangeError}\n   */\n  setPriority(priority) {\n    const priorityValues = [null, ...Object.values(trackPriority)];\n    if (!priorityValues.includes(priority)) {\n      // eslint-disable-next-line new-cap\n      throw E.INVALID_VALUE('priority', priorityValues);\n    }\n\n    // Note: priority has no real effect on the data tracks.\n    this._priority = priority;\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _setEnabled() {\n    // Do nothing.\n  }\n\n  /**\n   * @private\n   * @param {boolean} isSwitchedOff\n   */\n  _setSwitchedOff(isSwitchedOff) {\n    if (this._isSwitchedOff !== isSwitchedOff) {\n      this._isSwitchedOff = isSwitchedOff;\n      this.emit(isSwitchedOff ? 'switchedOff' : 'switchedOn', this);\n    }\n  }\n}\n\n/**\n * A message was received over the {@link RemoteDataTrack}.\n * @event RemoteDataTrack#message\n * @param {string|ArrayBuffer} data\n * @param {RemoteDataTrack} track - The {@link RemoteDataTrack} that received\n *   the message\n */\n\n/**\n * A {@link RemoteDataTrack} was switched off.\n * @param {RemoteDataTrack} track - The {@link RemoteDataTrack} that was\n *   switched off\n * @event RemoteDataTrack#switchedOff\n */\n\n/**\n * A {@link RemoteDataTrack} was switched on.\n * @param {RemoteDataTrack} track - The {@link RemoteDataTrack} that was\n *   switched on\n * @event RemoteDataTrack#switchedOn\n */\n\nmodule.exports = RemoteDataTrack;\n"]},"metadata":{},"sourceType":"script"}