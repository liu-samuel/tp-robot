{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nvar StateMachine = require('./statemachine');\n\nvar _a = require('./util'),\n    buildLogLevels = _a.buildLogLevels,\n    makeUUID = _a.makeUUID;\n\nvar Log = require('./util/log');\n\nvar NetworkMonitor = require('./util/networkmonitor');\n\nvar Timeout = require('./util/timeout');\n\nvar nInstances = 0;\n/*\n  TwilioConnection states\n  -----------------------\n\n       ------------------------------------------\n       |                                        |\n       |                                        v\n  +---------+       +--------------+       +----------+\n  |  early  | ----> |  connecting  | ----> |  closed  |\n  +---------+       +--------------+       +----------+\n    ^                     | ^ |                 ^ ^\n    | --------------------- | |                 | |\n    | | --------------------- |                 | |\n    | | | --------------------|------------------ |\n    | v | |                   v                   |\n  +----------+           +--------+               |\n  | waiting  | --------> |  open  | ---------------\n  +----------+           +--------+\n */\n\nvar states = {\n  closed: [],\n  connecting: ['closed', 'open', 'waiting'],\n  early: ['closed', 'connecting'],\n  open: ['closed'],\n  waiting: ['closed', 'connecting', 'early', 'open']\n};\nvar events = {\n  closed: 'close',\n  open: 'open',\n  waiting: 'waiting'\n};\nvar TCMP_VERSION = 2;\nvar DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS = 3;\nvar DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS = 3;\nvar DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT = 5000;\nvar DEFAULT_OPEN_TIMEOUT = 15000;\nvar DEFAULT_WELCOME_TIMEOUT = 5000;\nvar OUTGOING_HEARTBEAT_OFFSET = 200;\nvar WS_CLOSE_NORMAL = 1000;\nvar WS_CLOSE_WELCOME_TIMEOUT = 3000;\nvar WS_CLOSE_HEARTBEATS_MISSED = 3001;\nvar WS_CLOSE_HELLO_FAILED = 3002;\nvar WS_CLOSE_SEND_FAILED = 3003;\nvar WS_CLOSE_NETWORK_CHANGED = 3004;\nvar WS_CLOSE_BUSY_WAIT = 3005;\nvar WS_CLOSE_SERVER_BUSY = 3006;\nvar WS_CLOSE_OPEN_TIMEOUT = 3007;\nvar toplevel = globalThis;\nvar WebSocket = toplevel.WebSocket ? toplevel.WebSocket : require('ws');\nvar CloseReason = {\n  BUSY: 'busy',\n  FAILED: 'failed',\n  LOCAL: 'local',\n  REMOTE: 'remote',\n  TIMEOUT: 'timeout'\n};\nvar wsCloseCodesToCloseReasons = new Map([[WS_CLOSE_WELCOME_TIMEOUT, CloseReason.TIMEOUT], [WS_CLOSE_HEARTBEATS_MISSED, CloseReason.TIMEOUT], [WS_CLOSE_HELLO_FAILED, CloseReason.FAILED], [WS_CLOSE_SEND_FAILED, CloseReason.FAILED], [WS_CLOSE_NETWORK_CHANGED, CloseReason.TIMEOUT], [WS_CLOSE_SERVER_BUSY, CloseReason.BUSY], [WS_CLOSE_OPEN_TIMEOUT, CloseReason.TIMEOUT]]);\n/**\n * A {@link TwilioConnection} represents a WebSocket connection\n * to a Twilio Connections Messaging Protocol (TCMP) server.\n * @fires TwilioConnection#close\n * @fires TwilioConnection#error\n * @fires TwilioConnection#message\n * @fires TwilioConnection#open\n * @fires TwilioConnection#waiting\n */\n\nvar TwilioConnection =\n/** @class */\nfunction (_super) {\n  __extends(TwilioConnection, _super);\n  /**\n   * Construct a {@link TwilioConnection}.\n   * @param {string} serverUrl - TCMP server url\n   * @param {TwilioConnectionOptions} options - {@link TwilioConnection} options\n   */\n\n\n  function TwilioConnection(serverUrl, options) {\n    var _this = _super.call(this, 'early', states) || this;\n\n    options = Object.assign({\n      helloBody: null,\n      maxConsecutiveFailedHellos: DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS,\n      maxConsecutiveMissedHeartbeats: DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS,\n      requestedHeartbeatTimeout: DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT,\n      openTimeout: DEFAULT_OPEN_TIMEOUT,\n      welcomeTimeout: DEFAULT_WELCOME_TIMEOUT,\n      Log: Log,\n      WebSocket: WebSocket\n    }, options);\n    var logLevels = buildLogLevels(options.logLevel);\n    var log = new options.Log('default', _this, logLevels, options.loggerName);\n    var networkMonitor = options.networkMonitor ? new NetworkMonitor(function () {\n      var type = networkMonitor.type;\n      var reason = \"Network changed\" + (type ? \" to \" + type : '');\n      log.debug(reason);\n\n      _this._close({\n        code: WS_CLOSE_NETWORK_CHANGED,\n        reason: reason\n      });\n    }) : null;\n    Object.defineProperties(_this, {\n      _busyWaitTimeout: {\n        value: null,\n        writable: true\n      },\n      _consecutiveHeartbeatsMissed: {\n        value: 0,\n        writable: true\n      },\n      _cookie: {\n        value: null,\n        writable: true\n      },\n      _eventObserver: {\n        value: options.eventObserver\n      },\n      _heartbeatTimeout: {\n        value: null,\n        writable: true\n      },\n      _hellosLeft: {\n        value: options.maxConsecutiveFailedHellos,\n        writable: true\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _log: {\n        value: log\n      },\n      _messageQueue: {\n        value: []\n      },\n      _networkMonitor: {\n        value: networkMonitor\n      },\n      _options: {\n        value: options\n      },\n      _openTimeout: {\n        value: null,\n        writable: true\n      },\n      _sendHeartbeatTimeout: {\n        value: null,\n        writable: true\n      },\n      _serverUrl: {\n        value: serverUrl\n      },\n      _welcomeTimeout: {\n        value: null,\n        writable: true\n      },\n      _ws: {\n        value: null,\n        writable: true\n      }\n    });\n    var eventsToLevels = {\n      connecting: 'info',\n      early: 'info',\n      open: 'info',\n      waiting: 'warning',\n      closed: 'info'\n    };\n\n    _this.on('stateChanged', function (state) {\n      var args = [];\n\n      for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n      }\n\n      if (state in events) {\n        _this.emit.apply(_this, __spreadArray([events[state]], __read(args)));\n      }\n\n      var event = {\n        name: state,\n        group: 'signaling',\n        level: eventsToLevels[_this.state]\n      };\n\n      if (state === 'closed') {\n        var _a = __read(args, 1),\n            reason = _a[0];\n\n        event.payload = {\n          reason: reason\n        };\n        event.level = reason === CloseReason.LOCAL ? 'info' : 'error';\n      }\n\n      _this._eventObserver.emit('event', event);\n    });\n\n    _this._eventObserver.emit('event', {\n      name: _this.state,\n      group: 'signaling',\n      level: eventsToLevels[_this.state]\n    });\n\n    _this._connect();\n\n    return _this;\n  }\n\n  TwilioConnection.prototype.toString = function () {\n    return \"[TwilioConnection #\" + this._instanceId + \": \" + this._ws.url + \"]\";\n  };\n  /**\n   * Close the {@link TwilioConnection}.\n   * @param {{code: number, reason: string}} event\n   * @private\n   */\n\n\n  TwilioConnection.prototype._close = function (_a) {\n    var code = _a.code,\n        reason = _a.reason;\n\n    if (this.state === 'closed') {\n      return;\n    }\n\n    if (this._openTimeout) {\n      this._openTimeout.clear();\n    }\n\n    if (this._welcomeTimeout) {\n      this._welcomeTimeout.clear();\n    }\n\n    if (this._heartbeatTimeout) {\n      this._heartbeatTimeout.clear();\n    }\n\n    if (this._sendHeartbeatTimeout) {\n      this._sendHeartbeatTimeout.clear();\n    }\n\n    if (this._networkMonitor) {\n      this._networkMonitor.stop();\n    }\n\n    if (this._busyWaitTimeout && code !== WS_CLOSE_BUSY_WAIT) {\n      this._busyWaitTimeout.clear();\n    }\n\n    this._messageQueue.splice(0);\n\n    var log = this._log;\n\n    if (code === WS_CLOSE_NORMAL) {\n      log.debug('Closed');\n      this.transition('closed', null, [CloseReason.LOCAL]);\n    } else {\n      log.warn(\"Closed: \" + code + \" - \" + reason);\n\n      if (code !== WS_CLOSE_BUSY_WAIT) {\n        this.transition('closed', null, [wsCloseCodesToCloseReasons.get(code) || CloseReason.REMOTE]);\n      }\n    }\n\n    var readyState = this._ws.readyState;\n    var WebSocket = this._options.WebSocket;\n\n    if (readyState !== WebSocket.CLOSING && readyState !== WebSocket.CLOSED) {\n      this._ws.close(code, reason);\n    }\n  };\n  /**\n   * Connect to the TCMP server.\n   * @private\n   */\n\n\n  TwilioConnection.prototype._connect = function () {\n    var _this = this;\n\n    var log = this._log;\n\n    if (this.state === 'waiting') {\n      this.transition('early');\n    } else if (this.state !== 'early') {\n      log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for connecting to the\" + ' TCMP server.');\n      return;\n    }\n\n    this._ws = new this._options.WebSocket(this._serverUrl);\n    var ws = this._ws;\n    log.debug('Created a new WebSocket:', ws);\n    ws.addEventListener('close', function (event) {\n      return _this._close(event);\n    });\n    var openTimeout = this._options.openTimeout; // Add a timeout for getting the onopen event on the WebSocket (15 sec). After that, attempt to reconnect only if this is not the first attempt.\n\n    this._openTimeout = new Timeout(function () {\n      var reason = \"Failed to open in \" + openTimeout + \" ms\";\n\n      _this._close({\n        code: WS_CLOSE_OPEN_TIMEOUT,\n        reason: reason\n      });\n    }, openTimeout);\n    ws.addEventListener('open', function () {\n      log.debug('WebSocket opened:', ws);\n\n      _this._openTimeout.clear();\n\n      _this._startHandshake();\n\n      if (_this._networkMonitor) {\n        _this._networkMonitor.start();\n      }\n    });\n    ws.addEventListener('message', function (message) {\n      log.debug(\"Incoming: \" + message.data);\n\n      try {\n        message = JSON.parse(message.data);\n      } catch (error) {\n        _this.emit('error', error);\n\n        return;\n      }\n\n      switch (message.type) {\n        case 'bad':\n          _this._handleBad(message);\n\n          break;\n\n        case 'busy':\n          _this._handleBusy(message);\n\n          break;\n\n        case 'bye':\n          // Do nothing.\n          break;\n\n        case 'msg':\n          _this._handleMessage(message);\n\n        // NOTE(mpatwardhan): Each incoming message should be treated as an incoming\n        // heartbeat intentionally falling through to 'heartbeat' case.\n        // eslint-disable-next-line no-fallthrough\n\n        case 'heartbeat':\n          _this._handleHeartbeat();\n\n          break;\n\n        case 'welcome':\n          _this._handleWelcome(message);\n\n          break;\n\n        default:\n          _this._log.debug(\"Unknown message type: \" + message.type);\n\n          _this.emit('error', new Error(\"Unknown message type: \" + message.type));\n\n          break;\n      }\n    });\n  };\n  /**\n   * Handle an incoming \"bad\" message.\n   * @param {{reason: string}} message\n   * @private\n   */\n\n\n  TwilioConnection.prototype._handleBad = function (_a) {\n    var reason = _a.reason;\n    var log = this._log;\n\n    if (!['connecting', 'open'].includes(this.state)) {\n      log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"bad\\\" message\" + ' from the TCMP server.');\n      return;\n    }\n\n    if (this.state === 'connecting') {\n      log.warn(\"Closing: \" + WS_CLOSE_HELLO_FAILED + \" - \" + reason);\n\n      this._close({\n        code: WS_CLOSE_HELLO_FAILED,\n        reason: reason\n      });\n\n      return;\n    }\n\n    log.debug(\"Error: \" + reason);\n    this.emit('error', new Error(reason));\n  };\n  /**\n   * Handle an incoming \"busy\" message.\n   * @param {{cookie: ?string, keepAlive: boolean, retryAfter: number}} message\n   * @private\n   */\n\n\n  TwilioConnection.prototype._handleBusy = function (_a) {\n    var _this = this;\n\n    var cookie = _a.cookie,\n        keepAlive = _a.keepAlive,\n        retryAfter = _a.retryAfter;\n    var log = this._log;\n\n    if (!['connecting', 'waiting'].includes(this.state)) {\n      log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"busy\\\" message\" + ' from the TCMP server.');\n      return;\n    }\n\n    if (this._busyWaitTimeout) {\n      this._busyWaitTimeout.clear();\n    }\n\n    if (this._welcomeTimeout) {\n      this._welcomeTimeout.clear();\n    }\n\n    var reason = retryAfter < 0 ? 'Received terminal \"busy\" message' : \"Received \\\"busy\\\" message, retrying after \" + retryAfter + \" ms\";\n\n    if (retryAfter < 0) {\n      log.warn(\"Closing: \" + WS_CLOSE_SERVER_BUSY + \" - \" + reason);\n\n      this._close({\n        code: WS_CLOSE_SERVER_BUSY,\n        reason: reason\n      });\n\n      return;\n    }\n\n    var maxConsecutiveFailedHellos = this._options.maxConsecutiveFailedHellos;\n    this._hellosLeft = maxConsecutiveFailedHellos;\n    this._cookie = cookie || null;\n\n    if (keepAlive) {\n      log.warn(reason);\n      this._busyWaitTimeout = new Timeout(function () {\n        return _this._startHandshake();\n      }, retryAfter);\n    } else {\n      log.warn(\"Closing: \" + WS_CLOSE_BUSY_WAIT + \" - \" + reason);\n\n      this._close({\n        code: WS_CLOSE_BUSY_WAIT,\n        reason: reason\n      });\n\n      this._busyWaitTimeout = new Timeout(function () {\n        return _this._connect();\n      }, retryAfter);\n    }\n\n    this.transition('waiting', null, [keepAlive, retryAfter]);\n  };\n  /**\n   * Handle an incoming \"heartbeat\" message.\n   * @private\n   */\n\n\n  TwilioConnection.prototype._handleHeartbeat = function () {\n    if (this.state !== 'open') {\n      this._log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"heartbeat\\\"\" + ' message from the TCMP server.');\n\n      return;\n    }\n\n    this._heartbeatTimeout.reset();\n  };\n  /**\n   * Handle a missed \"heartbeat\" message.\n   * @private\n   */\n\n\n  TwilioConnection.prototype._handleHeartbeatTimeout = function () {\n    if (this.state !== 'open') {\n      return;\n    }\n\n    var log = this._log;\n    var maxConsecutiveMissedHeartbeats = this._options.maxConsecutiveMissedHeartbeats;\n    log.debug(\"Consecutive heartbeats missed: \" + maxConsecutiveMissedHeartbeats);\n    var reason = \"Missed \" + maxConsecutiveMissedHeartbeats + \" \\\"heartbeat\\\" messages\";\n    log.warn(\"Closing: \" + WS_CLOSE_HEARTBEATS_MISSED + \" - \" + reason);\n\n    this._close({\n      code: WS_CLOSE_HEARTBEATS_MISSED,\n      reason: reason\n    });\n  };\n  /**\n   * Handle an incoming \"msg\" message.\n   * @param {{body: object}} message\n   * @private\n   */\n\n\n  TwilioConnection.prototype._handleMessage = function (_a) {\n    var body = _a.body;\n\n    if (this.state !== 'open') {\n      this._log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"msg\\\" message\" + ' from the TCMP server.');\n\n      return;\n    }\n\n    this.emit('message', body);\n  };\n  /**\n   * Handle an incoming \"welcome\" message.\n   * @param {{ negotiatedTimeout: number }} message\n   * @private\n   */\n\n\n  TwilioConnection.prototype._handleWelcome = function (_a) {\n    var _this = this;\n\n    var negotiatedTimeout = _a.negotiatedTimeout;\n    var log = this._log;\n\n    if (!['connecting', 'waiting'].includes(this.state)) {\n      log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"welcome\\\"\" + ' message from the TCMP server.');\n      return;\n    }\n\n    if (this.state === 'waiting') {\n      log.debug('Received \"welcome\" message, no need to retry connection.');\n\n      this._busyWaitTimeout.clear();\n    }\n\n    var maxConsecutiveMissedHeartbeats = this._options.maxConsecutiveMissedHeartbeats;\n    var heartbeatTimeout = negotiatedTimeout * maxConsecutiveMissedHeartbeats;\n    var outgoingHeartbeatTimeout = negotiatedTimeout - OUTGOING_HEARTBEAT_OFFSET;\n\n    this._welcomeTimeout.clear();\n\n    this._heartbeatTimeout = new Timeout(function () {\n      return _this._handleHeartbeatTimeout();\n    }, heartbeatTimeout);\n\n    this._messageQueue.splice(0).forEach(function (message) {\n      return _this._send(message);\n    });\n\n    this._sendHeartbeatTimeout = new Timeout(function () {\n      return _this._sendHeartbeat();\n    }, outgoingHeartbeatTimeout);\n    this.transition('open');\n  };\n  /**\n   * Handle a missed \"welcome\" message.\n   * @private\n   */\n\n\n  TwilioConnection.prototype._handleWelcomeTimeout = function () {\n    if (this.state !== 'connecting') {\n      return;\n    }\n\n    var log = this._log;\n\n    if (this._hellosLeft <= 0) {\n      var reason = 'All handshake attempts failed';\n      log.warn(\"Closing: \" + WS_CLOSE_WELCOME_TIMEOUT + \" - \" + reason);\n\n      this._close({\n        code: WS_CLOSE_WELCOME_TIMEOUT,\n        reason: reason\n      });\n\n      return;\n    }\n\n    var maxConsecutiveFailedHellos = this._options.maxConsecutiveFailedHellos;\n    log.warn(\"Handshake attempt \" + (maxConsecutiveFailedHellos - this._hellosLeft) + \" failed\");\n\n    this._startHandshake();\n  };\n  /**\n   * Send a message to the TCMP server.\n   * @param {*} message\n   * @private\n   */\n\n\n  TwilioConnection.prototype._send = function (message) {\n    var readyState = this._ws.readyState;\n    var WebSocket = this._options.WebSocket;\n\n    if (readyState === WebSocket.OPEN) {\n      var data = JSON.stringify(message);\n\n      this._log.debug(\"Outgoing: \" + data);\n\n      try {\n        this._ws.send(data);\n\n        if (this._sendHeartbeatTimeout) {\n          // Each outgoing message is to be treated as an outgoing heartbeat.\n          this._sendHeartbeatTimeout.reset();\n        }\n      } catch (error) {\n        var reason = 'Failed to send message';\n\n        this._log.warn(\"Closing: \" + WS_CLOSE_SEND_FAILED + \" - \" + reason);\n\n        this._close({\n          code: WS_CLOSE_SEND_FAILED,\n          reason: reason\n        });\n      }\n    }\n  };\n  /**\n   * Send a \"heartbeat\" message.\n   * @private\n   */\n\n\n  TwilioConnection.prototype._sendHeartbeat = function () {\n    if (this.state === 'closed') {\n      return;\n    }\n\n    this._send({\n      type: 'heartbeat'\n    });\n  };\n  /**\n   * Send a \"hello\" message.\n   * @private\n   */\n\n\n  TwilioConnection.prototype._sendHello = function () {\n    var _a = this._options,\n        helloBody = _a.helloBody,\n        timeout = _a.requestedHeartbeatTimeout;\n    var hello = {\n      id: makeUUID(),\n      timeout: timeout,\n      type: 'hello',\n      version: TCMP_VERSION\n    };\n\n    if (this._cookie) {\n      hello.cookie = this._cookie;\n    }\n\n    if (helloBody) {\n      hello.body = helloBody;\n    }\n\n    this._send(hello);\n  };\n  /**\n   * Send or enqueue a message.\n   * @param {*} message\n   * @private\n   */\n\n\n  TwilioConnection.prototype._sendOrEnqueue = function (message) {\n    var _this = this;\n\n    if (this.state === 'closed') {\n      return;\n    }\n\n    var sendOrEnqueue = this.state === 'open' ? function (message) {\n      return _this._send(message);\n    } : function (message) {\n      return _this._messageQueue.push(message);\n    };\n    sendOrEnqueue(message);\n  };\n  /**\n   * Start the TCMP handshake.\n   * @private\n   */\n\n\n  TwilioConnection.prototype._startHandshake = function () {\n    var _this = this;\n\n    if (['early', 'waiting'].includes(this.state)) {\n      this.transition('connecting');\n    }\n\n    if (this.state !== 'connecting') {\n      return;\n    }\n\n    this._hellosLeft--;\n\n    this._sendHello();\n\n    var welcomeTimeout = this._options.welcomeTimeout;\n    this._welcomeTimeout = new Timeout(function () {\n      return _this._handleWelcomeTimeout();\n    }, welcomeTimeout);\n  };\n  /**\n   * Close the {@link TwilioConnection}.\n   * @returns {void}\n   */\n\n\n  TwilioConnection.prototype.close = function () {\n    if (this.state === 'closed') {\n      return;\n    }\n\n    this._sendOrEnqueue({\n      type: 'bye'\n    });\n\n    this._close({\n      code: WS_CLOSE_NORMAL,\n      reason: 'Normal'\n    });\n  };\n  /**\n   * Send a \"msg\" message.\n   * @param {*} body\n   * @returns {void}\n   */\n\n\n  TwilioConnection.prototype.sendMessage = function (body) {\n    this._sendOrEnqueue({\n      body: body,\n      type: 'msg'\n    });\n  };\n\n  return TwilioConnection;\n}(StateMachine);\n/**\n * A unique string depicting the reason for the {@link TwilioConnection} being closed.\n * @enum {string}\n */\n\n\nTwilioConnection.CloseReason = CloseReason;\n/**\n * A {@link TwilioConnection} was closed.\n * @event TwilioConnection#close\n * @param {CloseReason} reason - The reason for the {@link TwilioConnection} being closed\n */\n\n/**\n * A {@link TwilioConnection} received an error from the TCMP server.\n * @event TwilioConnection#error\n * @param {Error} error - The TCMP server error\n */\n\n/**\n * A {@link TwilioConnection} received a message from the TCMP server.\n * @event TwilioConnection#message\n * @param {*} body - Message body\n */\n\n/**\n * A {@link TwilioConnection} completed a hello/welcome handshake with the TCMP server.\n * @event TwilioConnection#open\n */\n\n/**\n * A {@link TwilioConnection} received a \"busy\" message from the TCMP server.\n * @event TwilioConnection#waiting\n * @param {boolean} keepAlive - true if the WebSocket connection is retained\n * @param {number} retryAfter - delay in milliseconds after which a retry is attempted\n */\n\n/**\n * {@link TwilioConnection} options\n * @typedef {object} TwilioConnectionOptions\n * @property {EventObserver} [eventObserver] - Optional event observer\n * @property {*} [helloBody=null] - Optional body for \"hello\" message\n * @property {LogLevel} [logLevel=warn] - Log level of the {@link TwilioConnection}\n * @property {number} [maxConsecutiveFailedHellos=3] - Max. number of consecutive failed \"hello\"s\n * @property {number} [maxConsecutiveMissedHeartbeats=3] - Max. number of (effective) consecutive \"heartbeat\" messages that can be missed\n * @property {number} [requestedHeartbeatTimeout=5000] - \"heartbeat\" timeout (ms) requested by the {@link TwilioConnection}\n * @property {number} [welcomeTimeout=5000] - Time (ms) to wait for the \"welcome\" message after sending the \"hello\" message\n */\n\nmodule.exports = TwilioConnection;","map":{"version":3,"mappings":"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","names":["StateMachine","require","buildLogLevels","makeUUID","Log","NetworkMonitor","Timeout","nInstances","states","closed","connecting","early","open","waiting","events","TCMP_VERSION","DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS","DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS","DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT","DEFAULT_OPEN_TIMEOUT","DEFAULT_WELCOME_TIMEOUT","OUTGOING_HEARTBEAT_OFFSET","WS_CLOSE_NORMAL","WS_CLOSE_WELCOME_TIMEOUT","WS_CLOSE_HEARTBEATS_MISSED","WS_CLOSE_HELLO_FAILED","WS_CLOSE_SEND_FAILED","WS_CLOSE_NETWORK_CHANGED","WS_CLOSE_BUSY_WAIT","WS_CLOSE_SERVER_BUSY","WS_CLOSE_OPEN_TIMEOUT","toplevel","globalThis","WebSocket","CloseReason","BUSY","FAILED","LOCAL","REMOTE","TIMEOUT","wsCloseCodesToCloseReasons","Map","__extends","serverUrl","options","_super","Object","assign","helloBody","maxConsecutiveFailedHellos","maxConsecutiveMissedHeartbeats","requestedHeartbeatTimeout","openTimeout","welcomeTimeout","logLevels","logLevel","log","_this","loggerName","networkMonitor","reason","type","debug","_close","code","defineProperties","_busyWaitTimeout","value","writable","_consecutiveHeartbeatsMissed","_cookie","_eventObserver","eventObserver","_heartbeatTimeout","_hellosLeft","_instanceId","_log","_messageQueue","_networkMonitor","_options","_openTimeout","_sendHeartbeatTimeout","_serverUrl","_welcomeTimeout","_ws","eventsToLevels","on","state","args","emit","apply","__spreadArray","__read","event","name","group","level","payload","_connect","TwilioConnection","url","_a","clear","stop","splice","transition","warn","get","readyState","CLOSING","CLOSED","close","ws","addEventListener","_startHandshake","start","message","data","JSON","parse","error","_handleBad","_handleBusy","_handleMessage","_handleHeartbeat","_handleWelcome","Error","includes","cookie","keepAlive","retryAfter","reset","body","negotiatedTimeout","heartbeatTimeout","outgoingHeartbeatTimeout","_handleHeartbeatTimeout","forEach","_send","_sendHeartbeat","OPEN","stringify","send","timeout","hello","id","version","sendOrEnqueue","push","_sendHello","_handleWelcomeTimeout","_sendOrEnqueue","module","exports"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/twilioconnection.js"],"sourcesContent":["'use strict';\n\nconst StateMachine = require('./statemachine');\nconst { buildLogLevels, makeUUID } = require('./util');\nconst Log = require('./util/log');\nconst NetworkMonitor = require('./util/networkmonitor');\nconst Timeout = require('./util/timeout');\n\nlet nInstances = 0;\n\n/*\n  TwilioConnection states\n  -----------------------\n\n       ------------------------------------------\n       |                                        |\n       |                                        v\n  +---------+       +--------------+       +----------+\n  |  early  | ----> |  connecting  | ----> |  closed  |\n  +---------+       +--------------+       +----------+\n    ^                     | ^ |                 ^ ^\n    | --------------------- | |                 | |\n    | | --------------------- |                 | |\n    | | | --------------------|------------------ |\n    | v | |                   v                   |\n  +----------+           +--------+               |\n  | waiting  | --------> |  open  | ---------------\n  +----------+           +--------+\n */\n\nconst states = {\n  closed: [],\n  connecting: ['closed', 'open', 'waiting'],\n  early: ['closed', 'connecting'],\n  open: ['closed'],\n  waiting: ['closed', 'connecting', 'early', 'open']\n};\n\nconst events = {\n  closed: 'close',\n  open: 'open',\n  waiting: 'waiting'\n};\n\nconst TCMP_VERSION = 2;\n\nconst DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS = 3;\nconst DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS = 3;\nconst DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT = 5000;\nconst DEFAULT_OPEN_TIMEOUT = 15000;\nconst DEFAULT_WELCOME_TIMEOUT = 5000;\nconst OUTGOING_HEARTBEAT_OFFSET = 200;\n\nconst WS_CLOSE_NORMAL = 1000;\nconst WS_CLOSE_WELCOME_TIMEOUT = 3000;\nconst WS_CLOSE_HEARTBEATS_MISSED = 3001;\nconst WS_CLOSE_HELLO_FAILED = 3002;\nconst WS_CLOSE_SEND_FAILED = 3003;\nconst WS_CLOSE_NETWORK_CHANGED = 3004;\nconst WS_CLOSE_BUSY_WAIT = 3005;\nconst WS_CLOSE_SERVER_BUSY = 3006;\nconst WS_CLOSE_OPEN_TIMEOUT = 3007;\n\nconst toplevel = globalThis;\nconst WebSocket = toplevel.WebSocket ? toplevel.WebSocket : require('ws');\n\nconst CloseReason = {\n  BUSY: 'busy',\n  FAILED: 'failed',\n  LOCAL: 'local',\n  REMOTE: 'remote',\n  TIMEOUT: 'timeout'\n};\n\nconst wsCloseCodesToCloseReasons = new Map([\n  [WS_CLOSE_WELCOME_TIMEOUT, CloseReason.TIMEOUT],\n  [WS_CLOSE_HEARTBEATS_MISSED, CloseReason.TIMEOUT],\n  [WS_CLOSE_HELLO_FAILED, CloseReason.FAILED],\n  [WS_CLOSE_SEND_FAILED, CloseReason.FAILED],\n  [WS_CLOSE_NETWORK_CHANGED, CloseReason.TIMEOUT],\n  [WS_CLOSE_SERVER_BUSY, CloseReason.BUSY],\n  [WS_CLOSE_OPEN_TIMEOUT, CloseReason.TIMEOUT]\n]);\n\n/**\n * A {@link TwilioConnection} represents a WebSocket connection\n * to a Twilio Connections Messaging Protocol (TCMP) server.\n * @fires TwilioConnection#close\n * @fires TwilioConnection#error\n * @fires TwilioConnection#message\n * @fires TwilioConnection#open\n * @fires TwilioConnection#waiting\n */\nclass TwilioConnection extends StateMachine {\n  /**\n   * Construct a {@link TwilioConnection}.\n   * @param {string} serverUrl - TCMP server url\n   * @param {TwilioConnectionOptions} options - {@link TwilioConnection} options\n   */\n  constructor(serverUrl, options) {\n    super('early', states);\n\n    options = Object.assign({\n      helloBody: null,\n      maxConsecutiveFailedHellos: DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS,\n      maxConsecutiveMissedHeartbeats: DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS,\n      requestedHeartbeatTimeout: DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT,\n      openTimeout: DEFAULT_OPEN_TIMEOUT,\n      welcomeTimeout: DEFAULT_WELCOME_TIMEOUT,\n      Log,\n      WebSocket\n    }, options);\n\n    const logLevels = buildLogLevels(options.logLevel);\n    const log = new options.Log('default', this, logLevels, options.loggerName);\n\n    const networkMonitor = options.networkMonitor ? new NetworkMonitor(() => {\n      const { type } = networkMonitor;\n      const reason = `Network changed${type ? ` to ${type}` : ''}`;\n      log.debug(reason);\n      this._close({ code: WS_CLOSE_NETWORK_CHANGED, reason });\n    }) : null;\n\n    Object.defineProperties(this, {\n      _busyWaitTimeout: {\n        value: null,\n        writable: true\n      },\n      _consecutiveHeartbeatsMissed: {\n        value: 0,\n        writable: true\n      },\n      _cookie: {\n        value: null,\n        writable: true\n      },\n      _eventObserver: {\n        value: options.eventObserver\n      },\n      _heartbeatTimeout: {\n        value: null,\n        writable: true\n      },\n      _hellosLeft: {\n        value: options.maxConsecutiveFailedHellos,\n        writable: true\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _log: {\n        value: log\n      },\n      _messageQueue: {\n        value: []\n      },\n      _networkMonitor: {\n        value: networkMonitor\n      },\n      _options: {\n        value: options\n      },\n      _openTimeout: {\n        value: null,\n        writable: true\n      },\n      _sendHeartbeatTimeout: {\n        value: null,\n        writable: true\n      },\n      _serverUrl: {\n        value: serverUrl\n      },\n      _welcomeTimeout: {\n        value: null,\n        writable: true\n      },\n      _ws: {\n        value: null,\n        writable: true\n      }\n    });\n\n    const eventsToLevels = {\n      connecting: 'info',\n      early: 'info',\n      open: 'info',\n      waiting: 'warning',\n      closed: 'info'\n    };\n\n    this.on('stateChanged', (state, ...args) => {\n      if (state in events) {\n        this.emit(events[state], ...args);\n      }\n      const event = { name: state, group: 'signaling', level: eventsToLevels[this.state] };\n      if (state === 'closed') {\n        const [reason] = args;\n        event.payload = { reason };\n        event.level = reason === CloseReason.LOCAL ? 'info' : 'error';\n      }\n      this._eventObserver.emit('event', event);\n    });\n\n    this._eventObserver.emit('event', { name: this.state, group: 'signaling', level: eventsToLevels[this.state] });\n    this._connect();\n  }\n\n  toString() {\n    return `[TwilioConnection #${this._instanceId}: ${this._ws.url}]`;\n  }\n\n  /**\n   * Close the {@link TwilioConnection}.\n   * @param {{code: number, reason: string}} event\n   * @private\n   */\n  _close({ code, reason }) {\n    if (this.state === 'closed') {\n      return;\n    }\n    if (this._openTimeout) {\n      this._openTimeout.clear();\n    }\n    if (this._welcomeTimeout) {\n      this._welcomeTimeout.clear();\n    }\n    if (this._heartbeatTimeout) {\n      this._heartbeatTimeout.clear();\n    }\n    if (this._sendHeartbeatTimeout) {\n      this._sendHeartbeatTimeout.clear();\n    }\n    if (this._networkMonitor) {\n      this._networkMonitor.stop();\n    }\n    if (this._busyWaitTimeout && code !== WS_CLOSE_BUSY_WAIT) {\n      this._busyWaitTimeout.clear();\n    }\n    this._messageQueue.splice(0);\n    const log = this._log;\n\n    if (code === WS_CLOSE_NORMAL) {\n      log.debug('Closed');\n      this.transition('closed', null, [CloseReason.LOCAL]);\n    } else {\n      log.warn(`Closed: ${code} - ${reason}`);\n      if (code !== WS_CLOSE_BUSY_WAIT) {\n        this.transition('closed', null, [\n          wsCloseCodesToCloseReasons.get(code) || CloseReason.REMOTE\n        ]);\n      }\n    }\n    const { readyState } = this._ws;\n    const { WebSocket } = this._options;\n\n    if (readyState !== WebSocket.CLOSING && readyState !== WebSocket.CLOSED) {\n      this._ws.close(code, reason);\n    }\n  }\n\n  /**\n   * Connect to the TCMP server.\n   * @private\n   */\n  _connect() {\n    const log = this._log;\n    if (this.state === 'waiting') {\n      this.transition('early');\n    } else if (this.state !== 'early') {\n      log.warn(`Unexpected state \"${this.state}\" for connecting to the`\n        + ' TCMP server.');\n      return;\n    }\n    this._ws = new this._options.WebSocket(this._serverUrl);\n    const ws = this._ws;\n    log.debug('Created a new WebSocket:', ws);\n    ws.addEventListener('close', event => this._close(event));\n\n    const { openTimeout } = this._options;\n    // Add a timeout for getting the onopen event on the WebSocket (15 sec). After that, attempt to reconnect only if this is not the first attempt.\n    this._openTimeout = new Timeout(() => {\n      const reason = `Failed to open in ${openTimeout} ms`;\n      this._close({ code: WS_CLOSE_OPEN_TIMEOUT, reason });\n    }, openTimeout);\n\n    ws.addEventListener('open', () => {\n      log.debug('WebSocket opened:', ws);\n      this._openTimeout.clear();\n      this._startHandshake();\n      if (this._networkMonitor) {\n        this._networkMonitor.start();\n      }\n    });\n\n    ws.addEventListener('message', message => {\n      log.debug(`Incoming: ${message.data}`);\n      try {\n        message = JSON.parse(message.data);\n      } catch (error) {\n        this.emit('error', error);\n        return;\n      }\n\n      switch (message.type) {\n        case 'bad':\n          this._handleBad(message);\n          break;\n        case 'busy':\n          this._handleBusy(message);\n          break;\n        case 'bye':\n          // Do nothing.\n          break;\n        case 'msg':\n          this._handleMessage(message);\n          // NOTE(mpatwardhan): Each incoming message should be treated as an incoming\n          // heartbeat intentionally falling through to 'heartbeat' case.\n          // eslint-disable-next-line no-fallthrough\n        case 'heartbeat':\n          this._handleHeartbeat();\n          break;\n        case 'welcome':\n          this._handleWelcome(message);\n          break;\n        default:\n          this._log.debug(`Unknown message type: ${message.type}`);\n          this.emit('error', new Error(`Unknown message type: ${message.type}`));\n          break;\n      }\n    });\n  }\n\n  /**\n   * Handle an incoming \"bad\" message.\n   * @param {{reason: string}} message\n   * @private\n   */\n  _handleBad({ reason }) {\n    const log = this._log;\n    if (!['connecting', 'open'].includes(this.state)) {\n      log.warn(`Unexpected state \"${this.state}\" for handling a \"bad\" message`\n        + ' from the TCMP server.');\n      return;\n    }\n    if (this.state === 'connecting') {\n      log.warn(`Closing: ${WS_CLOSE_HELLO_FAILED} - ${reason}`);\n      this._close({ code: WS_CLOSE_HELLO_FAILED, reason });\n      return;\n    }\n    log.debug(`Error: ${reason}`);\n    this.emit('error', new Error(reason));\n  }\n\n  /**\n   * Handle an incoming \"busy\" message.\n   * @param {{cookie: ?string, keepAlive: boolean, retryAfter: number}} message\n   * @private\n   */\n  _handleBusy({ cookie, keepAlive, retryAfter }) {\n    const log = this._log;\n    if (!['connecting', 'waiting'].includes(this.state)) {\n      log.warn(`Unexpected state \"${this.state}\" for handling a \"busy\" message`\n        + ' from the TCMP server.');\n      return;\n    }\n    if (this._busyWaitTimeout) {\n      this._busyWaitTimeout.clear();\n    }\n    if (this._welcomeTimeout) {\n      this._welcomeTimeout.clear();\n    }\n    const reason = retryAfter < 0\n      ? 'Received terminal \"busy\" message'\n      : `Received \"busy\" message, retrying after ${retryAfter} ms`;\n\n    if (retryAfter < 0) {\n      log.warn(`Closing: ${WS_CLOSE_SERVER_BUSY} - ${reason}`);\n      this._close({ code: WS_CLOSE_SERVER_BUSY, reason });\n      return;\n    }\n    const { maxConsecutiveFailedHellos } = this._options;\n    this._hellosLeft = maxConsecutiveFailedHellos;\n    this._cookie = cookie || null;\n\n    if (keepAlive) {\n      log.warn(reason);\n      this._busyWaitTimeout = new Timeout(() => this._startHandshake(), retryAfter);\n    } else {\n      log.warn(`Closing: ${WS_CLOSE_BUSY_WAIT} - ${reason}`);\n      this._close({ code: WS_CLOSE_BUSY_WAIT, reason });\n      this._busyWaitTimeout = new Timeout(() => this._connect(), retryAfter);\n    }\n\n    this.transition('waiting', null, [keepAlive, retryAfter]);\n  }\n\n  /**\n   * Handle an incoming \"heartbeat\" message.\n   * @private\n   */\n  _handleHeartbeat() {\n    if (this.state !== 'open') {\n      this._log.warn(`Unexpected state \"${this.state}\" for handling a \"heartbeat\"`\n        + ' message from the TCMP server.');\n      return;\n    }\n    this._heartbeatTimeout.reset();\n  }\n\n  /**\n   * Handle a missed \"heartbeat\" message.\n   * @private\n   */\n  _handleHeartbeatTimeout() {\n    if (this.state !== 'open') {\n      return;\n    }\n    const log = this._log;\n    const { maxConsecutiveMissedHeartbeats } = this._options;\n\n    log.debug(`Consecutive heartbeats missed: ${maxConsecutiveMissedHeartbeats}`);\n    const reason = `Missed ${maxConsecutiveMissedHeartbeats} \"heartbeat\" messages`;\n    log.warn(`Closing: ${WS_CLOSE_HEARTBEATS_MISSED} - ${reason}`);\n    this._close({ code: WS_CLOSE_HEARTBEATS_MISSED, reason });\n  }\n\n  /**\n   * Handle an incoming \"msg\" message.\n   * @param {{body: object}} message\n   * @private\n   */\n  _handleMessage({ body }) {\n    if (this.state !== 'open') {\n      this._log.warn(`Unexpected state \"${this.state}\" for handling a \"msg\" message`\n        + ' from the TCMP server.');\n      return;\n    }\n    this.emit('message', body);\n  }\n\n  /**\n   * Handle an incoming \"welcome\" message.\n   * @param {{ negotiatedTimeout: number }} message\n   * @private\n   */\n  _handleWelcome({ negotiatedTimeout }) {\n    const log = this._log;\n\n    if (!['connecting', 'waiting'].includes(this.state)) {\n      log.warn(`Unexpected state \"${this.state}\" for handling a \"welcome\"`\n        + ' message from the TCMP server.');\n      return;\n    }\n\n    if (this.state === 'waiting') {\n      log.debug('Received \"welcome\" message, no need to retry connection.');\n      this._busyWaitTimeout.clear();\n    }\n\n    const { maxConsecutiveMissedHeartbeats } = this._options;\n    const heartbeatTimeout = negotiatedTimeout * maxConsecutiveMissedHeartbeats;\n    const outgoingHeartbeatTimeout = negotiatedTimeout - OUTGOING_HEARTBEAT_OFFSET;\n\n    this._welcomeTimeout.clear();\n    this._heartbeatTimeout = new Timeout(() => this._handleHeartbeatTimeout(), heartbeatTimeout);\n    this._messageQueue.splice(0).forEach(message => this._send(message));\n    this._sendHeartbeatTimeout = new Timeout(() => this._sendHeartbeat(), outgoingHeartbeatTimeout);\n    this.transition('open');\n  }\n\n  /**\n   * Handle a missed \"welcome\" message.\n   * @private\n   */\n  _handleWelcomeTimeout() {\n    if (this.state !== 'connecting') {\n      return;\n    }\n    const log = this._log;\n\n    if (this._hellosLeft <= 0) {\n      const reason = 'All handshake attempts failed';\n      log.warn(`Closing: ${WS_CLOSE_WELCOME_TIMEOUT} - ${reason}`);\n      this._close({ code: WS_CLOSE_WELCOME_TIMEOUT, reason });\n      return;\n    }\n\n    const { maxConsecutiveFailedHellos } = this._options;\n    log.warn(`Handshake attempt ${maxConsecutiveFailedHellos - this._hellosLeft} failed`);\n    this._startHandshake();\n  }\n\n  /**\n   * Send a message to the TCMP server.\n   * @param {*} message\n   * @private\n   */\n  _send(message) {\n    const { readyState } = this._ws;\n    const { WebSocket } = this._options;\n    if (readyState === WebSocket.OPEN) {\n      const data = JSON.stringify(message);\n      this._log.debug(`Outgoing: ${data}`);\n      try {\n        this._ws.send(data);\n        if (this._sendHeartbeatTimeout) {\n          // Each outgoing message is to be treated as an outgoing heartbeat.\n          this._sendHeartbeatTimeout.reset();\n        }\n      } catch (error) {\n        const reason = 'Failed to send message';\n        this._log.warn(`Closing: ${WS_CLOSE_SEND_FAILED} - ${reason}`);\n        this._close({ code: WS_CLOSE_SEND_FAILED, reason });\n      }\n    }\n  }\n\n  /**\n   * Send a \"heartbeat\" message.\n   * @private\n   */\n  _sendHeartbeat() {\n    if (this.state === 'closed') {\n      return;\n    }\n    this._send({ type: 'heartbeat' });\n  }\n\n  /**\n   * Send a \"hello\" message.\n   * @private\n   */\n  _sendHello() {\n    const { helloBody, requestedHeartbeatTimeout: timeout } = this._options;\n    const hello = {\n      id: makeUUID(),\n      timeout,\n      type: 'hello',\n      version: TCMP_VERSION\n    };\n    if (this._cookie) {\n      hello.cookie = this._cookie;\n    }\n    if (helloBody) {\n      hello.body = helloBody;\n    }\n    this._send(hello);\n  }\n\n  /**\n   * Send or enqueue a message.\n   * @param {*} message\n   * @private\n   */\n  _sendOrEnqueue(message) {\n    if (this.state === 'closed') {\n      return;\n    }\n    const sendOrEnqueue = this.state === 'open'\n      ? message => this._send(message)\n      : message => this._messageQueue.push(message);\n\n    sendOrEnqueue(message);\n  }\n\n  /**\n   * Start the TCMP handshake.\n   * @private\n   */\n  _startHandshake() {\n    if (['early', 'waiting'].includes(this.state)) {\n      this.transition('connecting');\n    }\n    if (this.state !== 'connecting') {\n      return;\n    }\n    this._hellosLeft--;\n    this._sendHello();\n    const { welcomeTimeout } = this._options;\n    this._welcomeTimeout = new Timeout(() => this._handleWelcomeTimeout(), welcomeTimeout);\n  }\n\n  /**\n   * Close the {@link TwilioConnection}.\n   * @returns {void}\n   */\n  close() {\n    if (this.state === 'closed') {\n      return;\n    }\n    this._sendOrEnqueue({ type: 'bye' });\n    this._close({ code: WS_CLOSE_NORMAL, reason: 'Normal' });\n  }\n\n  /**\n   * Send a \"msg\" message.\n   * @param {*} body\n   * @returns {void}\n   */\n  sendMessage(body) {\n    this._sendOrEnqueue({ body, type: 'msg' });\n  }\n}\n\n/**\n * A unique string depicting the reason for the {@link TwilioConnection} being closed.\n * @enum {string}\n */\nTwilioConnection.CloseReason = CloseReason;\n\n/**\n * A {@link TwilioConnection} was closed.\n * @event TwilioConnection#close\n * @param {CloseReason} reason - The reason for the {@link TwilioConnection} being closed\n */\n\n/**\n * A {@link TwilioConnection} received an error from the TCMP server.\n * @event TwilioConnection#error\n * @param {Error} error - The TCMP server error\n */\n\n/**\n * A {@link TwilioConnection} received a message from the TCMP server.\n * @event TwilioConnection#message\n * @param {*} body - Message body\n */\n\n/**\n * A {@link TwilioConnection} completed a hello/welcome handshake with the TCMP server.\n * @event TwilioConnection#open\n */\n\n/**\n * A {@link TwilioConnection} received a \"busy\" message from the TCMP server.\n * @event TwilioConnection#waiting\n * @param {boolean} keepAlive - true if the WebSocket connection is retained\n * @param {number} retryAfter - delay in milliseconds after which a retry is attempted\n */\n\n/**\n * {@link TwilioConnection} options\n * @typedef {object} TwilioConnectionOptions\n * @property {EventObserver} [eventObserver] - Optional event observer\n * @property {*} [helloBody=null] - Optional body for \"hello\" message\n * @property {LogLevel} [logLevel=warn] - Log level of the {@link TwilioConnection}\n * @property {number} [maxConsecutiveFailedHellos=3] - Max. number of consecutive failed \"hello\"s\n * @property {number} [maxConsecutiveMissedHeartbeats=3] - Max. number of (effective) consecutive \"heartbeat\" messages that can be missed\n * @property {number} [requestedHeartbeatTimeout=5000] - \"heartbeat\" timeout (ms) requested by the {@link TwilioConnection}\n * @property {number} [welcomeTimeout=5000] - Time (ms) to wait for the \"welcome\" message after sending the \"hello\" message\n */\n\nmodule.exports = TwilioConnection;\n"]},"metadata":{},"sourceType":"script"}