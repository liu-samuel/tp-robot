{"ast":null,"code":"/* eslint consistent-return:0 */\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar ParticipantSignaling = require('./participant');\n\nvar RoomSignaling = require('./room');\n\nvar StateMachine = require('../statemachine');\n/*\nSignaling States\n----------------\n\n              +---------+\n              |         |\n              | opening |\n         +--->|         |\n         |    +---------+\n    +--------+   |   |   +------+\n    |        |<--+   +-->|      |\n    | closed |<----------| open |\n    |        |<--+   +-->|      |\n    +--------+   |   |   +------+\n              +---------+   |\n              |         |<--+\n              | closing |\n              |         |\n              +---------+\n\n*/\n\n\nvar states = {\n  closed: ['opening'],\n  opening: ['closed', 'open'],\n  open: ['closed', 'closing'],\n  closing: ['closed', 'open']\n};\n/**\n * @extends StateMachine\n * @property {string} state - one of \"closed\", \"opening\", \"open\", or \"closing\"\n */\n\nvar Signaling =\n/** @class */\nfunction (_super) {\n  __extends(Signaling, _super);\n  /**\n   * Construct {@link Signaling}.\n   */\n\n\n  function Signaling() {\n    return _super.call(this, 'closed', states) || this;\n  }\n  /**\n   * @private\n   */\n  // NOTE(mroberts): This is a dummy implementation suitable for testing.\n\n\n  Signaling.prototype._close = function (key) {\n    this.transition('closing', key);\n    this.transition('closed', key);\n    return Promise.resolve(this);\n  };\n  /**\n   * @private\n   */\n  // NOTE(mroberts): This is a dummy implementation suitable for testing.\n\n\n  Signaling.prototype._connect = function (localParticipant, token, encodingParameters, preferredCodecs, options) {\n    localParticipant.connect('PA00000000000000000000000000000000', 'test');\n    var sid = 'RM00000000000000000000000000000000';\n    var promise = Promise.resolve(new RoomSignaling(localParticipant, sid, options));\n\n    promise.cancel = function cancel() {};\n\n    return promise;\n  };\n  /**\n   * @private\n   */\n  // NOTE(mroberts): This is a dummy implementation suitable for testing.\n\n\n  Signaling.prototype._open = function (key) {\n    this.transition('opening', key);\n    this.transition('open', key);\n    return Promise.resolve(this);\n  };\n  /**\n   * Close the {@link Signaling}.\n   * @returns {Promise<this>}\n   */\n\n\n  Signaling.prototype.close = function () {\n    var _this = this;\n\n    return this.bracket('close', function (key) {\n      switch (_this.state) {\n        case 'closed':\n          return _this;\n\n        case 'open':\n          return _this._close(key);\n\n        default:\n          throw new Error(\"Unexpected Signaling state \\\"\" + _this.state + \"\\\"\");\n      }\n    });\n  };\n  /**\n   * Connect to a {@link RoomSignaling}.\n   * @param {ParticipantSignaling} localParticipant\n   * @param {string} token\n   * @param {EncodingParametersImpl} encodingParameters\n   * @param {PreferredCodecs} preferredCodecs\n   * @param {object} options\n   * @returns {Promise<function(): CancelablePromise<RoomSignaling>>}\n   */\n\n\n  Signaling.prototype.connect = function (localParticipant, token, encodingParameters, preferredCodecs, options) {\n    var self = this;\n    return this.bracket('connect', function transition(key) {\n      switch (self.state) {\n        case 'closed':\n          return self._open(key).then(transition.bind(null, key));\n\n        case 'open':\n          // NOTE(mroberts): We don't need to hold the lock in _connect. Instead,\n          // we just need to ensure the Signaling remains open.\n          self.releaseLockCompletely(key);\n          return self._connect(localParticipant, token, encodingParameters, preferredCodecs, options);\n\n        default:\n          throw new Error(\"Unexpected Signaling state \\\"\" + self.state + \"\\\"\");\n      }\n    });\n  };\n  /**\n   * Create a local {@link ParticipantSignaling}.\n   * @returns {ParticipantSignaling}\n   */\n\n\n  Signaling.prototype.createLocalParticipantSignaling = function () {\n    return new ParticipantSignaling();\n  };\n  /**\n   * Open the {@link Signaling}.\n   * @returns {Promise<this>}\n   */\n\n\n  Signaling.prototype.open = function () {\n    var _this = this;\n\n    return this.bracket('open', function (key) {\n      switch (_this.state) {\n        case 'closed':\n          return _this._open(key);\n\n        case 'open':\n          return _this;\n\n        default:\n          throw new Error(\"Unexpected Signaling state \\\"\" + _this.state + \"\\\"\");\n      }\n    });\n  };\n\n  return Signaling;\n}(StateMachine);\n\nmodule.exports = Signaling;","map":{"version":3,"mappings":"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","names":["ParticipantSignaling","require","RoomSignaling","StateMachine","states","closed","opening","open","closing","__extends","_super","Signaling","key","transition","Promise","resolve","localParticipant","token","encodingParameters","preferredCodecs","options","connect","sid","promise","cancel","bracket","_this","state","_close","Error","self","_open","then","bind","releaseLockCompletely","_connect","module","exports"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/signaling/index.js"],"sourcesContent":["/* eslint consistent-return:0 */\n'use strict';\n\nconst ParticipantSignaling = require('./participant');\nconst RoomSignaling = require('./room');\nconst StateMachine = require('../statemachine');\n\n/*\nSignaling States\n----------------\n\n              +---------+\n              |         |\n              | opening |\n         +--->|         |\n         |    +---------+\n    +--------+   |   |   +------+\n    |        |<--+   +-->|      |\n    | closed |<----------| open |\n    |        |<--+   +-->|      |\n    +--------+   |   |   +------+\n              +---------+   |\n              |         |<--+\n              | closing |\n              |         |\n              +---------+\n\n*/\n\nconst states = {\n  closed: [\n    'opening'\n  ],\n  opening: [\n    'closed',\n    'open'\n  ],\n  open: [\n    'closed',\n    'closing'\n  ],\n  closing: [\n    'closed',\n    'open'\n  ]\n};\n\n/**\n * @extends StateMachine\n * @property {string} state - one of \"closed\", \"opening\", \"open\", or \"closing\"\n */\nclass Signaling extends StateMachine {\n  /**\n   * Construct {@link Signaling}.\n   */\n  constructor() {\n    super('closed', states);\n  }\n\n  /**\n   * @private\n   */\n  // NOTE(mroberts): This is a dummy implementation suitable for testing.\n  _close(key) {\n    this.transition('closing', key);\n    this.transition('closed', key);\n    return Promise.resolve(this);\n  }\n\n  /**\n   * @private\n   */\n  // NOTE(mroberts): This is a dummy implementation suitable for testing.\n  _connect(\n    localParticipant,\n    token,\n    encodingParameters,\n    preferredCodecs,\n    options\n  ) {\n    localParticipant.connect('PA00000000000000000000000000000000', 'test');\n    const sid = 'RM00000000000000000000000000000000';\n    const promise = Promise.resolve(new RoomSignaling(localParticipant, sid, options));\n    promise.cancel = function cancel() {};\n    return promise;\n  }\n\n  /**\n   * @private\n   */\n  // NOTE(mroberts): This is a dummy implementation suitable for testing.\n  _open(key) {\n    this.transition('opening', key);\n    this.transition('open', key);\n    return Promise.resolve(this);\n  }\n\n  /**\n   * Close the {@link Signaling}.\n   * @returns {Promise<this>}\n   */\n  close() {\n    return this.bracket('close', key => {\n      switch (this.state) {\n        case 'closed':\n          return this;\n        case 'open':\n          return this._close(key);\n        default:\n          throw new Error(`Unexpected Signaling state \"${this.state}\"`);\n      }\n    });\n  }\n\n  /**\n   * Connect to a {@link RoomSignaling}.\n   * @param {ParticipantSignaling} localParticipant\n   * @param {string} token\n   * @param {EncodingParametersImpl} encodingParameters\n   * @param {PreferredCodecs} preferredCodecs\n   * @param {object} options\n   * @returns {Promise<function(): CancelablePromise<RoomSignaling>>}\n   */\n  connect(\n    localParticipant,\n    token,\n    encodingParameters,\n    preferredCodecs,\n    options\n  ) {\n    const self = this;\n    return this.bracket('connect', function transition(key) {\n      switch (self.state) {\n        case 'closed':\n          return self._open(key).then(transition.bind(null, key));\n        case 'open':\n          // NOTE(mroberts): We don't need to hold the lock in _connect. Instead,\n          // we just need to ensure the Signaling remains open.\n          self.releaseLockCompletely(key);\n          return self._connect(localParticipant, token, encodingParameters, preferredCodecs, options);\n        default:\n          throw new Error(`Unexpected Signaling state \"${self.state}\"`);\n      }\n    });\n  }\n\n  /**\n   * Create a local {@link ParticipantSignaling}.\n   * @returns {ParticipantSignaling}\n   */\n  createLocalParticipantSignaling() {\n    return new ParticipantSignaling();\n  }\n\n  /**\n   * Open the {@link Signaling}.\n   * @returns {Promise<this>}\n   */\n  open() {\n    return this.bracket('open', key => {\n      switch (this.state) {\n        case 'closed':\n          return this._open(key);\n        case 'open':\n          return this;\n        default:\n          throw new Error(`Unexpected Signaling state \"${this.state}\"`);\n      }\n    });\n  }\n}\n\nmodule.exports = Signaling;\n"]},"metadata":{},"sourceType":"script"}