{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar AudioTrack = require('./audiotrack');\n\nvar mixinRemoteMediaTrack = require('./remotemediatrack');\n\nvar RemoteMediaAudioTrack = mixinRemoteMediaTrack(AudioTrack);\n/**\n * A {@link RemoteAudioTrack} represents an {@link AudioTrack} published to a\n * {@link Room} by a {@link RemoteParticipant}.\n * @extends AudioTrack\n * @property {boolean} isEnabled - Whether the {@link RemoteAudioTrack} is enabled\n * @property {boolean} isSwitchedOff - Whether the {@link RemoteAudioTrack} is switched off\n * @property {Track.SID} sid - The {@link RemoteAudioTrack}'s SID\n * @property {?Track.Priority} priority - The subscribe priority of the {@link RemoteAudioTrack}\n * @emits RemoteAudioTrack#disabled\n * @emits RemoteAudioTrack#enabled\n * @emits RemoteAudioTrack#started\n * @emits RemoteAudioTrack#switchedOff\n * @emits RemoteAudioTrack#switchedOn\n */\n\nvar RemoteAudioTrack =\n/** @class */\nfunction (_super) {\n  __extends(RemoteAudioTrack, _super);\n  /**\n   * Construct a {@link RemoteAudioTrack}.\n   * @param {Track.SID} sid - The {@link RemoteAudioTrack}'s SID\n   * @param {MediaTrackReceiver} mediaTrackReceiver - An audio MediaStreamTrack container\n   * @param {boolean} isEnabled - Whether the {@link RemoteAudioTrack} is enabled\n   * @param {boolean} isSwitchedOff - Whether the {@link RemoteAudioTrack} is switched off\n   * @param {function(?Track.Priority): void} setPriority - Set or clear the subscribe\n   *  {@link Track.Priority} of the {@link RemoteAudioTrack}\n   * @param {function(ClientRenderHint): void} setRenderHint - Set render hints.\n   * @param {{log: Log}} options - The {@link RemoteTrack} options\n   */\n\n\n  function RemoteAudioTrack(sid, mediaTrackReceiver, isEnabled, isSwitchedOff, setPriority, setRenderHint, options) {\n    return _super.call(this, sid, mediaTrackReceiver, isEnabled, isSwitchedOff, setPriority, setRenderHint, options) || this;\n  }\n\n  RemoteAudioTrack.prototype.toString = function () {\n    return \"[RemoteAudioTrack #\" + this._instanceId + \": \" + this.sid + \"]\";\n  };\n  /**\n   * Update the subscribe {@link Track.Priority} of the {@link RemoteAudioTrack}.\n   * @param {?Track.Priority} priority - the new subscribe {@link Track.Priority};\n   *   Currently setPriority has no effect on audio tracks.\n   * @returns {this}\n   * @throws {RangeError}\n   */\n\n\n  RemoteAudioTrack.prototype.setPriority = function (priority) {\n    return _super.prototype.setPriority.call(this, priority);\n  };\n\n  return RemoteAudioTrack;\n}(RemoteMediaAudioTrack);\n/**\n * The {@link RemoteAudioTrack} was disabled, i.e. \"muted\".\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   disabled\n * @event RemoteAudioTrack#disabled\n */\n\n/**\n * The {@link RemoteAudioTrack} was enabled, i.e. \"unmuted\".\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   enabled\n * @event RemoteAudioTrack#enabled\n */\n\n/**\n * The {@link RemoteAudioTrack} started. This means there is enough audio data\n * to begin playback.\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that started\n * @event RemoteAudioTrack#started\n */\n\n/**\n * A {@link RemoteAudioTrack} was switched off.\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   switched off\n * @event RemoteAudioTrack#switchedOff\n */\n\n/**\n * A {@link RemoteAudioTrack} was switched on.\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   switched on\n * @event RemoteAudioTrack#switchedOn\n */\n\n\nmodule.exports = RemoteAudioTrack;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAA1B;;AACA,IAAMC,qBAAqB,GAAGD,OAAO,CAAC,oBAAD,CAArC;;AAEA,IAAME,qBAAqB,GAAGD,qBAAqB,CAACF,UAAD,CAAnD;AAEA;;;;;;;;;;;;;;;AAcA;AAAA;AAAA;EAA+BI;EAC7B;;;;;;;;;;;;;EAWA,0BAAYC,GAAZ,EAAiBC,kBAAjB,EAAqCC,SAArC,EAAgDC,aAAhD,EAA+DC,WAA/D,EAA4EC,aAA5E,EAA2FC,OAA3F,EAAkG;WAChGC,kBAAMP,GAAN,EAAWC,kBAAX,EAA+BC,SAA/B,EAA0CC,aAA1C,EAAyDC,WAAzD,EAAsEC,aAAtE,EAAqFC,OAArF,KAA6F;EAC9F;;EAEDE;IACE,OAAO,wBAAsB,KAAKC,WAA3B,GAAsC,IAAtC,GAA2C,KAAKT,GAAhD,GAAmD,GAA1D;EACD,CAFD;EAIA;;;;;;;;;EAOAQ,mDAAYE,QAAZ,EAAoB;IAClB,OAAOH,iBAAMH,WAAN,CAAiBO,IAAjB,CAAiB,IAAjB,EAAkBD,QAAlB,CAAP;EACD,CAFD;;EAGF;AAAC,CA9BD,CAA+BZ,qBAA/B;AAgCA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;;AAOAc,MAAM,CAACC,OAAP,GAAiBL,gBAAjB","names":["AudioTrack","require","mixinRemoteMediaTrack","RemoteMediaAudioTrack","__extends","sid","mediaTrackReceiver","isEnabled","isSwitchedOff","setPriority","setRenderHint","options","_super","RemoteAudioTrack","_instanceId","priority","call","module","exports"],"sources":["/home/samliu/repos/ieee/tp-robot/node_modules/twilio-video/lib/media/track/remoteaudiotrack.js"],"sourcesContent":["'use strict';\n\nconst AudioTrack = require('./audiotrack');\nconst mixinRemoteMediaTrack = require('./remotemediatrack');\n\nconst RemoteMediaAudioTrack = mixinRemoteMediaTrack(AudioTrack);\n\n/**\n * A {@link RemoteAudioTrack} represents an {@link AudioTrack} published to a\n * {@link Room} by a {@link RemoteParticipant}.\n * @extends AudioTrack\n * @property {boolean} isEnabled - Whether the {@link RemoteAudioTrack} is enabled\n * @property {boolean} isSwitchedOff - Whether the {@link RemoteAudioTrack} is switched off\n * @property {Track.SID} sid - The {@link RemoteAudioTrack}'s SID\n * @property {?Track.Priority} priority - The subscribe priority of the {@link RemoteAudioTrack}\n * @emits RemoteAudioTrack#disabled\n * @emits RemoteAudioTrack#enabled\n * @emits RemoteAudioTrack#started\n * @emits RemoteAudioTrack#switchedOff\n * @emits RemoteAudioTrack#switchedOn\n */\nclass RemoteAudioTrack extends RemoteMediaAudioTrack {\n  /**\n   * Construct a {@link RemoteAudioTrack}.\n   * @param {Track.SID} sid - The {@link RemoteAudioTrack}'s SID\n   * @param {MediaTrackReceiver} mediaTrackReceiver - An audio MediaStreamTrack container\n   * @param {boolean} isEnabled - Whether the {@link RemoteAudioTrack} is enabled\n   * @param {boolean} isSwitchedOff - Whether the {@link RemoteAudioTrack} is switched off\n   * @param {function(?Track.Priority): void} setPriority - Set or clear the subscribe\n   *  {@link Track.Priority} of the {@link RemoteAudioTrack}\n   * @param {function(ClientRenderHint): void} setRenderHint - Set render hints.\n   * @param {{log: Log}} options - The {@link RemoteTrack} options\n   */\n  constructor(sid, mediaTrackReceiver, isEnabled, isSwitchedOff, setPriority, setRenderHint, options) {\n    super(sid, mediaTrackReceiver, isEnabled, isSwitchedOff, setPriority, setRenderHint, options);\n  }\n\n  toString() {\n    return `[RemoteAudioTrack #${this._instanceId}: ${this.sid}]`;\n  }\n\n  /**\n   * Update the subscribe {@link Track.Priority} of the {@link RemoteAudioTrack}.\n   * @param {?Track.Priority} priority - the new subscribe {@link Track.Priority};\n   *   Currently setPriority has no effect on audio tracks.\n   * @returns {this}\n   * @throws {RangeError}\n   */\n  setPriority(priority) {\n    return super.setPriority(priority);\n  }\n}\n\n/**\n * The {@link RemoteAudioTrack} was disabled, i.e. \"muted\".\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   disabled\n * @event RemoteAudioTrack#disabled\n */\n\n/**\n * The {@link RemoteAudioTrack} was enabled, i.e. \"unmuted\".\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   enabled\n * @event RemoteAudioTrack#enabled\n */\n\n/**\n * The {@link RemoteAudioTrack} started. This means there is enough audio data\n * to begin playback.\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that started\n * @event RemoteAudioTrack#started\n */\n\n/**\n * A {@link RemoteAudioTrack} was switched off.\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   switched off\n * @event RemoteAudioTrack#switchedOff\n */\n\n/**\n * A {@link RemoteAudioTrack} was switched on.\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   switched on\n * @event RemoteAudioTrack#switchedOn\n */\n\nmodule.exports = RemoteAudioTrack;\n"]},"metadata":{},"sourceType":"script"}