{"ast":null,"code":"/* eslint-disable no-console */\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar DominantSpeakerSignaling = require('./dominantspeakersignaling');\n\nvar NetworkQualityMonitor = require('./networkqualitymonitor');\n\nvar NetworkQualitySignaling = require('./networkqualitysignaling');\n\nvar RecordingV2 = require('./recording');\n\nvar RoomSignaling = require('../room');\n\nvar RemoteParticipantV2 = require('./remoteparticipant');\n\nvar StatsReport = require('../../stats/statsreport');\n\nvar TrackPrioritySignaling = require('./trackprioritysignaling');\n\nvar TrackSwitchOffSignaling = require('./trackswitchoffsignaling');\n\nvar RenderHintsSignaling = require('./renderhintssignaling');\n\nvar PublisherHintsSignaling = require('./publisherhintsignaling.js');\n\nvar _a = require('../../util'),\n    DEFAULT_SESSION_TIMEOUT_SEC = _a.constants.DEFAULT_SESSION_TIMEOUT_SEC,\n    createBandwidthProfilePayload = _a.createBandwidthProfilePayload,\n    defer = _a.defer,\n    difference = _a.difference,\n    filterObject = _a.filterObject,\n    flatMap = _a.flatMap,\n    oncePerTick = _a.oncePerTick;\n\nvar MovingAverageDelta = require('../../util/movingaveragedelta');\n\nvar createTwilioError = require('../../util/twilio-video-errors').createTwilioError;\n\nvar STATS_PUBLISH_INTERVAL_MS = 10000;\n/**\n * @extends RoomSignaling\n */\n\nvar RoomV2 =\n/** @class */\nfunction (_super) {\n  __extends(RoomV2, _super);\n\n  function RoomV2(localParticipant, initialState, transport, peerConnectionManager, options) {\n    var _this = this;\n\n    initialState.options = Object.assign({\n      session_timeout: DEFAULT_SESSION_TIMEOUT_SEC\n    }, initialState.options);\n    options = Object.assign({\n      DominantSpeakerSignaling: DominantSpeakerSignaling,\n      NetworkQualityMonitor: NetworkQualityMonitor,\n      NetworkQualitySignaling: NetworkQualitySignaling,\n      RecordingSignaling: RecordingV2,\n      RemoteParticipantV2: RemoteParticipantV2,\n      TrackPrioritySignaling: TrackPrioritySignaling,\n      TrackSwitchOffSignaling: TrackSwitchOffSignaling,\n      bandwidthProfile: null,\n      sessionTimeout: initialState.options.session_timeout * 1000,\n      statsPublishIntervalMs: STATS_PUBLISH_INTERVAL_MS\n    }, options);\n    localParticipant.setBandwidthProfile(options.bandwidthProfile);\n    peerConnectionManager.setIceReconnectTimeout(options.sessionTimeout);\n    _this = _super.call(this, localParticipant, initialState.sid, initialState.name, options) || this;\n\n    var getTrackReceiver = function getTrackReceiver(id) {\n      return _this._getTrackReceiver(id);\n    };\n\n    var log = _this._log;\n    Object.defineProperties(_this, {\n      _disconnectedParticipantRevisions: {\n        value: new Map()\n      },\n      _NetworkQualityMonitor: {\n        value: options.NetworkQualityMonitor\n      },\n      _lastBandwidthProfileRevision: {\n        value: localParticipant.bandwidthProfileRevision,\n        writable: true\n      },\n      _mediaStatesWarningsRevision: {\n        value: 0,\n        writable: true\n      },\n      _networkQualityMonitor: {\n        value: null,\n        writable: true\n      },\n      _networkQualityConfiguration: {\n        value: localParticipant.networkQualityConfiguration\n      },\n      _peerConnectionManager: {\n        value: peerConnectionManager\n      },\n      _published: {\n        value: new Map()\n      },\n      _publishedRevision: {\n        value: 0,\n        writable: true\n      },\n      _RemoteParticipantV2: {\n        value: options.RemoteParticipantV2\n      },\n      _subscribed: {\n        value: new Map()\n      },\n      _subscribedRevision: {\n        value: 0,\n        writable: true\n      },\n      _subscriptionFailures: {\n        value: new Map()\n      },\n      _dominantSpeakerSignaling: {\n        value: new options.DominantSpeakerSignaling(getTrackReceiver, {\n          log: log\n        })\n      },\n      _networkQualitySignaling: {\n        value: new options.NetworkQualitySignaling(getTrackReceiver, localParticipant.networkQualityConfiguration, {\n          log: log\n        })\n      },\n      _renderHintsSignaling: {\n        value: new RenderHintsSignaling(getTrackReceiver, {\n          log: log\n        })\n      },\n      _publisherHintsSignaling: {\n        value: new PublisherHintsSignaling(getTrackReceiver, {\n          log: log\n        })\n      },\n      _trackPrioritySignaling: {\n        value: new options.TrackPrioritySignaling(getTrackReceiver, {\n          log: log\n        })\n      },\n      _trackSwitchOffSignaling: {\n        value: new options.TrackSwitchOffSignaling(getTrackReceiver, {\n          log: log\n        })\n      },\n      _pendingSwitchOffStates: {\n        value: new Map()\n      },\n      _transport: {\n        value: transport\n      },\n      _trackReceiverDeferreds: {\n        value: new Map()\n      },\n      mediaRegion: {\n        enumerable: true,\n        value: initialState.options.media_region || null\n      }\n    });\n\n    _this._initTrackSwitchOffSignaling();\n\n    _this._initDominantSpeakerSignaling();\n\n    _this._initNetworkQualityMonitorSignaling();\n\n    _this._initPublisherHintSignaling();\n\n    handleLocalParticipantEvents(_this, localParticipant);\n    handlePeerConnectionEvents(_this, peerConnectionManager);\n    handleTransportEvents(_this, transport);\n    periodicallyPublishStats(_this, transport, options.statsPublishIntervalMs);\n\n    _this._update(initialState); // NOTE(mpatwardhan) after initial state we know if publisher_hints are enabled or not\n    // if they are not enabled. we need to undo simulcast that if it was enabled with initial offer.\n\n\n    _this._peerConnectionManager.setEffectiveAdaptiveSimulcast(_this._publisherHintsSignaling.isSetup);\n\n    return _this;\n  }\n\n  Object.defineProperty(RoomV2.prototype, \"connectionState\", {\n    /**\n     * The PeerConnection state.\n     * @property {RTCPeerConnectionState}\n     */\n    get: function get() {\n      return this._peerConnectionManager.connectionState;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RoomV2.prototype, \"signalingConnectionState\", {\n    /**\n     * The Signaling Connection State.\n     * @property {string} - \"connected\", \"reconnecting\", \"disconnected\"\n     */\n    get: function get() {\n      return this._transport.state === 'syncing' ? 'reconnecting' : this._transport.state;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RoomV2.prototype, \"iceConnectionState\", {\n    /**\n     * The Ice Connection State.\n     * @property {RTCIceConnectionState}\n     */\n    get: function get() {\n      return this._peerConnectionManager.iceConnectionState;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @private\n   */\n\n  RoomV2.prototype._deleteTrackReceiverDeferred = function (id) {\n    return this._trackReceiverDeferreds.delete(id);\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._getOrCreateTrackReceiverDeferred = function (id) {\n    var deferred = this._trackReceiverDeferreds.get(id) || defer();\n\n    var trackReceivers = this._peerConnectionManager.getTrackReceivers(); // NOTE(mmalavalli): In Firefox, there can be instances where a MediaStreamTrack\n    // for the given Track ID already exists, for example, when a Track is removed\n    // and added back. If that is the case, then we should resolve 'deferred'.\n\n\n    var trackReceiver = trackReceivers.find(function (trackReceiver) {\n      return trackReceiver.id === id && trackReceiver.readyState !== 'ended';\n    });\n\n    if (trackReceiver) {\n      deferred.resolve(trackReceiver);\n    } else {\n      // NOTE(mmalavalli): Only add the 'deferred' to the map if it's not\n      // resolved. This will prevent old copies of the MediaStreamTrack from\n      // being used when the remote peer removes and re-adds a MediaStreamTrack.\n      this._trackReceiverDeferreds.set(id, deferred);\n    }\n\n    return deferred;\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._addTrackReceiver = function (trackReceiver) {\n    var deferred = this._getOrCreateTrackReceiverDeferred(trackReceiver.id);\n\n    deferred.resolve(trackReceiver);\n    return this;\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._disconnect = function (error) {\n    var didDisconnect = _super.prototype._disconnect.call(this, error);\n\n    if (didDisconnect) {\n      this._teardownNetworkQualityMonitor();\n\n      this._transport.disconnect();\n\n      this._peerConnectionManager.close();\n    }\n\n    this.localParticipant.tracks.forEach(function (track) {\n      track.publishFailed(error || new Error('LocalParticipant disconnected'));\n    });\n    return didDisconnect;\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._getTrackReceiver = function (id) {\n    var _this = this;\n\n    return this._getOrCreateTrackReceiverDeferred(id).promise.then(function (trackReceiver) {\n      _this._deleteTrackReceiverDeferred(id);\n\n      return trackReceiver;\n    });\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._getInitialTrackSwitchOffState = function (trackSid) {\n    var initiallySwitchedOff = this._pendingSwitchOffStates.get(trackSid) || false;\n\n    this._pendingSwitchOffStates.delete(trackSid);\n\n    if (initiallySwitchedOff) {\n      this._log.warn(\"[\" + trackSid + \"] was initially switched off! \");\n    }\n\n    return initiallySwitchedOff;\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._getTrackSidsToTrackSignalings = function () {\n    var trackSidsToTrackSignalings = flatMap(this.participants, function (participant) {\n      return Array.from(participant.tracks);\n    });\n    return new Map(trackSidsToTrackSignalings);\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._getOrCreateRemoteParticipant = function (participantState) {\n    var _this = this;\n\n    var RemoteParticipantV2 = this._RemoteParticipantV2;\n    var participant = this.participants.get(participantState.sid);\n    var self = this;\n\n    if (!participant) {\n      participant = new RemoteParticipantV2(participantState, function (trackSid) {\n        return _this._getInitialTrackSwitchOffState(trackSid);\n      }, function (trackSid, priority) {\n        return _this._trackPrioritySignaling.sendTrackPriorityUpdate(trackSid, 'subscribe', priority);\n      }, function (trackSid, hint) {\n        return _this._renderHintsSignaling.setTrackHint(trackSid, hint);\n      }, function (trackSid) {\n        return _this._renderHintsSignaling.clearTrackHint(trackSid);\n      });\n      participant.on('stateChanged', function stateChanged(state) {\n        if (state === 'disconnected') {\n          participant.removeListener('stateChanged', stateChanged);\n          self.participants.delete(participant.sid);\n\n          self._disconnectedParticipantRevisions.set(participant.sid, participant.revision);\n        }\n      });\n      this.connectParticipant(participant);\n    }\n\n    return participant;\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._getState = function () {\n    return {\n      participant: this.localParticipant.getState()\n    };\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._maybeAddBandwidthProfile = function (update) {\n    var _a = this.localParticipant,\n        bandwidthProfile = _a.bandwidthProfile,\n        bandwidthProfileRevision = _a.bandwidthProfileRevision;\n\n    if (bandwidthProfile && this._lastBandwidthProfileRevision < bandwidthProfileRevision) {\n      this._lastBandwidthProfileRevision = bandwidthProfileRevision;\n      return Object.assign({\n        bandwidth_profile: createBandwidthProfilePayload(bandwidthProfile)\n      }, update);\n    }\n\n    return update;\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._publishNewLocalParticipantState = function () {\n    this._transport.publish(this._maybeAddBandwidthProfile(this._getState()));\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._publishPeerConnectionState = function (peerConnectionState) {\n    /* eslint camelcase:0 */\n    this._transport.publish(Object.assign({\n      peer_connections: [peerConnectionState]\n    }, this._getState()));\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._update = function (roomState) {\n    var _this = this;\n\n    if (roomState.subscribed && roomState.subscribed.revision > this._subscribedRevision) {\n      this._subscribedRevision = roomState.subscribed.revision;\n      roomState.subscribed.tracks.forEach(function (trackState) {\n        if (trackState.id) {\n          _this._subscriptionFailures.delete(trackState.sid);\n\n          _this._subscribed.set(trackState.sid, trackState.id);\n        } else if (trackState.error && !_this._subscriptionFailures.has(trackState.sid)) {\n          _this._subscriptionFailures.set(trackState.sid, trackState.error);\n        }\n      });\n      var subscribedTrackSids_1 = new Set(roomState.subscribed.tracks.filter(function (trackState) {\n        return !!trackState.id;\n      }).map(function (trackState) {\n        return trackState.sid;\n      }));\n\n      this._subscribed.forEach(function (trackId, trackSid) {\n        if (!subscribedTrackSids_1.has(trackSid)) {\n          _this._subscribed.delete(trackSid);\n        }\n      });\n    }\n\n    var participantsToKeep = new Set(); // eslint-disable-next-line no-warning-comments\n    // TODO(mroberts): Remove me once the Server is fixed.\n\n    (roomState.participants || []).forEach(function (participantState) {\n      if (participantState.sid === _this.localParticipant.sid) {\n        return;\n      } // NOTE(mmalavalli): If the incoming revision for a disconnected Participant is less than or\n      // equal to the revision when it was disconnected, then the state is old and can be ignored.\n      // Otherwise, the Participant was most likely disconnected in a Large Group Room when it\n      // stopped publishing media, and hence needs to be re-added.\n\n\n      var disconnectedParticipantRevision = _this._disconnectedParticipantRevisions.get(participantState.sid);\n\n      if (disconnectedParticipantRevision && participantState.revision <= disconnectedParticipantRevision) {\n        return;\n      }\n\n      if (disconnectedParticipantRevision) {\n        _this._disconnectedParticipantRevisions.delete(participantState.sid);\n      }\n\n      var participant = _this._getOrCreateRemoteParticipant(participantState);\n\n      participant.update(participantState);\n      participantsToKeep.add(participant);\n    });\n\n    if (roomState.type === 'synced') {\n      this.participants.forEach(function (participant) {\n        if (!participantsToKeep.has(participant)) {\n          participant.disconnect();\n        }\n      });\n    }\n\n    handleSubscriptions(this); // eslint-disable-next-line no-warning-comments\n    // TODO(mroberts): Remove me once the Server is fixed.\n\n    /* eslint camelcase:0 */\n\n    if (roomState.peer_connections) {\n      this._peerConnectionManager.update(roomState.peer_connections, roomState.type === 'synced');\n    }\n\n    if (roomState.recording) {\n      this.recording.update(roomState.recording);\n    }\n\n    if (roomState.published && roomState.published.revision > this._publishedRevision) {\n      this._publishedRevision = roomState.published.revision;\n      roomState.published.tracks.forEach(function (track) {\n        if (track.sid) {\n          _this._published.set(track.id, track.sid);\n        }\n      });\n      this.localParticipant.update(roomState.published);\n    }\n\n    if (roomState.participant) {\n      this.localParticipant.connect(roomState.participant.sid, roomState.participant.identity);\n    }\n\n    [this._dominantSpeakerSignaling, this._networkQualitySignaling, this._trackPrioritySignaling, this._trackSwitchOffSignaling, this._renderHintsSignaling, this._publisherHintsSignaling].forEach(function (mediaSignaling) {\n      var channel = mediaSignaling.channel;\n\n      if (!mediaSignaling.isSetup && roomState.media_signaling && roomState.media_signaling[channel] && roomState.media_signaling[channel].transport && roomState.media_signaling[channel].transport.type === 'data-channel') {\n        mediaSignaling.setup(roomState.media_signaling[channel].transport.label);\n      }\n    });\n\n    if (roomState.type === 'warning' && roomState.states && roomState.states.revision > this._mediaStatesWarningsRevision) {\n      this._mediaStatesWarningsRevision = roomState.states.revision;\n      this.localParticipant.updateMediaStates(roomState.states);\n    }\n\n    return this;\n  };\n\n  RoomV2.prototype._initPublisherHintSignaling = function () {\n    var _this = this;\n\n    this._publisherHintsSignaling.on('updated', function (hints, id) {\n      Promise.all(hints.map(function (hint) {\n        return _this.localParticipant.setPublisherHint(hint.track, hint.encodings).then(function (result) {\n          return {\n            track: hint.track,\n            result: result\n          };\n        });\n      })).then(function (hintResponses) {\n        _this._publisherHintsSignaling.sendHintResponse({\n          id: id,\n          hints: hintResponses\n        });\n      });\n    });\n\n    var handleReplaced = function handleReplaced(track) {\n      if (track.kind === 'video') {\n        track.trackTransceiver.on('replaced', function () {\n          _this._publisherHintsSignaling.sendTrackReplaced({\n            trackSid: track.sid\n          });\n        });\n      }\n    }; // hook up for any existing and new tracks getting replaced.\n\n\n    Array.from(this.localParticipant.tracks.values()).forEach(function (track) {\n      return handleReplaced(track);\n    });\n    this.localParticipant.on('trackAdded', function (track) {\n      return handleReplaced(track);\n    });\n  };\n\n  RoomV2.prototype._initTrackSwitchOffSignaling = function () {\n    var _this = this;\n\n    this._trackSwitchOffSignaling.on('updated', function (tracksOff, tracksOn) {\n      try {\n        _this._log.debug('received trackSwitch: ', {\n          tracksOn: tracksOn,\n          tracksOff: tracksOff\n        });\n\n        var trackUpdates_1 = new Map();\n        tracksOn.forEach(function (trackSid) {\n          return trackUpdates_1.set(trackSid, true);\n        });\n        tracksOff.forEach(function (trackSid) {\n          if (trackUpdates_1.get(trackSid)) {\n            // NOTE(mpatwardhan): This means that VIDEO-3762 has been reproduced.\n            _this._log.warn(trackSid + \" is DUPLICATED in both tracksOff and tracksOn list\");\n          }\n\n          trackUpdates_1.set(trackSid, false);\n        });\n\n        _this.participants.forEach(function (participant) {\n          participant.tracks.forEach(function (track) {\n            var isOn = trackUpdates_1.get(track.sid);\n\n            if (typeof isOn !== 'undefined') {\n              track.setSwitchedOff(!isOn);\n              trackUpdates_1.delete(track.sid);\n            }\n          });\n        }); // NOTE(mpatwardhan): Cache any notification about the tracks that we do not yet know about.\n\n\n        trackUpdates_1.forEach(function (isOn, trackSid) {\n          return _this._pendingSwitchOffStates.set(trackSid, !isOn);\n        });\n      } catch (ex) {\n        _this._log.error('error processing track switch off:', ex);\n      }\n    });\n  };\n\n  RoomV2.prototype._initDominantSpeakerSignaling = function () {\n    var _this = this;\n\n    this._dominantSpeakerSignaling.on('updated', function () {\n      return _this.setDominantSpeaker(_this._dominantSpeakerSignaling.loudestParticipantSid);\n    });\n  };\n\n  RoomV2.prototype._initNetworkQualityMonitorSignaling = function () {\n    var _this = this;\n\n    this._networkQualitySignaling.on('ready', function () {\n      var networkQualityMonitor = new _this._NetworkQualityMonitor(_this._peerConnectionManager, _this._networkQualitySignaling);\n      _this._networkQualityMonitor = networkQualityMonitor;\n      networkQualityMonitor.on('updated', function () {\n        if (_this.iceConnectionState === 'failed') {\n          return;\n        }\n\n        _this.localParticipant.setNetworkQualityLevel(networkQualityMonitor.level, networkQualityMonitor.levels);\n\n        _this.participants.forEach(function (participant) {\n          var levels = networkQualityMonitor.remoteLevels.get(participant.sid);\n\n          if (levels) {\n            participant.setNetworkQualityLevel(levels.level, levels);\n          }\n        });\n      });\n      networkQualityMonitor.start();\n    });\n\n    this._networkQualitySignaling.on('teardown', function () {\n      return _this._teardownNetworkQualityMonitor();\n    });\n  };\n\n  RoomV2.prototype._teardownNetworkQualityMonitor = function () {\n    if (this._networkQualityMonitor) {\n      this._networkQualityMonitor.stop();\n\n      this._networkQualityMonitor = null;\n    }\n  };\n  /**\n   * Get the {@link RoomV2}'s media statistics.\n   * @returns {Promise.<Map<PeerConnectionV2#id, StandardizedStatsResponse>>}\n   */\n\n\n  RoomV2.prototype.getStats = function () {\n    var _this = this;\n\n    return this._peerConnectionManager.getStats().then(function (responses) {\n      return new Map(Array.from(responses).map(function (_a) {\n        var _b = __read(_a, 2),\n            id = _b[0],\n            response = _b[1];\n\n        return [id, Object.assign({}, response, {\n          localAudioTrackStats: filterAndAddLocalTrackSids(_this, response.localAudioTrackStats),\n          localVideoTrackStats: filterAndAddLocalTrackSids(_this, response.localVideoTrackStats),\n          remoteAudioTrackStats: filterAndAddRemoteTrackSids(_this, response.remoteAudioTrackStats),\n          remoteVideoTrackStats: filterAndAddRemoteTrackSids(_this, response.remoteVideoTrackStats)\n        })];\n      }));\n    });\n  };\n\n  return RoomV2;\n}(RoomSignaling);\n/**\n * Filter out {@link TrackStats} that aren't in the collection while also\n * stamping their Track SIDs.\n * @param {Map<ID, SID>} idToSid\n * @param {Array<TrackStats>} trackStats\n * @returns {Array<TrackStats>}\n */\n\n\nfunction filterAndAddTrackSids(idToSid, trackStats) {\n  return trackStats.reduce(function (trackStats, trackStat) {\n    var trackSid = idToSid.get(trackStat.trackId);\n    return trackSid ? [Object.assign({}, trackStat, {\n      trackSid: trackSid\n    })].concat(trackStats) : trackStats;\n  }, []);\n}\n/**\n * Filter out {@link LocalTrackStats} that aren't currently published while also\n * stamping their Track SIDs.\n * @param {RoomV2} roomV2\n * @param {Array<LocalTrackStats>} localTrackStats\n * @returns {Array<LocalTrackStats>}\n */\n\n\nfunction filterAndAddLocalTrackSids(roomV2, localTrackStats) {\n  return filterAndAddTrackSids(roomV2._published, localTrackStats);\n}\n/**\n * Filter out {@link RemoteTrackStats} that aren't currently subscribed while\n * also stamping their Track SIDs.\n * @param {RoomV2} roomV2\n * @param {Array<RemoteTrackStats>} remoteTrackStats\n * @returns {Array<RemoteTrackStats>}\n */\n\n\nfunction filterAndAddRemoteTrackSids(roomV2, remoteTrackStats) {\n  var idToSid = new Map(Array.from(roomV2._subscribed.entries()).map(function (_a) {\n    var _b = __read(_a, 2),\n        sid = _b[0],\n        id = _b[1];\n\n    return [id, sid];\n  }));\n  return filterAndAddTrackSids(idToSid, remoteTrackStats);\n}\n/**\n * @typedef {object} RoomV2#Representation\n * @property {string} name\n * @property {LocalParticipantV2#Representation} participant\n * @property {?Array<RemoteParticipantV2#Representation>} participants\n * @property {?Array<PeerConnectionV2#Representation>} peer_connections\n * @property {?RecordingV2#Representation} recording\n * @property {string} sid\n */\n\n\nfunction handleLocalParticipantEvents(roomV2, localParticipant) {\n  var localParticipantUpdated = oncePerTick(function () {\n    roomV2._publishNewLocalParticipantState();\n  });\n  var renegotiate = oncePerTick(function () {\n    var trackSenders = flatMap(localParticipant.tracks, function (trackV2) {\n      return trackV2.trackTransceiver;\n    });\n\n    roomV2._peerConnectionManager.setTrackSenders(trackSenders);\n  });\n  localParticipant.on('trackAdded', renegotiate);\n  localParticipant.on('trackRemoved', renegotiate);\n  localParticipant.on('updated', localParticipantUpdated);\n  roomV2.on('stateChanged', function stateChanged(state) {\n    if (state === 'disconnected') {\n      localParticipant.removeListener('trackAdded', renegotiate);\n      localParticipant.removeListener('trackRemoved', renegotiate);\n      localParticipant.removeListener('updated', localParticipantUpdated);\n      roomV2.removeListener('stateChanged', stateChanged);\n      localParticipant.disconnect();\n    }\n  });\n  roomV2.on('signalingConnectionStateChanged', function () {\n    var localParticipant = roomV2.localParticipant,\n        signalingConnectionState = roomV2.signalingConnectionState;\n    var identity = localParticipant.identity,\n        sid = localParticipant.sid;\n\n    switch (signalingConnectionState) {\n      case 'connected':\n        localParticipant.connect(sid, identity);\n        break;\n\n      case 'reconnecting':\n        localParticipant.reconnecting();\n        break;\n    }\n  });\n}\n\nfunction handlePeerConnectionEvents(roomV2, peerConnectionManager) {\n  peerConnectionManager.on('description', function onDescription(description) {\n    roomV2._publishPeerConnectionState(description);\n  });\n  peerConnectionManager.dequeue('description');\n  peerConnectionManager.on('candidates', function onCandidates(candidates) {\n    roomV2._publishPeerConnectionState(candidates);\n  });\n  peerConnectionManager.dequeue('candidates');\n  peerConnectionManager.on('trackAdded', roomV2._addTrackReceiver.bind(roomV2));\n  peerConnectionManager.dequeue('trackAdded');\n  peerConnectionManager.getTrackReceivers().forEach(roomV2._addTrackReceiver, roomV2);\n  peerConnectionManager.on('connectionStateChanged', function () {\n    roomV2.emit('connectionStateChanged');\n  });\n  peerConnectionManager.on('iceConnectionStateChanged', function () {\n    roomV2.emit('iceConnectionStateChanged');\n\n    if (roomV2.iceConnectionState === 'failed') {\n      if (roomV2.localParticipant.networkQualityLevel !== null) {\n        roomV2.localParticipant.setNetworkQualityLevel(0);\n      }\n\n      roomV2.participants.forEach(function (participant) {\n        if (participant.networkQualityLevel !== null) {\n          participant.setNetworkQualityLevel(0);\n        }\n      });\n    }\n  });\n}\n\nfunction handleTransportEvents(roomV2, transport) {\n  transport.on('message', roomV2._update.bind(roomV2));\n  transport.on('stateChanged', function stateChanged(state, error) {\n    if (state === 'disconnected') {\n      if (roomV2.state !== 'disconnected') {\n        roomV2._disconnect(error);\n      }\n\n      transport.removeListener('stateChanged', stateChanged);\n    }\n\n    roomV2.emit('signalingConnectionStateChanged');\n  });\n}\n/**\n * Periodically publish {@link StatsReport}s.\n * @private\n * @param {RoomV2} roomV2\n * @param {Transport} transport\n * @param {Number} intervalMs\n */\n\n\nfunction periodicallyPublishStats(roomV2, transport, intervalMs) {\n  var movingAverageDeltas = new Map();\n  var oddPublishCount = false;\n  var interval = setInterval(function () {\n    roomV2.getStats().then(function (stats) {\n      oddPublishCount = !oddPublishCount;\n      stats.forEach(function (response, id) {\n        // NOTE(mmalavalli): A StatsReport is used to publish a \"stats-report\"\n        // event instead of using StandardizedStatsResponse directly because\n        // StatsReport will add zeros to properties that do not exist.\n        var report = new StatsReport(id, response, true\n        /* prepareForInsights */\n        ); // NOTE(mmalavalli): Since A/V sync metrics are not part of the StatsReport class,\n        // we add them to the insights payload here.\n\n        transport.publishEvent('quality', 'stats-report', 'info', {\n          audioTrackStats: report.remoteAudioTrackStats.map(function (trackStat, i) {\n            return addAVSyncMetricsToRemoteTrackStats(trackStat, response.remoteAudioTrackStats[i], movingAverageDeltas);\n          }),\n          localAudioTrackStats: report.localAudioTrackStats.map(function (trackStat, i) {\n            return addAVSyncMetricsToLocalTrackStats(trackStat, response.localAudioTrackStats[i], movingAverageDeltas);\n          }),\n          localVideoTrackStats: report.localVideoTrackStats.map(function (trackStat, i) {\n            return addAVSyncMetricsToLocalTrackStats(trackStat, response.localVideoTrackStats[i], movingAverageDeltas);\n          }),\n          peerConnectionId: report.peerConnectionId,\n          videoTrackStats: report.remoteVideoTrackStats.map(function (trackStat, i) {\n            return addAVSyncMetricsToRemoteTrackStats(trackStat, response.remoteVideoTrackStats[i], movingAverageDeltas);\n          })\n        }); // NOTE(mmalavalli): Clean up entries for Tracks that are no longer published or subscribed to.\n\n        var keys = flatMap(['localAudioTrackStats', 'localVideoTrackStats', 'remoteAudioTrackStats', 'remoteVideoTrackStats'], function (prop) {\n          return report[prop].map(function (_a) {\n            var ssrc = _a.ssrc,\n                trackSid = _a.trackSid;\n            return trackSid + \"+\" + ssrc;\n          });\n        });\n        var movingAverageDeltaKeysToBeRemoved = difference(Array.from(movingAverageDeltas.keys()), keys);\n        movingAverageDeltaKeysToBeRemoved.forEach(function (key) {\n          return movingAverageDeltas.delete(key);\n        });\n\n        if (oddPublishCount) {\n          // NOTE(mmalavalli): null properties of the \"active-ice-candidate-pair\"\n          // payload are assigned default values until the Insights gateway\n          // accepts null values.\n          var activeIceCandidatePair = replaceNullsWithDefaults(response.activeIceCandidatePair, report.peerConnectionId);\n          transport.publishEvent('quality', 'active-ice-candidate-pair', 'info', activeIceCandidatePair);\n        }\n      });\n    }, function () {// Do nothing.\n    });\n  }, intervalMs);\n  roomV2.on('stateChanged', function onStateChanged(state) {\n    if (state === 'disconnected') {\n      clearInterval(interval);\n      roomV2.removeListener('stateChanged', onStateChanged);\n    }\n  });\n}\n\nfunction handleSubscriptions(room) {\n  var trackSidsToTrackSignalings = room._getTrackSidsToTrackSignalings();\n\n  room._subscriptionFailures.forEach(function (error, trackSid) {\n    var trackSignaling = trackSidsToTrackSignalings.get(trackSid);\n\n    if (trackSignaling) {\n      room._subscriptionFailures.delete(trackSid);\n\n      trackSignaling.subscribeFailed(createTwilioError(error.code, error.message));\n    }\n  });\n\n  trackSidsToTrackSignalings.forEach(function (trackSignaling) {\n    var trackId = room._subscribed.get(trackSignaling.sid);\n\n    if (!trackId || trackSignaling.isSubscribed && trackSignaling.trackTransceiver.id !== trackId) {\n      trackSignaling.setTrackTransceiver(null);\n    }\n\n    if (trackId) {\n      room._getTrackReceiver(trackId).then(function (trackReceiver) {\n        return trackSignaling.setTrackTransceiver(trackReceiver);\n      });\n    }\n  });\n}\n/**\n * NOTE(mmalavalli): Since A/V sync metrics are not part of the public StatsReport class, we add them\n * only for reporting purposes.\n * @private\n */\n\n\nfunction addAVSyncMetricsToLocalTrackStats(trackStats, trackResponse, movingAverageDeltas) {\n  var framesEncoded = trackResponse.framesEncoded,\n      packetsSent = trackResponse.packetsSent,\n      totalEncodeTime = trackResponse.totalEncodeTime,\n      totalPacketSendDelay = trackResponse.totalPacketSendDelay;\n  var augmentedTrackStats = Object.assign({}, trackStats);\n  var key = trackStats.trackSid + \"+\" + trackStats.ssrc;\n  var trackMovingAverageDeltas = movingAverageDeltas.get(key) || new Map();\n\n  if (typeof totalEncodeTime === 'number' && typeof framesEncoded === 'number') {\n    var trackAvgEncodeDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgEncodeDelay') || new MovingAverageDelta();\n    trackAvgEncodeDelayMovingAverageDelta.putSample(totalEncodeTime * 1000, framesEncoded);\n    augmentedTrackStats.avgEncodeDelay = Math.round(trackAvgEncodeDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgEncodeDelay', trackAvgEncodeDelayMovingAverageDelta);\n  }\n\n  if (typeof totalPacketSendDelay === 'number' && typeof packetsSent === 'number') {\n    var trackAvgPacketSendDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgPacketSendDelay') || new MovingAverageDelta();\n    trackAvgPacketSendDelayMovingAverageDelta.putSample(totalPacketSendDelay * 1000, packetsSent);\n    augmentedTrackStats.avgPacketSendDelay = Math.round(trackAvgPacketSendDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgPacketSendDelay', trackAvgPacketSendDelayMovingAverageDelta);\n  }\n\n  movingAverageDeltas.set(key, trackMovingAverageDeltas);\n  return augmentedTrackStats;\n}\n/**\n * NOTE(mmalavalli): Since A/V sync metrics are not part of the public StatsReport class, we add them\n * only for reporting purposes.\n * @private\n */\n\n\nfunction addAVSyncMetricsToRemoteTrackStats(trackStats, trackResponse, movingAverageDeltas) {\n  var estimatedPlayoutTimestamp = trackResponse.estimatedPlayoutTimestamp,\n      framesDecoded = trackResponse.framesDecoded,\n      jitterBufferDelay = trackResponse.jitterBufferDelay,\n      jitterBufferEmittedCount = trackResponse.jitterBufferEmittedCount,\n      totalDecodeTime = trackResponse.totalDecodeTime;\n  var augmentedTrackStats = Object.assign({}, trackStats);\n  var key = trackStats.trackSid + \"+\" + trackStats.ssrc;\n  var trackMovingAverageDeltas = movingAverageDeltas.get(key) || new Map();\n\n  if (typeof estimatedPlayoutTimestamp === 'number') {\n    augmentedTrackStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n  }\n\n  if (typeof framesDecoded === 'number' && typeof totalDecodeTime === 'number') {\n    var trackAvgDecodeDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgDecodeDelay') || new MovingAverageDelta();\n    trackAvgDecodeDelayMovingAverageDelta.putSample(totalDecodeTime * 1000, framesDecoded);\n    augmentedTrackStats.avgDecodeDelay = Math.round(trackAvgDecodeDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgDecodeDelay', trackAvgDecodeDelayMovingAverageDelta);\n  }\n\n  if (typeof jitterBufferDelay === 'number' && typeof jitterBufferEmittedCount === 'number') {\n    var trackAvgJitterBufferDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgJitterBufferDelay') || new MovingAverageDelta();\n    trackAvgJitterBufferDelayMovingAverageDelta.putSample(jitterBufferDelay * 1000, jitterBufferEmittedCount);\n    augmentedTrackStats.avgJitterBufferDelay = Math.round(trackAvgJitterBufferDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgJitterBufferDelay', trackAvgJitterBufferDelayMovingAverageDelta);\n  }\n\n  movingAverageDeltas.set(key, trackMovingAverageDeltas);\n  return augmentedTrackStats;\n}\n\nfunction replaceNullsWithDefaults(activeIceCandidatePair, peerConnectionId) {\n  activeIceCandidatePair = Object.assign({\n    availableIncomingBitrate: 0,\n    availableOutgoingBitrate: 0,\n    bytesReceived: 0,\n    bytesSent: 0,\n    consentRequestsSent: 0,\n    currentRoundTripTime: 0,\n    lastPacketReceivedTimestamp: 0,\n    lastPacketSentTimestamp: 0,\n    nominated: false,\n    peerConnectionId: peerConnectionId,\n    priority: 0,\n    readable: false,\n    requestsReceived: 0,\n    requestsSent: 0,\n    responsesReceived: 0,\n    responsesSent: 0,\n    retransmissionsReceived: 0,\n    retransmissionsSent: 0,\n    state: 'failed',\n    totalRoundTripTime: 0,\n    transportId: '',\n    writable: false\n  }, filterObject(activeIceCandidatePair || {}, null));\n  activeIceCandidatePair.localCandidate = Object.assign({\n    candidateType: 'host',\n    deleted: false,\n    ip: '',\n    port: 0,\n    priority: 0,\n    protocol: 'udp',\n    url: ''\n  }, filterObject(activeIceCandidatePair.localCandidate || {}, null));\n  activeIceCandidatePair.remoteCandidate = Object.assign({\n    candidateType: 'host',\n    ip: '',\n    port: 0,\n    priority: 0,\n    protocol: 'udp',\n    url: ''\n  }, filterObject(activeIceCandidatePair.remoteCandidate || {}, null));\n  return activeIceCandidatePair;\n}\n\nmodule.exports = RoomV2;","map":{"version":3,"mappings":"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","names":["DominantSpeakerSignaling","require","NetworkQualityMonitor","NetworkQualitySignaling","RecordingV2","RoomSignaling","RemoteParticipantV2","StatsReport","TrackPrioritySignaling","TrackSwitchOffSignaling","RenderHintsSignaling","PublisherHintsSignaling","DEFAULT_SESSION_TIMEOUT_SEC","createBandwidthProfilePayload","defer","difference","filterObject","flatMap","oncePerTick","MovingAverageDelta","createTwilioError","STATS_PUBLISH_INTERVAL_MS","__extends","localParticipant","initialState","transport","peerConnectionManager","options","Object","assign","session_timeout","RecordingSignaling","bandwidthProfile","sessionTimeout","statsPublishIntervalMs","setBandwidthProfile","setIceReconnectTimeout","_this","sid","name","getTrackReceiver","_getTrackReceiver","id","log","_log","defineProperties","_disconnectedParticipantRevisions","value","Map","_NetworkQualityMonitor","_lastBandwidthProfileRevision","bandwidthProfileRevision","writable","_mediaStatesWarningsRevision","_networkQualityMonitor","_networkQualityConfiguration","networkQualityConfiguration","_peerConnectionManager","_published","_publishedRevision","_RemoteParticipantV2","_subscribed","_subscribedRevision","_subscriptionFailures","_dominantSpeakerSignaling","_networkQualitySignaling","_renderHintsSignaling","_publisherHintsSignaling","_trackPrioritySignaling","_trackSwitchOffSignaling","_pendingSwitchOffStates","_transport","_trackReceiverDeferreds","mediaRegion","enumerable","media_region","_initTrackSwitchOffSignaling","_initDominantSpeakerSignaling","_initNetworkQualityMonitorSignaling","_initPublisherHintSignaling","handleLocalParticipantEvents","handlePeerConnectionEvents","handleTransportEvents","periodicallyPublishStats","_update","setEffectiveAdaptiveSimulcast","isSetup","RoomV2","connectionState","state","iceConnectionState","delete","deferred","get","trackReceivers","getTrackReceivers","trackReceiver","find","readyState","resolve","set","_getOrCreateTrackReceiverDeferred","error","didDisconnect","_super","_disconnect","call","_teardownNetworkQualityMonitor","disconnect","close","tracks","forEach","track","publishFailed","Error","promise","then","_deleteTrackReceiverDeferred","trackSid","initiallySwitchedOff","warn","trackSidsToTrackSignalings","participants","from","participant","participantState","self","_getInitialTrackSwitchOffState","priority","sendTrackPriorityUpdate","hint","setTrackHint","clearTrackHint","on","stateChanged","removeListener","revision","connectParticipant","getState","update","bandwidth_profile","publish","_maybeAddBandwidthProfile","_getState","peerConnectionState","peer_connections","roomState","subscribed","trackState","has","subscribedTrackSids_1","Set","filter","map","trackId","participantsToKeep","disconnectedParticipantRevision","_getOrCreateRemoteParticipant","add","type","handleSubscriptions","recording","published","connect","identity","channel","mediaSignaling","media_signaling","setup","label","states","updateMediaStates","hints","Promise","all","setPublisherHint","encodings","result","sendHintResponse","hintResponses","handleReplaced","kind","trackTransceiver","sendTrackReplaced","Array","values","tracksOff","tracksOn","debug","trackUpdates_1","isOn","setSwitchedOff","ex","setDominantSpeaker","loudestParticipantSid","networkQualityMonitor","setNetworkQualityLevel","level","levels","remoteLevels","start","stop","getStats","responses","_a","_b","response","localAudioTrackStats","filterAndAddLocalTrackSids","localVideoTrackStats","remoteAudioTrackStats","filterAndAddRemoteTrackSids","remoteVideoTrackStats","filterAndAddTrackSids","idToSid","trackStats","reduce","trackStat","concat","roomV2","localTrackStats","remoteTrackStats","entries","localParticipantUpdated","_publishNewLocalParticipantState","renegotiate","trackSenders","setTrackSenders","signalingConnectionState","reconnecting","onDescription","description","_publishPeerConnectionState","dequeue","onCandidates","candidates","_addTrackReceiver","bind","emit","networkQualityLevel","intervalMs","movingAverageDeltas","oddPublishCount","interval","setInterval","stats","report","publishEvent","audioTrackStats","i","peerConnectionId","videoTrackStats","keys","prop","ssrc","movingAverageDeltaKeysToBeRemoved","key","activeIceCandidatePair","replaceNullsWithDefaults","onStateChanged","clearInterval","room","_getTrackSidsToTrackSignalings","trackSignaling","subscribeFailed","code","message","isSubscribed","setTrackTransceiver","addAVSyncMetricsToLocalTrackStats","trackResponse","packetsSent","totalEncodeTime","totalPacketSendDelay","augmentedTrackStats","trackMovingAverageDeltas","framesEncoded","trackAvgEncodeDelayMovingAverageDelta","putSample","avgEncodeDelay","Math","round","trackAvgPacketSendDelayMovingAverageDelta","avgPacketSendDelay","addAVSyncMetricsToRemoteTrackStats","framesDecoded","jitterBufferDelay","jitterBufferEmittedCount","totalDecodeTime","estimatedPlayoutTimestamp","trackAvgDecodeDelayMovingAverageDelta","avgDecodeDelay","trackAvgJitterBufferDelayMovingAverageDelta","avgJitterBufferDelay","availableIncomingBitrate","availableOutgoingBitrate","bytesReceived","bytesSent","consentRequestsSent","currentRoundTripTime","lastPacketReceivedTimestamp","lastPacketSentTimestamp","nominated","readable","requestsReceived","requestsSent","responsesReceived","responsesSent","retransmissionsReceived","retransmissionsSent","totalRoundTripTime","transportId","localCandidate","candidateType","deleted","ip","port","protocol","url","remoteCandidate","module","exports"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/signaling/v2/room.js"],"sourcesContent":["/* eslint-disable no-console */\n'use strict';\n\nconst DominantSpeakerSignaling = require('./dominantspeakersignaling');\nconst NetworkQualityMonitor = require('./networkqualitymonitor');\nconst NetworkQualitySignaling = require('./networkqualitysignaling');\nconst RecordingV2 = require('./recording');\nconst RoomSignaling = require('../room');\nconst RemoteParticipantV2 = require('./remoteparticipant');\nconst StatsReport = require('../../stats/statsreport');\nconst TrackPrioritySignaling = require('./trackprioritysignaling');\nconst TrackSwitchOffSignaling = require('./trackswitchoffsignaling');\nconst RenderHintsSignaling = require('./renderhintssignaling');\nconst PublisherHintsSignaling = require('./publisherhintsignaling.js');\n\n\nconst {\n  constants: { DEFAULT_SESSION_TIMEOUT_SEC },\n  createBandwidthProfilePayload,\n  defer,\n  difference,\n  filterObject,\n  flatMap,\n  oncePerTick\n} = require('../../util');\n\nconst MovingAverageDelta = require('../../util/movingaveragedelta');\nconst { createTwilioError } = require('../../util/twilio-video-errors');\n\nconst STATS_PUBLISH_INTERVAL_MS = 10000;\n\n/**\n * @extends RoomSignaling\n */\nclass RoomV2 extends RoomSignaling {\n  constructor(localParticipant, initialState, transport, peerConnectionManager, options) {\n    initialState.options = Object.assign({\n      session_timeout: DEFAULT_SESSION_TIMEOUT_SEC\n    }, initialState.options);\n\n    options = Object.assign({\n      DominantSpeakerSignaling,\n      NetworkQualityMonitor,\n      NetworkQualitySignaling,\n      RecordingSignaling: RecordingV2,\n      RemoteParticipantV2,\n      TrackPrioritySignaling,\n      TrackSwitchOffSignaling,\n      bandwidthProfile: null,\n      sessionTimeout: initialState.options.session_timeout * 1000,\n      statsPublishIntervalMs: STATS_PUBLISH_INTERVAL_MS\n    }, options);\n\n    localParticipant.setBandwidthProfile(options.bandwidthProfile);\n    peerConnectionManager.setIceReconnectTimeout(options.sessionTimeout);\n\n    super(localParticipant, initialState.sid, initialState.name, options);\n\n    const getTrackReceiver = id => this._getTrackReceiver(id);\n    const log = this._log;\n\n    Object.defineProperties(this, {\n      _disconnectedParticipantRevisions: {\n        value: new Map()\n      },\n      _NetworkQualityMonitor: {\n        value: options.NetworkQualityMonitor\n      },\n      _lastBandwidthProfileRevision: {\n        value: localParticipant.bandwidthProfileRevision,\n        writable: true\n      },\n      _mediaStatesWarningsRevision: {\n        value: 0,\n        writable: true\n      },\n      _networkQualityMonitor: {\n        value: null,\n        writable: true\n      },\n      _networkQualityConfiguration: {\n        value: localParticipant.networkQualityConfiguration\n      },\n      _peerConnectionManager: {\n        value: peerConnectionManager\n      },\n      _published: {\n        value: new Map()\n      },\n      _publishedRevision: {\n        value: 0,\n        writable: true\n      },\n      _RemoteParticipantV2: {\n        value: options.RemoteParticipantV2\n      },\n      _subscribed: {\n        value: new Map()\n      },\n      _subscribedRevision: {\n        value: 0,\n        writable: true\n      },\n      _subscriptionFailures: {\n        value: new Map()\n      },\n      _dominantSpeakerSignaling: {\n        value: new options.DominantSpeakerSignaling(getTrackReceiver, { log })\n      },\n      _networkQualitySignaling: {\n        value: new options.NetworkQualitySignaling(\n          getTrackReceiver,\n          localParticipant.networkQualityConfiguration,\n          { log }\n        )\n      },\n      _renderHintsSignaling: {\n        value: new RenderHintsSignaling(getTrackReceiver, { log }),\n      },\n      _publisherHintsSignaling: {\n        value: new PublisherHintsSignaling(getTrackReceiver, { log }),\n      },\n      _trackPrioritySignaling: {\n        value: new options.TrackPrioritySignaling(getTrackReceiver, { log }),\n      },\n      _trackSwitchOffSignaling: {\n        value: new options.TrackSwitchOffSignaling(getTrackReceiver, { log }),\n      },\n      _pendingSwitchOffStates: {\n        value: new Map()\n      },\n      _transport: {\n        value: transport\n      },\n      _trackReceiverDeferreds: {\n        value: new Map()\n      },\n      mediaRegion: {\n        enumerable: true,\n        value: initialState.options.media_region || null\n      }\n    });\n\n    this._initTrackSwitchOffSignaling();\n    this._initDominantSpeakerSignaling();\n    this._initNetworkQualityMonitorSignaling();\n    this._initPublisherHintSignaling();\n\n    handleLocalParticipantEvents(this, localParticipant);\n    handlePeerConnectionEvents(this, peerConnectionManager);\n    handleTransportEvents(this, transport);\n    periodicallyPublishStats(this, transport, options.statsPublishIntervalMs);\n\n    this._update(initialState);\n\n    // NOTE(mpatwardhan) after initial state we know if publisher_hints are enabled or not\n    // if they are not enabled. we need to undo simulcast that if it was enabled with initial offer.\n    this._peerConnectionManager.setEffectiveAdaptiveSimulcast(this._publisherHintsSignaling.isSetup);\n  }\n\n  /**\n   * The PeerConnection state.\n   * @property {RTCPeerConnectionState}\n   */\n  get connectionState() {\n    return this._peerConnectionManager.connectionState;\n  }\n\n  /**\n   * The Signaling Connection State.\n   * @property {string} - \"connected\", \"reconnecting\", \"disconnected\"\n   */\n  get signalingConnectionState() {\n    return this._transport.state === 'syncing'\n      ? 'reconnecting'\n      : this._transport.state;\n  }\n\n  /**\n   * The Ice Connection State.\n   * @property {RTCIceConnectionState}\n   */\n  get iceConnectionState() {\n    return this._peerConnectionManager.iceConnectionState;\n  }\n\n  /**\n   * @private\n   */\n  _deleteTrackReceiverDeferred(id) {\n    return this._trackReceiverDeferreds.delete(id);\n  }\n\n  /**\n   * @private\n   */\n  _getOrCreateTrackReceiverDeferred(id) {\n    const deferred = this._trackReceiverDeferreds.get(id) || defer();\n    const trackReceivers = this._peerConnectionManager.getTrackReceivers();\n\n    // NOTE(mmalavalli): In Firefox, there can be instances where a MediaStreamTrack\n    // for the given Track ID already exists, for example, when a Track is removed\n    // and added back. If that is the case, then we should resolve 'deferred'.\n    const trackReceiver = trackReceivers.find(trackReceiver => trackReceiver.id === id && trackReceiver.readyState !== 'ended');\n\n    if (trackReceiver) {\n      deferred.resolve(trackReceiver);\n    } else {\n      // NOTE(mmalavalli): Only add the 'deferred' to the map if it's not\n      // resolved. This will prevent old copies of the MediaStreamTrack from\n      // being used when the remote peer removes and re-adds a MediaStreamTrack.\n      this._trackReceiverDeferreds.set(id, deferred);\n    }\n\n    return deferred;\n  }\n\n  /**\n   * @private\n   */\n  _addTrackReceiver(trackReceiver) {\n    const deferred = this._getOrCreateTrackReceiverDeferred(trackReceiver.id);\n    deferred.resolve(trackReceiver);\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _disconnect(error) {\n    const didDisconnect = super._disconnect.call(this, error);\n    if (didDisconnect) {\n      this._teardownNetworkQualityMonitor();\n      this._transport.disconnect();\n      this._peerConnectionManager.close();\n    }\n\n    this.localParticipant.tracks.forEach(track => {\n      track.publishFailed(error || new Error('LocalParticipant disconnected'));\n    });\n\n    return didDisconnect;\n  }\n\n  /**\n   * @private\n   */\n  _getTrackReceiver(id) {\n    return this._getOrCreateTrackReceiverDeferred(id).promise.then(trackReceiver => {\n      this._deleteTrackReceiverDeferred(id);\n      return trackReceiver;\n    });\n  }\n\n  /**\n   * @private\n   */\n  _getInitialTrackSwitchOffState(trackSid) {\n    const initiallySwitchedOff = this._pendingSwitchOffStates.get(trackSid) || false;\n    this._pendingSwitchOffStates.delete(trackSid);\n    if (initiallySwitchedOff) {\n      this._log.warn(`[${trackSid}] was initially switched off! `);\n    }\n    return initiallySwitchedOff;\n  }\n\n\n  /**\n   * @private\n   */\n  _getTrackSidsToTrackSignalings() {\n    const trackSidsToTrackSignalings = flatMap(this.participants, participant => Array.from(participant.tracks));\n    return new Map(trackSidsToTrackSignalings);\n  }\n\n  /**\n   * @private\n   */\n  _getOrCreateRemoteParticipant(participantState) {\n    const RemoteParticipantV2 = this._RemoteParticipantV2;\n    let participant = this.participants.get(participantState.sid);\n    const self = this;\n    if (!participant) {\n      participant = new RemoteParticipantV2(\n        participantState,\n        trackSid => this._getInitialTrackSwitchOffState(trackSid),\n        (trackSid, priority) => this._trackPrioritySignaling.sendTrackPriorityUpdate(trackSid, 'subscribe', priority),\n        (trackSid, hint) => this._renderHintsSignaling.setTrackHint(trackSid, hint),\n        trackSid => this._renderHintsSignaling.clearTrackHint(trackSid)\n      );\n      participant.on('stateChanged', function stateChanged(state) {\n        if (state === 'disconnected') {\n          participant.removeListener('stateChanged', stateChanged);\n          self.participants.delete(participant.sid);\n          self._disconnectedParticipantRevisions.set(participant.sid, participant.revision);\n        }\n      });\n      this.connectParticipant(participant);\n    }\n    return participant;\n  }\n\n  /**\n   * @private\n   */\n  _getState() {\n    return {\n      participant: this.localParticipant.getState()\n    };\n  }\n\n  /**\n   * @private\n   */\n  _maybeAddBandwidthProfile(update) {\n    const { bandwidthProfile, bandwidthProfileRevision } = this.localParticipant;\n    if (bandwidthProfile && this._lastBandwidthProfileRevision < bandwidthProfileRevision) {\n      this._lastBandwidthProfileRevision = bandwidthProfileRevision;\n      return Object.assign({\n        bandwidth_profile: createBandwidthProfilePayload(bandwidthProfile)\n      }, update);\n    }\n    return update;\n  }\n  /**\n   * @private\n   */\n  _publishNewLocalParticipantState() {\n    this._transport.publish(this._maybeAddBandwidthProfile(this._getState()));\n  }\n\n  /**\n   * @private\n   */\n  _publishPeerConnectionState(peerConnectionState) {\n    /* eslint camelcase:0 */\n    this._transport.publish(Object.assign({\n      peer_connections: [peerConnectionState]\n    }, this._getState()));\n  }\n\n  /**\n   * @private\n   */\n  _update(roomState) {\n    if (roomState.subscribed && roomState.subscribed.revision > this._subscribedRevision) {\n      this._subscribedRevision = roomState.subscribed.revision;\n      roomState.subscribed.tracks.forEach(trackState => {\n        if (trackState.id) {\n          this._subscriptionFailures.delete(trackState.sid);\n          this._subscribed.set(trackState.sid, trackState.id);\n        } else if (trackState.error && !this._subscriptionFailures.has(trackState.sid)) {\n          this._subscriptionFailures.set(trackState.sid, trackState.error);\n        }\n      });\n\n      const subscribedTrackSids = new Set(roomState.subscribed.tracks\n        .filter(trackState => !!trackState.id)\n        .map(trackState => trackState.sid));\n\n      this._subscribed.forEach((trackId, trackSid) => {\n        if (!subscribedTrackSids.has(trackSid)) {\n          this._subscribed.delete(trackSid);\n        }\n      });\n    }\n\n    const participantsToKeep = new Set();\n\n    // eslint-disable-next-line no-warning-comments\n    // TODO(mroberts): Remove me once the Server is fixed.\n    (roomState.participants || []).forEach(participantState => {\n      if (participantState.sid === this.localParticipant.sid) {\n        return;\n      }\n\n      // NOTE(mmalavalli): If the incoming revision for a disconnected Participant is less than or\n      // equal to the revision when it was disconnected, then the state is old and can be ignored.\n      // Otherwise, the Participant was most likely disconnected in a Large Group Room when it\n      // stopped publishing media, and hence needs to be re-added.\n      const disconnectedParticipantRevision = this._disconnectedParticipantRevisions.get(participantState.sid);\n      if (disconnectedParticipantRevision && participantState.revision <= disconnectedParticipantRevision) {\n        return;\n      }\n\n      if (disconnectedParticipantRevision) {\n        this._disconnectedParticipantRevisions.delete(participantState.sid);\n      }\n      const participant = this._getOrCreateRemoteParticipant(participantState);\n      participant.update(participantState);\n      participantsToKeep.add(participant);\n    });\n\n    if (roomState.type === 'synced') {\n      this.participants.forEach(participant => {\n        if (!participantsToKeep.has(participant)) {\n          participant.disconnect();\n        }\n      });\n    }\n\n    handleSubscriptions(this);\n\n    // eslint-disable-next-line no-warning-comments\n    // TODO(mroberts): Remove me once the Server is fixed.\n    /* eslint camelcase:0 */\n    if (roomState.peer_connections) {\n      this._peerConnectionManager.update(roomState.peer_connections, roomState.type === 'synced');\n    }\n\n    if (roomState.recording) {\n      this.recording.update(roomState.recording);\n    }\n\n    if (roomState.published && roomState.published.revision > this._publishedRevision) {\n      this._publishedRevision = roomState.published.revision;\n      roomState.published.tracks.forEach(track => {\n        if (track.sid) {\n          this._published.set(track.id, track.sid);\n        }\n      });\n      this.localParticipant.update(roomState.published);\n    }\n\n    if (roomState.participant) {\n      this.localParticipant.connect(\n        roomState.participant.sid,\n        roomState.participant.identity);\n    }\n\n    [\n      this._dominantSpeakerSignaling,\n      this._networkQualitySignaling,\n      this._trackPrioritySignaling,\n      this._trackSwitchOffSignaling,\n      this._renderHintsSignaling,\n      this._publisherHintsSignaling\n    ].forEach(mediaSignaling => {\n      const channel = mediaSignaling.channel;\n      if (!mediaSignaling.isSetup\n        && roomState.media_signaling\n        && roomState.media_signaling[channel]\n        && roomState.media_signaling[channel].transport\n        && roomState.media_signaling[channel].transport.type === 'data-channel') {\n        mediaSignaling.setup(roomState.media_signaling[channel].transport.label);\n      }\n    });\n\n    if (roomState.type === 'warning' && roomState.states &&\n      roomState.states.revision > this._mediaStatesWarningsRevision) {\n      this._mediaStatesWarningsRevision = roomState.states.revision;\n      this.localParticipant.updateMediaStates(roomState.states);\n    }\n\n    return this;\n  }\n\n  _initPublisherHintSignaling() {\n    this._publisherHintsSignaling.on('updated', (hints, id) => {\n      Promise.all(hints.map(hint => {\n        return this.localParticipant.setPublisherHint(hint.track, hint.encodings).then(result => {\n          return { track: hint.track, result };\n        });\n      })).then(hintResponses => {\n        this._publisherHintsSignaling.sendHintResponse({ id, hints: hintResponses });\n      });\n    });\n\n    const handleReplaced = track => {\n      if (track.kind === 'video') {\n        track.trackTransceiver.on('replaced', () => {\n          this._publisherHintsSignaling.sendTrackReplaced({ trackSid: track.sid });\n        });\n      }\n    };\n\n    // hook up for any existing and new tracks getting replaced.\n    Array.from(this.localParticipant.tracks.values()).forEach(track => handleReplaced(track));\n    this.localParticipant.on('trackAdded', track => handleReplaced(track));\n  }\n\n  _initTrackSwitchOffSignaling() {\n    this._trackSwitchOffSignaling.on('updated', (tracksOff, tracksOn) => {\n      try {\n        this._log.debug('received trackSwitch: ', { tracksOn, tracksOff });\n        const trackUpdates = new Map();\n        tracksOn.forEach(trackSid => trackUpdates.set(trackSid, true));\n        tracksOff.forEach(trackSid => {\n          if (trackUpdates.get(trackSid)) {\n            // NOTE(mpatwardhan): This means that VIDEO-3762 has been reproduced.\n            this._log.warn(`${trackSid} is DUPLICATED in both tracksOff and tracksOn list`);\n          }\n          trackUpdates.set(trackSid, false);\n        });\n        this.participants.forEach(participant => {\n          participant.tracks.forEach(track => {\n            const isOn = trackUpdates.get(track.sid);\n            if (typeof isOn !== 'undefined') {\n              track.setSwitchedOff(!isOn);\n              trackUpdates.delete(track.sid);\n            }\n          });\n        });\n        // NOTE(mpatwardhan): Cache any notification about the tracks that we do not yet know about.\n        trackUpdates.forEach((isOn, trackSid) => this._pendingSwitchOffStates.set(trackSid, !isOn));\n      } catch (ex) {\n        this._log.error('error processing track switch off:', ex);\n      }\n    });\n  }\n\n  _initDominantSpeakerSignaling() {\n    this._dominantSpeakerSignaling.on('updated', () => this.setDominantSpeaker(this._dominantSpeakerSignaling.loudestParticipantSid));\n  }\n\n  _initNetworkQualityMonitorSignaling() {\n    this._networkQualitySignaling.on('ready', () => {\n      const networkQualityMonitor = new this._NetworkQualityMonitor(this._peerConnectionManager, this._networkQualitySignaling);\n      this._networkQualityMonitor = networkQualityMonitor;\n      networkQualityMonitor.on('updated', () => {\n        if (this.iceConnectionState === 'failed') {\n          return;\n        }\n        this.localParticipant.setNetworkQualityLevel(\n          networkQualityMonitor.level,\n          networkQualityMonitor.levels);\n        this.participants.forEach(participant => {\n          const levels = networkQualityMonitor.remoteLevels.get(participant.sid);\n          if (levels) {\n            participant.setNetworkQualityLevel(levels.level, levels);\n          }\n        });\n      });\n      networkQualityMonitor.start();\n    });\n    this._networkQualitySignaling.on('teardown', () => this._teardownNetworkQualityMonitor());\n  }\n\n  _teardownNetworkQualityMonitor() {\n    if (this._networkQualityMonitor) {\n      this._networkQualityMonitor.stop();\n      this._networkQualityMonitor = null;\n    }\n  }\n\n  /**\n   * Get the {@link RoomV2}'s media statistics.\n   * @returns {Promise.<Map<PeerConnectionV2#id, StandardizedStatsResponse>>}\n   */\n  getStats() {\n    return this._peerConnectionManager.getStats().then(responses =>\n      new Map(Array.from(responses).map(([id, response]) =>\n        [id, Object.assign({}, response, {\n          localAudioTrackStats: filterAndAddLocalTrackSids(this, response.localAudioTrackStats),\n          localVideoTrackStats: filterAndAddLocalTrackSids(this, response.localVideoTrackStats),\n          remoteAudioTrackStats: filterAndAddRemoteTrackSids(this, response.remoteAudioTrackStats),\n          remoteVideoTrackStats: filterAndAddRemoteTrackSids(this, response.remoteVideoTrackStats)\n        })]\n      ))\n    );\n  }\n}\n\n/**\n * Filter out {@link TrackStats} that aren't in the collection while also\n * stamping their Track SIDs.\n * @param {Map<ID, SID>} idToSid\n * @param {Array<TrackStats>} trackStats\n * @returns {Array<TrackStats>}\n */\nfunction filterAndAddTrackSids(idToSid, trackStats) {\n  return trackStats.reduce((trackStats, trackStat) => {\n    const trackSid = idToSid.get(trackStat.trackId);\n    return trackSid\n      ? [Object.assign({}, trackStat, { trackSid })].concat(trackStats)\n      : trackStats;\n  }, []);\n}\n\n/**\n * Filter out {@link LocalTrackStats} that aren't currently published while also\n * stamping their Track SIDs.\n * @param {RoomV2} roomV2\n * @param {Array<LocalTrackStats>} localTrackStats\n * @returns {Array<LocalTrackStats>}\n */\nfunction filterAndAddLocalTrackSids(roomV2, localTrackStats) {\n  return filterAndAddTrackSids(roomV2._published, localTrackStats);\n}\n\n/**\n * Filter out {@link RemoteTrackStats} that aren't currently subscribed while\n * also stamping their Track SIDs.\n * @param {RoomV2} roomV2\n * @param {Array<RemoteTrackStats>} remoteTrackStats\n * @returns {Array<RemoteTrackStats>}\n */\nfunction filterAndAddRemoteTrackSids(roomV2, remoteTrackStats) {\n  const idToSid = new Map(Array.from(roomV2._subscribed.entries()).map(([sid, id]) => [id, sid]));\n  return filterAndAddTrackSids(idToSid, remoteTrackStats);\n}\n\n/**\n * @typedef {object} RoomV2#Representation\n * @property {string} name\n * @property {LocalParticipantV2#Representation} participant\n * @property {?Array<RemoteParticipantV2#Representation>} participants\n * @property {?Array<PeerConnectionV2#Representation>} peer_connections\n * @property {?RecordingV2#Representation} recording\n * @property {string} sid\n */\n\nfunction handleLocalParticipantEvents(roomV2, localParticipant) {\n  const localParticipantUpdated = oncePerTick(() => {\n    roomV2._publishNewLocalParticipantState();\n  });\n\n  const renegotiate = oncePerTick(() => {\n    const trackSenders = flatMap(localParticipant.tracks, trackV2 => trackV2.trackTransceiver);\n    roomV2._peerConnectionManager.setTrackSenders(trackSenders);\n  });\n\n  localParticipant.on('trackAdded', renegotiate);\n  localParticipant.on('trackRemoved', renegotiate);\n  localParticipant.on('updated', localParticipantUpdated);\n\n  roomV2.on('stateChanged', function stateChanged(state) {\n    if (state === 'disconnected') {\n      localParticipant.removeListener('trackAdded', renegotiate);\n      localParticipant.removeListener('trackRemoved', renegotiate);\n      localParticipant.removeListener('updated', localParticipantUpdated);\n      roomV2.removeListener('stateChanged', stateChanged);\n      localParticipant.disconnect();\n    }\n  });\n\n  roomV2.on('signalingConnectionStateChanged', () => {\n    const { localParticipant, signalingConnectionState } = roomV2;\n    const { identity, sid } = localParticipant;\n    switch (signalingConnectionState) {\n      case 'connected':\n        localParticipant.connect(sid, identity);\n        break;\n      case 'reconnecting':\n        localParticipant.reconnecting();\n        break;\n    }\n  });\n}\n\nfunction handlePeerConnectionEvents(roomV2, peerConnectionManager) {\n  peerConnectionManager.on('description', function onDescription(description) {\n    roomV2._publishPeerConnectionState(description);\n  });\n  peerConnectionManager.dequeue('description');\n\n  peerConnectionManager.on('candidates', function onCandidates(candidates) {\n    roomV2._publishPeerConnectionState(candidates);\n  });\n  peerConnectionManager.dequeue('candidates');\n\n  peerConnectionManager.on('trackAdded', roomV2._addTrackReceiver.bind(roomV2));\n  peerConnectionManager.dequeue('trackAdded');\n  peerConnectionManager.getTrackReceivers().forEach(roomV2._addTrackReceiver, roomV2);\n\n  peerConnectionManager.on('connectionStateChanged', () => {\n    roomV2.emit('connectionStateChanged');\n  });\n\n  peerConnectionManager.on('iceConnectionStateChanged', () => {\n    roomV2.emit('iceConnectionStateChanged');\n    if (roomV2.iceConnectionState === 'failed') {\n      if (roomV2.localParticipant.networkQualityLevel !== null) {\n        roomV2.localParticipant.setNetworkQualityLevel(0);\n      }\n      roomV2.participants.forEach(participant => {\n        if (participant.networkQualityLevel !== null) {\n          participant.setNetworkQualityLevel(0);\n        }\n      });\n    }\n  });\n}\n\nfunction handleTransportEvents(roomV2, transport) {\n  transport.on('message', roomV2._update.bind(roomV2));\n  transport.on('stateChanged', function stateChanged(state, error) {\n    if (state === 'disconnected') {\n      if (roomV2.state !== 'disconnected') {\n        roomV2._disconnect(error);\n      }\n      transport.removeListener('stateChanged', stateChanged);\n    }\n    roomV2.emit('signalingConnectionStateChanged');\n  });\n}\n\n/**\n * Periodically publish {@link StatsReport}s.\n * @private\n * @param {RoomV2} roomV2\n * @param {Transport} transport\n * @param {Number} intervalMs\n */\nfunction periodicallyPublishStats(roomV2, transport, intervalMs) {\n  const movingAverageDeltas = new Map();\n  let oddPublishCount = false;\n  const interval = setInterval(() => {\n    roomV2.getStats().then(stats => {\n      oddPublishCount = !oddPublishCount;\n      stats.forEach((response, id) => {\n        // NOTE(mmalavalli): A StatsReport is used to publish a \"stats-report\"\n        // event instead of using StandardizedStatsResponse directly because\n        // StatsReport will add zeros to properties that do not exist.\n        const report = new StatsReport(id, response, true /* prepareForInsights */);\n\n        // NOTE(mmalavalli): Since A/V sync metrics are not part of the StatsReport class,\n        // we add them to the insights payload here.\n        transport.publishEvent('quality', 'stats-report', 'info', {\n          audioTrackStats: report.remoteAudioTrackStats.map((trackStat, i) =>\n            addAVSyncMetricsToRemoteTrackStats(trackStat, response.remoteAudioTrackStats[i], movingAverageDeltas)),\n          localAudioTrackStats: report.localAudioTrackStats.map((trackStat, i) =>\n            addAVSyncMetricsToLocalTrackStats(trackStat, response.localAudioTrackStats[i], movingAverageDeltas)),\n          localVideoTrackStats: report.localVideoTrackStats.map((trackStat, i) =>\n            addAVSyncMetricsToLocalTrackStats(trackStat, response.localVideoTrackStats[i], movingAverageDeltas)),\n          peerConnectionId: report.peerConnectionId,\n          videoTrackStats: report.remoteVideoTrackStats.map((trackStat, i) =>\n            addAVSyncMetricsToRemoteTrackStats(trackStat, response.remoteVideoTrackStats[i], movingAverageDeltas)),\n        });\n\n        // NOTE(mmalavalli): Clean up entries for Tracks that are no longer published or subscribed to.\n        const keys = flatMap([\n          'localAudioTrackStats',\n          'localVideoTrackStats',\n          'remoteAudioTrackStats',\n          'remoteVideoTrackStats'\n        ], prop => report[prop].map(({ ssrc, trackSid }) => `${trackSid}+${ssrc}`));\n        const movingAverageDeltaKeysToBeRemoved = difference(Array.from(movingAverageDeltas.keys()), keys);\n        movingAverageDeltaKeysToBeRemoved.forEach(key => movingAverageDeltas.delete(key));\n\n        if (oddPublishCount) {\n          // NOTE(mmalavalli): null properties of the \"active-ice-candidate-pair\"\n          // payload are assigned default values until the Insights gateway\n          // accepts null values.\n          const activeIceCandidatePair = replaceNullsWithDefaults(\n            response.activeIceCandidatePair,\n            report.peerConnectionId);\n\n          transport.publishEvent(\n            'quality',\n            'active-ice-candidate-pair',\n            'info',\n            activeIceCandidatePair);\n        }\n      });\n    }, () => {\n      // Do nothing.\n    });\n  }, intervalMs);\n\n  roomV2.on('stateChanged', function onStateChanged(state) {\n    if (state === 'disconnected') {\n      clearInterval(interval);\n      roomV2.removeListener('stateChanged', onStateChanged);\n    }\n  });\n}\n\nfunction handleSubscriptions(room) {\n  const trackSidsToTrackSignalings = room._getTrackSidsToTrackSignalings();\n\n  room._subscriptionFailures.forEach((error, trackSid) => {\n    const trackSignaling = trackSidsToTrackSignalings.get(trackSid);\n    if (trackSignaling) {\n      room._subscriptionFailures.delete(trackSid);\n      trackSignaling.subscribeFailed(createTwilioError(error.code, error.message));\n    }\n  });\n\n  trackSidsToTrackSignalings.forEach(trackSignaling => {\n    const trackId = room._subscribed.get(trackSignaling.sid);\n    if (!trackId || (trackSignaling.isSubscribed && trackSignaling.trackTransceiver.id !== trackId)) {\n      trackSignaling.setTrackTransceiver(null);\n    }\n    if (trackId) {\n      room._getTrackReceiver(trackId).then(trackReceiver => trackSignaling.setTrackTransceiver(trackReceiver));\n    }\n  });\n}\n\n/**\n * NOTE(mmalavalli): Since A/V sync metrics are not part of the public StatsReport class, we add them\n * only for reporting purposes.\n * @private\n */\nfunction addAVSyncMetricsToLocalTrackStats(trackStats, trackResponse, movingAverageDeltas) {\n  const {\n    framesEncoded,\n    packetsSent,\n    totalEncodeTime,\n    totalPacketSendDelay\n  } = trackResponse;\n  const augmentedTrackStats = Object.assign({}, trackStats);\n  const key = `${trackStats.trackSid}+${trackStats.ssrc}`;\n  const trackMovingAverageDeltas = movingAverageDeltas.get(key) || new Map();\n\n  if (typeof totalEncodeTime === 'number' && typeof framesEncoded === 'number') {\n    const trackAvgEncodeDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgEncodeDelay')\n      || new MovingAverageDelta();\n    trackAvgEncodeDelayMovingAverageDelta.putSample(totalEncodeTime * 1000, framesEncoded);\n    augmentedTrackStats.avgEncodeDelay = Math.round(trackAvgEncodeDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgEncodeDelay', trackAvgEncodeDelayMovingAverageDelta);\n  }\n  if (typeof totalPacketSendDelay === 'number' && typeof packetsSent === 'number') {\n    const trackAvgPacketSendDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgPacketSendDelay')\n      || new MovingAverageDelta();\n    trackAvgPacketSendDelayMovingAverageDelta.putSample(totalPacketSendDelay * 1000, packetsSent);\n    augmentedTrackStats.avgPacketSendDelay = Math.round(trackAvgPacketSendDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgPacketSendDelay', trackAvgPacketSendDelayMovingAverageDelta);\n  }\n  movingAverageDeltas.set(key, trackMovingAverageDeltas);\n  return augmentedTrackStats;\n}\n\n/**\n * NOTE(mmalavalli): Since A/V sync metrics are not part of the public StatsReport class, we add them\n * only for reporting purposes.\n * @private\n */\nfunction addAVSyncMetricsToRemoteTrackStats(trackStats, trackResponse, movingAverageDeltas) {\n  const {\n    estimatedPlayoutTimestamp,\n    framesDecoded,\n    jitterBufferDelay,\n    jitterBufferEmittedCount,\n    totalDecodeTime\n  } = trackResponse;\n  const augmentedTrackStats = Object.assign({}, trackStats);\n  const key = `${trackStats.trackSid}+${trackStats.ssrc}`;\n  const trackMovingAverageDeltas = movingAverageDeltas.get(key) || new Map();\n\n  if (typeof estimatedPlayoutTimestamp === 'number') {\n    augmentedTrackStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n  }\n  if (typeof framesDecoded === 'number' && typeof totalDecodeTime === 'number') {\n    const trackAvgDecodeDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgDecodeDelay')\n      || new MovingAverageDelta();\n    trackAvgDecodeDelayMovingAverageDelta.putSample(totalDecodeTime * 1000, framesDecoded);\n    augmentedTrackStats.avgDecodeDelay = Math.round(trackAvgDecodeDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgDecodeDelay', trackAvgDecodeDelayMovingAverageDelta);\n  }\n  if (typeof jitterBufferDelay === 'number' && typeof jitterBufferEmittedCount === 'number') {\n    const trackAvgJitterBufferDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgJitterBufferDelay')\n      || new MovingAverageDelta();\n    trackAvgJitterBufferDelayMovingAverageDelta.putSample(jitterBufferDelay * 1000, jitterBufferEmittedCount);\n    augmentedTrackStats.avgJitterBufferDelay = Math.round(trackAvgJitterBufferDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgJitterBufferDelay', trackAvgJitterBufferDelayMovingAverageDelta);\n  }\n  movingAverageDeltas.set(key, trackMovingAverageDeltas);\n  return augmentedTrackStats;\n}\n\nfunction replaceNullsWithDefaults(activeIceCandidatePair, peerConnectionId) {\n  activeIceCandidatePair = Object.assign({\n    availableIncomingBitrate: 0,\n    availableOutgoingBitrate: 0,\n    bytesReceived: 0,\n    bytesSent: 0,\n    consentRequestsSent: 0,\n    currentRoundTripTime: 0,\n    lastPacketReceivedTimestamp: 0,\n    lastPacketSentTimestamp: 0,\n    nominated: false,\n    peerConnectionId: peerConnectionId,\n    priority: 0,\n    readable: false,\n    requestsReceived: 0,\n    requestsSent: 0,\n    responsesReceived: 0,\n    responsesSent: 0,\n    retransmissionsReceived: 0,\n    retransmissionsSent: 0,\n    state: 'failed',\n    totalRoundTripTime: 0,\n    transportId: '',\n    writable: false\n  }, filterObject(activeIceCandidatePair || {}, null));\n\n  activeIceCandidatePair.localCandidate = Object.assign({\n    candidateType: 'host',\n    deleted: false,\n    ip: '',\n    port: 0,\n    priority: 0,\n    protocol: 'udp',\n    url: ''\n  }, filterObject(activeIceCandidatePair.localCandidate || {}, null));\n\n  activeIceCandidatePair.remoteCandidate = Object.assign({\n    candidateType: 'host',\n    ip: '',\n    port: 0,\n    priority: 0,\n    protocol: 'udp',\n    url: ''\n  }, filterObject(activeIceCandidatePair.remoteCandidate || {}, null));\n\n  return activeIceCandidatePair;\n}\n\nmodule.exports = RoomV2;\n"]},"metadata":{},"sourceType":"script"}