{"ast":null,"code":"'use strict';\n/**\n * Monitor the network connection status to detect interruptions and handoffs.\n */\n\nvar NetworkMonitor =\n/** @class */\nfunction () {\n  /**\n   * Construct a {@link NetworkMonitor}.\n   * @param {function} onNetworkChanged\n   * @param {*} [options]\n   */\n  function NetworkMonitor(onNetworkChanged, options) {\n    var _this = this;\n\n    options = Object.assign({\n      navigator: navigator,\n      window: window\n    }, options);\n    var nav = options.navigator;\n    var connection = nav.connection || {\n      type: null\n    };\n    var type = connection.type;\n\n    var _a = connection.type ? {\n      _events: {\n        value: ['change', 'typechange']\n      },\n      _listener: {\n        value: function () {\n          var networkChanged = type !== _this.type && _this.isOnline;\n          type = _this.type;\n\n          if (networkChanged) {\n            onNetworkChanged();\n          }\n        }\n      },\n      _target: {\n        value: connection\n      }\n    } : {\n      _events: {\n        value: ['online']\n      },\n      _listener: {\n        value: onNetworkChanged\n      },\n      _target: {\n        value: options.window\n      }\n    },\n        _events = _a._events,\n        _listener = _a._listener,\n        _target = _a._target;\n\n    Object.defineProperties(this, {\n      isOnline: {\n        enumerable: true,\n        get: function () {\n          return typeof nav.onLine === 'boolean' ? nav.onLine : true;\n        }\n      },\n      type: {\n        enumerable: true,\n        get: function () {\n          return connection.type || null;\n        }\n      },\n      _listener: _listener,\n      _events: _events,\n      _target: _target\n    });\n  }\n  /**\n   * Start the {@link NetworkMonitor}.\n   */\n\n\n  NetworkMonitor.prototype.start = function () {\n    var _this = this;\n\n    this._events.forEach(function (event) {\n      _this._target.addEventListener(event, _this._listener);\n    });\n  };\n  /**\n   * Stop the {@link NetworkMonitor}.\n   */\n\n\n  NetworkMonitor.prototype.stop = function () {\n    var _this = this;\n\n    this._events.forEach(function (event) {\n      _this._target.removeEventListener(event, _this._listener);\n    });\n  };\n\n  return NetworkMonitor;\n}();\n\nmodule.exports = NetworkMonitor;","map":{"version":3,"mappings":"AAAA;AAEA;;;;AAGA;AAAA;AAAA;EACE;;;;;EAKA,wBAAYA,gBAAZ,EAA8BC,OAA9B,EAAqC;IAArC;;IACEA,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc;MACtBC,SAAS,WADa;MAEtBC,MAAM;IAFgB,CAAd,EAGPJ,OAHO,CAAV;IAKA,IAAMK,GAAG,GAAGL,OAAO,CAACG,SAApB;IACA,IAAMG,UAAU,GAAGD,GAAG,CAACC,UAAJ,IAAkB;MAAEC,IAAI,EAAE;IAAR,CAArC;IACA,IAAIA,IAAI,GAAGD,UAAU,CAACC,IAAtB;;IAEM,SAAkCD,UAAU,CAACC,IAAX,GAAkB;MACxDC,OAAO,EAAE;QACPC,KAAK,EAAE,CAAC,QAAD,EAAW,YAAX;MADA,CAD+C;MAIxDC,SAAS,EAAE;QACTD,KAAK,EAAE;UACL,IAAME,cAAc,GAAGJ,IAAI,KAAKK,KAAI,CAACL,IAAd,IAAsBK,KAAI,CAACC,QAAlD;UACAN,IAAI,GAAGK,KAAI,CAACL,IAAZ;;UACA,IAAII,cAAJ,EAAoB;YAClBZ,gBAAgB;UACjB;QACF;MAPQ,CAJ6C;MAaxDe,OAAO,EAAE;QACPL,KAAK,EAAEH;MADA;IAb+C,CAAlB,GAgBpC;MACFE,OAAO,EAAE;QACPC,KAAK,EAAE,CAAC,QAAD;MADA,CADP;MAIFC,SAAS,EAAE;QACTD,KAAK,EAAEV;MADE,CAJT;MAOFe,OAAO,EAAE;QACPL,KAAK,EAAET,OAAO,CAACI;MADR;IAPP,CAhBE;IAAA,IAAEI,OAAO,aAAT;IAAA,IAAWE,SAAS,eAApB;IAAA,IAAsBI,OAAO,aAA7B;;IA4BNb,MAAM,CAACc,gBAAP,CAAwB,IAAxB,EAA8B;MAC5BF,QAAQ,EAAE;QACRG,UAAU,EAAE,IADJ;QAERC,GAAG;UACD,OAAO,OAAOZ,GAAG,CAACa,MAAX,KAAsB,SAAtB,GACHb,GAAG,CAACa,MADD,GAEH,IAFJ;QAGD;MANO,CADkB;MAS5BX,IAAI,EAAE;QACJS,UAAU,EAAE,IADR;QAEJC,GAAG;UACD,OAAOX,UAAU,CAACC,IAAX,IAAmB,IAA1B;QACD;MAJG,CATsB;MAe5BG,SAAS,WAfmB;MAgB5BF,OAAO,SAhBqB;MAiB5BM,OAAO;IAjBqB,CAA9B;EAmBD;EAED;;;;;EAGAK;IAAA;;IACE,KAAKX,OAAL,CAAaY,OAAb,CAAqB,iBAAK;MACxBR,KAAI,CAACE,OAAL,CAAaO,gBAAb,CAA8BC,KAA9B,EAAqCV,KAAI,CAACF,SAA1C;IACD,CAFD;EAGD,CAJD;EAMA;;;;;EAGAS;IAAA;;IACE,KAAKX,OAAL,CAAaY,OAAb,CAAqB,iBAAK;MACxBR,KAAI,CAACE,OAAL,CAAaS,mBAAb,CAAiCD,KAAjC,EAAwCV,KAAI,CAACF,SAA7C;IACD,CAFD;EAGD,CAJD;;EAKF;AAAC,CAlFD;;AAoFAc,MAAM,CAACC,OAAP,GAAiBN,cAAjB","names":["onNetworkChanged","options","Object","assign","navigator","window","nav","connection","type","_events","value","_listener","networkChanged","_this","isOnline","_target","defineProperties","enumerable","get","onLine","NetworkMonitor","forEach","addEventListener","event","removeEventListener","module","exports"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/util/networkmonitor.js"],"sourcesContent":["'use strict';\n\n/**\n * Monitor the network connection status to detect interruptions and handoffs.\n */\nclass NetworkMonitor {\n  /**\n   * Construct a {@link NetworkMonitor}.\n   * @param {function} onNetworkChanged\n   * @param {*} [options]\n   */\n  constructor(onNetworkChanged, options) {\n    options = Object.assign({\n      navigator,\n      window,\n    }, options);\n\n    const nav = options.navigator;\n    const connection = nav.connection || { type: null };\n    let type = connection.type;\n\n    const { _events, _listener, _target } = connection.type ? {\n      _events: {\n        value: ['change', 'typechange']\n      },\n      _listener: {\n        value: () => {\n          const networkChanged = type !== this.type && this.isOnline;\n          type = this.type;\n          if (networkChanged) {\n            onNetworkChanged();\n          }\n        }\n      },\n      _target: {\n        value: connection\n      }\n    } : {\n      _events: {\n        value: ['online']\n      },\n      _listener: {\n        value: onNetworkChanged\n      },\n      _target: {\n        value: options.window\n      }\n    };\n\n    Object.defineProperties(this, {\n      isOnline: {\n        enumerable: true,\n        get() {\n          return typeof nav.onLine === 'boolean'\n            ? nav.onLine\n            : true;\n        }\n      },\n      type: {\n        enumerable: true,\n        get() {\n          return connection.type || null;\n        }\n      },\n      _listener,\n      _events,\n      _target\n    });\n  }\n\n  /**\n   * Start the {@link NetworkMonitor}.\n   */\n  start() {\n    this._events.forEach(event => {\n      this._target.addEventListener(event, this._listener);\n    });\n  }\n\n  /**\n   * Stop the {@link NetworkMonitor}.\n   */\n  stop() {\n    this._events.forEach(event => {\n      this._target.removeEventListener(event, this._listener);\n    });\n  }\n}\n\nmodule.exports = NetworkMonitor;\n"]},"metadata":{},"sourceType":"script"}