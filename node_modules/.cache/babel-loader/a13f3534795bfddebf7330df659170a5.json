{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar StateMachine = require('../../statemachine');\n\nvar TwilioConnection = require('../../twilioconnection');\n\nvar DefaultBackoff = require('../../util/backoff');\n\nvar reconnectBackoffConfig = require('../../util/constants').reconnectBackoffConfig;\n\nvar Timeout = require('../../util/timeout');\n\nvar _a = require('../../util/constants'),\n    SDK_NAME = _a.SDK_NAME,\n    SDK_VERSION = _a.SDK_VERSION,\n    SDP_FORMAT = _a.SDP_FORMAT;\n\nvar _b = require('../../util'),\n    createBandwidthProfilePayload = _b.createBandwidthProfilePayload,\n    createMediaSignalingPayload = _b.createMediaSignalingPayload,\n    createMediaWarningsPayload = _b.createMediaWarningsPayload,\n    createSubscribePayload = _b.createSubscribePayload,\n    getUserAgent = _b.getUserAgent,\n    isNonArrayObject = _b.isNonArrayObject;\n\nvar _c = require('../../util/twilio-video-errors'),\n    createTwilioError = _c.createTwilioError,\n    RoomCompletedError = _c.RoomCompletedError,\n    SignalingConnectionError = _c.SignalingConnectionError,\n    SignalingServerBusyError = _c.SignalingServerBusyError;\n\nvar ICE_VERSION = 1;\nvar RSP_VERSION = 2;\n/*\nTwilioConnectionTransport States\n----------------\n\n                      +-----------+\n                      |           |\n                      |  syncing  |---------+\n                      |           |         |\n                      +-----------+         |\n                         ^     |            |\n                         |     |            |\n                         |     v            v\n    +------------+    +-----------+    +--------------+\n    |            |    |           |    |              |\n    | connecting |--->| connected |--->| disconnected |\n    |            |    |           |    |              |\n    +------------+    +-----------+    +--------------+\n             |                              ^\n             |                              |\n             |                              |\n             +------------------------------+\n\n*/\n\nvar states = {\n  connecting: ['connected', 'disconnected'],\n  connected: ['disconnected', 'syncing'],\n  syncing: ['connected', 'disconnected'],\n  disconnected: []\n};\n/**\n * A {@link TwilioConnectionTransport} supports sending and receiving Room Signaling Protocol\n * (RSP) messages. It also supports RSP requests, such as Sync and Disconnect.\n * @extends StateMachine\n * @emits TwilioConnectionTransport#connected\n * @emits TwilioConnectionTransport#message\n */\n\nvar TwilioConnectionTransport =\n/** @class */\nfunction (_super) {\n  __extends(TwilioConnectionTransport, _super);\n  /**\n   * Construct a {@link TwilioConnectionTransport}.\n   * @param {?string} name\n   * @param {string} accessToken\n   * @param {ParticipantSignaling} localParticipant\n   * @param {PeerConnectionManager} peerConnectionManager\n   * @param {string} wsServer\n   * @param {object} [options]\n   */\n\n\n  function TwilioConnectionTransport(name, accessToken, localParticipant, peerConnectionManager, wsServer, options) {\n    var _this = this;\n\n    options = Object.assign({\n      Backoff: DefaultBackoff,\n      TwilioConnection: TwilioConnection,\n      iceServers: null,\n      trackPriority: true,\n      trackSwitchOff: true,\n      renderHints: true,\n      userAgent: getUserAgent()\n    }, options);\n    _this = _super.call(this, 'connecting', states) || this;\n    Object.defineProperties(_this, {\n      _accessToken: {\n        value: accessToken\n      },\n      _automaticSubscription: {\n        value: options.automaticSubscription\n      },\n      _bandwidthProfile: {\n        value: options.bandwidthProfile\n      },\n      _dominantSpeaker: {\n        value: options.dominantSpeaker\n      },\n      _adaptiveSimulcast: {\n        value: options.adaptiveSimulcast\n      },\n      _eventObserver: {\n        value: options.eventObserver,\n        writable: false\n      },\n      _renderHints: {\n        value: options.renderHints\n      },\n      _iceServersStatus: {\n        value: Array.isArray(options.iceServers) ? 'overrode' : 'acquire'\n      },\n      _localParticipant: {\n        value: localParticipant\n      },\n      _name: {\n        value: name\n      },\n      _networkQuality: {\n        value: isNonArrayObject(options.networkQuality) || options.networkQuality\n      },\n      _notifyWarnings: {\n        value: options.notifyWarnings\n      },\n      _options: {\n        value: options\n      },\n      _peerConnectionManager: {\n        value: peerConnectionManager\n      },\n      _sessionTimer: {\n        value: null,\n        writable: true\n      },\n      _sessionTimeoutMS: {\n        value: 0,\n        writable: true\n      },\n      _reconnectBackoff: {\n        value: new options.Backoff(reconnectBackoffConfig)\n      },\n      _session: {\n        value: null,\n        writable: true\n      },\n      _trackPriority: {\n        value: options.trackPriority\n      },\n      _trackSwitchOff: {\n        value: options.trackSwitchOff\n      },\n      _twilioConnection: {\n        value: null,\n        writable: true\n      },\n      _updatesReceived: {\n        value: []\n      },\n      _updatesToSend: {\n        value: []\n      },\n      _userAgent: {\n        value: options.userAgent\n      },\n      _wsServer: {\n        value: wsServer\n      }\n    });\n    setupTransport(_this);\n    return _this;\n  }\n  /**\n   * Create a Connect, Sync or Disconnect RSP message.\n   * @private\n   * @returns {?object}\n   */\n\n\n  TwilioConnectionTransport.prototype._createConnectOrSyncOrDisconnectMessage = function () {\n    if (this.state === 'connected') {\n      return null;\n    }\n\n    if (this.state === 'disconnected') {\n      return {\n        session: this._session,\n        type: 'disconnect',\n        version: RSP_VERSION\n      };\n    }\n\n    var type = {\n      connecting: 'connect',\n      syncing: 'sync'\n    }[this.state];\n    var message = {\n      name: this._name,\n      participant: this._localParticipant.getState(),\n      peer_connections: this._peerConnectionManager.getStates(),\n      type: type,\n      version: RSP_VERSION\n    };\n\n    if (message.type === 'connect') {\n      message.ice_servers = this._iceServersStatus;\n      message.publisher = {\n        name: SDK_NAME,\n        sdk_version: SDK_VERSION,\n        user_agent: this._userAgent\n      };\n\n      if (this._bandwidthProfile) {\n        message.bandwidth_profile = createBandwidthProfilePayload(this._bandwidthProfile);\n      }\n\n      if (this._notifyWarnings) {\n        message.participant.media_warnings = createMediaWarningsPayload(this._notifyWarnings);\n      }\n\n      message.media_signaling = createMediaSignalingPayload(this._dominantSpeaker, this._networkQuality, this._trackPriority, this._trackSwitchOff, this._adaptiveSimulcast, this._renderHints);\n      message.subscribe = createSubscribePayload(this._automaticSubscription);\n      message.format = SDP_FORMAT;\n      message.token = this._accessToken;\n    } else if (message.type === 'sync') {\n      message.session = this._session;\n      message.token = this._accessToken;\n    } else if (message.type === 'update') {\n      message.session = this._session;\n    }\n\n    return message;\n  };\n  /**\n   * Create an \"ice\" message.\n   * @private\n   */\n\n\n  TwilioConnectionTransport.prototype._createIceMessage = function () {\n    return {\n      edge: 'roaming',\n      token: this._accessToken,\n      type: 'ice',\n      version: ICE_VERSION\n    };\n  };\n  /**\n   * Send a Connect, Sync or Disconnect RSP message.\n   * @private\n   */\n\n\n  TwilioConnectionTransport.prototype._sendConnectOrSyncOrDisconnectMessage = function () {\n    var message = this._createConnectOrSyncOrDisconnectMessage();\n\n    if (message) {\n      this._twilioConnection.sendMessage(message);\n    }\n  };\n  /**\n   * Disconnect the {@link TwilioConnectionTransport}. Returns true if calling the method resulted\n   * in disconnection.\n   * @param {TwilioError} [error]\n   * @returns {boolean}\n   */\n\n\n  TwilioConnectionTransport.prototype.disconnect = function (error) {\n    if (this.state !== 'disconnected') {\n      this.preempt('disconnected', null, [error]);\n\n      this._sendConnectOrSyncOrDisconnectMessage();\n\n      this._twilioConnection.close();\n\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Publish an RSP Update. Returns true if calling the method resulted in\n   * publishing (or eventually publishing) the update.\n   * @param {object} update\n   * @returns {boolean}\n   */\n\n\n  TwilioConnectionTransport.prototype.publish = function (update) {\n    switch (this.state) {\n      case 'connected':\n        this._twilioConnection.sendMessage(Object.assign({\n          session: this._session,\n          type: 'update',\n          version: RSP_VERSION\n        }, update));\n\n        return true;\n\n      case 'connecting':\n      case 'syncing':\n        this._updatesToSend.push(update);\n\n        return true;\n\n      case 'disconnected':\n      default:\n        return false;\n    }\n  };\n  /**\n   * Publish (or queue) an event to the Insights gateway.\n   * @param {string} group - Event group name\n   * @param {string} name - Event name\n   * @param {string} level - Event level\n   * @param {object} payload - Event payload\n   * @returns {void}\n   */\n\n\n  TwilioConnectionTransport.prototype.publishEvent = function (group, name, level, payload) {\n    this._eventObserver.emit('event', {\n      group: group,\n      name: name,\n      level: level,\n      payload: payload\n    });\n  };\n  /**\n   * Sync the {@link TwilioConnectionTransport}. Returns true if calling the method resulted in\n   * syncing.\n   * @returns {boolean}\n   */\n\n\n  TwilioConnectionTransport.prototype.sync = function () {\n    if (this.state === 'connected') {\n      this.preempt('syncing');\n\n      this._sendConnectOrSyncOrDisconnectMessage();\n\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * @private\n   * @returns {void}\n   */\n\n\n  TwilioConnectionTransport.prototype._setSession = function (session, sessionTimeout) {\n    this._session = session;\n    this._sessionTimeoutMS = sessionTimeout * 1000;\n  };\n  /**\n   * Determines if we should attempt reconnect.\n   * returns a Promise to wait on before attempting to\n   * reconnect. returns null if its not okay to reconnect.\n   * @private\n   * @returns {Promise<void>}\n   */\n\n\n  TwilioConnectionTransport.prototype._getReconnectTimer = function () {\n    var _this = this;\n\n    if (this._sessionTimeoutMS === 0) {\n      // this means either we have never connected.\n      // or we timed out while trying to reconnect\n      // In either case we do not want to reconnect.\n      return null;\n    } // start session timer\n\n\n    if (!this._sessionTimer) {\n      this._sessionTimer = new Timeout(function () {\n        // ensure that _clearReconnectTimer wasn't\n        // called while we were waiting.\n        if (_this._sessionTimer) {\n          // do not allow any more reconnect attempts.\n          _this._sessionTimeoutMS = 0;\n        }\n      }, this._sessionTimeoutMS);\n    } // return promise that waits with exponential backoff.\n\n\n    return new Promise(function (resolve) {\n      _this._reconnectBackoff.backoff(resolve);\n    });\n  };\n  /**\n   * clears the session reconnect timer.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  TwilioConnectionTransport.prototype._clearReconnectTimer = function () {\n    this._reconnectBackoff.reset();\n\n    if (this._sessionTimer) {\n      this._sessionTimer.clear();\n\n      this._sessionTimer = null;\n    }\n  };\n\n  return TwilioConnectionTransport;\n}(StateMachine);\n/**\n * @event TwilioConnectionTransport#connected\n * @param {object} initialState\n */\n\n/**\n * @event TwilioConnectionTransport#message\n * @param {object} peerConnections\n */\n\n\nfunction reducePeerConnections(peerConnections) {\n  return Array.from(peerConnections.reduce(function (peerConnectionsById, update) {\n    var reduced = peerConnectionsById.get(update.id) || update; // First, reduce the top-level `description` property.\n\n    if (!reduced.description && update.description) {\n      reduced.description = update.description;\n    } else if (reduced.description && update.description) {\n      if (update.description.revision > reduced.description.revision) {\n        reduced.description = update.description;\n      }\n    } // Then, reduce the top-level `ice` property.\n\n\n    if (!reduced.ice && update.ice) {\n      reduced.ice = update.ice;\n    } else if (reduced.ice && update.ice) {\n      if (update.ice.revision > reduced.ice.revision) {\n        reduced.ice = update.ice;\n      }\n    } // Finally, update the map.\n\n\n    peerConnectionsById.set(reduced.id, reduced);\n    return peerConnectionsById;\n  }, new Map()).values());\n}\n\nfunction reduceUpdates(updates) {\n  return updates.reduce(function (reduced, update) {\n    // First, reduce the top-level `participant` property.\n    if (!reduced.participant && update.participant) {\n      reduced.participant = update.participant;\n    } else if (reduced.participant && update.participant) {\n      if (update.participant.revision > reduced.participant.revision) {\n        reduced.participant = update.participant;\n      }\n    } // Then, reduce the top-level `peer_connections` property.\n\n    /* eslint camelcase:0 */\n\n\n    if (!reduced.peer_connections && update.peer_connections) {\n      reduced.peer_connections = reducePeerConnections(update.peer_connections);\n    } else if (reduced.peer_connections && update.peer_connections) {\n      reduced.peer_connections = reducePeerConnections(reduced.peer_connections.concat(update.peer_connections));\n    }\n\n    return reduced;\n  }, {});\n}\n\nfunction setupTransport(transport) {\n  function createOrResetTwilioConnection() {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n\n    if (transport._twilioConnection) {\n      transport._twilioConnection.removeListener('message', handleMessage);\n    }\n\n    var _iceServersStatus = transport._iceServersStatus,\n        _options = transport._options,\n        _wsServer = transport._wsServer,\n        state = transport.state;\n    var TwilioConnection = _options.TwilioConnection;\n    var twilioConnection = new TwilioConnection(_wsServer, Object.assign({\n      helloBody: state === 'connecting' && _iceServersStatus === 'acquire' ? transport._createIceMessage() : transport._createConnectOrSyncOrDisconnectMessage()\n    }, _options));\n    twilioConnection.once('close', function (reason) {\n      if (reason === TwilioConnection.CloseReason.LOCAL) {\n        disconnect();\n      } else {\n        disconnect(new Error(reason));\n      }\n    });\n    twilioConnection.on('message', handleMessage);\n    transport._twilioConnection = twilioConnection;\n  }\n\n  function disconnect(error) {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n\n    if (!error) {\n      transport.disconnect();\n      return;\n    }\n\n    var reconnectTimer = transport._getReconnectTimer();\n\n    if (!reconnectTimer) {\n      var twilioError = error.message === TwilioConnection.CloseReason.BUSY ? new SignalingServerBusyError() : new SignalingConnectionError();\n      transport.disconnect(twilioError);\n      return;\n    }\n\n    if (transport.state === 'connected') {\n      transport.preempt('syncing');\n    }\n\n    reconnectTimer.then(createOrResetTwilioConnection);\n  }\n\n  function handleMessage(message) {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n\n    if (message.type === 'error') {\n      transport.disconnect(createTwilioError(message.code, message.message));\n      return;\n    }\n\n    switch (transport.state) {\n      case 'connected':\n        switch (message.type) {\n          case 'connected':\n          case 'synced':\n          case 'update':\n          case 'warning':\n            transport.emit('message', message);\n            return;\n\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n\n          default:\n            // Do nothing.\n            return;\n        }\n\n      case 'connecting':\n        switch (message.type) {\n          case 'iced':\n            transport._options.onIced(message.ice_servers).then(function () {\n              transport._sendConnectOrSyncOrDisconnectMessage();\n            });\n\n            return;\n\n          case 'connected':\n            transport._setSession(message.session, message.options.session_timeout);\n\n            transport.emit('connected', message);\n            transport.preempt('connected');\n            return;\n\n          case 'synced':\n          case 'update':\n            transport._updatesReceived.push(message);\n\n            return;\n\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n\n          default:\n            // Do nothing.\n            return;\n        }\n\n      case 'syncing':\n        switch (message.type) {\n          case 'connected':\n          case 'update':\n            transport._updatesReceived.push(message);\n\n            return;\n\n          case 'synced':\n            transport._clearReconnectTimer();\n\n            transport.emit('message', message);\n            transport.preempt('connected');\n            return;\n\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n\n          default:\n            // Do nothing.\n            return;\n        }\n\n      default:\n        // Impossible\n        return;\n    }\n  }\n\n  transport.on('stateChanged', function stateChanged(state) {\n    switch (state) {\n      case 'connected':\n        {\n          var updates = transport._updatesToSend.splice(0);\n\n          if (updates.length) {\n            transport.publish(reduceUpdates(updates));\n          }\n\n          transport._updatesReceived.splice(0).forEach(function (update) {\n            return transport.emit('message', update);\n          });\n\n          return;\n        }\n\n      case 'disconnected':\n        transport._twilioConnection.removeListener('message', handleMessage);\n\n        transport.removeListener('stateChanged', stateChanged);\n        return;\n\n      case 'syncing':\n        // Do nothing.\n        return;\n\n      default:\n        // Impossible\n        return;\n    }\n  });\n  var _options = transport._options,\n      _iceServersStatus = transport._iceServersStatus;\n  var iceServers = _options.iceServers,\n      onIced = _options.onIced;\n\n  if (_iceServersStatus === 'overrode') {\n    onIced(iceServers).then(createOrResetTwilioConnection);\n  } else {\n    createOrResetTwilioConnection();\n  }\n}\n\nmodule.exports = TwilioConnectionTransport;","map":{"version":3,"mappings":"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","names":["StateMachine","require","TwilioConnection","DefaultBackoff","reconnectBackoffConfig","Timeout","SDK_NAME","SDK_VERSION","SDP_FORMAT","createBandwidthProfilePayload","createMediaSignalingPayload","createMediaWarningsPayload","createSubscribePayload","getUserAgent","isNonArrayObject","createTwilioError","RoomCompletedError","SignalingConnectionError","SignalingServerBusyError","ICE_VERSION","RSP_VERSION","states","connecting","connected","syncing","disconnected","__extends","name","accessToken","localParticipant","peerConnectionManager","wsServer","options","Object","assign","Backoff","iceServers","trackPriority","trackSwitchOff","renderHints","userAgent","_this","defineProperties","_accessToken","value","_automaticSubscription","automaticSubscription","_bandwidthProfile","bandwidthProfile","_dominantSpeaker","dominantSpeaker","_adaptiveSimulcast","adaptiveSimulcast","_eventObserver","eventObserver","writable","_renderHints","_iceServersStatus","Array","isArray","_localParticipant","_name","_networkQuality","networkQuality","_notifyWarnings","notifyWarnings","_options","_peerConnectionManager","_sessionTimer","_sessionTimeoutMS","_reconnectBackoff","_session","_trackPriority","_trackSwitchOff","_twilioConnection","_updatesReceived","_updatesToSend","_userAgent","_wsServer","setupTransport","TwilioConnectionTransport","state","session","type","version","message","participant","getState","peer_connections","getStates","ice_servers","publisher","sdk_version","user_agent","bandwidth_profile","media_warnings","media_signaling","subscribe","format","token","edge","_createConnectOrSyncOrDisconnectMessage","sendMessage","error","preempt","_sendConnectOrSyncOrDisconnectMessage","close","update","push","group","level","payload","emit","sessionTimeout","Promise","backoff","resolve","reset","clear","reducePeerConnections","peerConnections","from","reduce","peerConnectionsById","reduced","get","id","description","revision","ice","set","Map","values","reduceUpdates","updates","concat","transport","createOrResetTwilioConnection","removeListener","handleMessage","twilioConnection","helloBody","_createIceMessage","once","reason","CloseReason","LOCAL","disconnect","Error","on","reconnectTimer","_getReconnectTimer","twilioError","BUSY","then","code","status","onIced","_setSession","session_timeout","_clearReconnectTimer","stateChanged","splice","length","publish","forEach","module","exports"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/signaling/v2/twilioconnectiontransport.js"],"sourcesContent":["'use strict';\n\nconst StateMachine = require('../../statemachine');\nconst TwilioConnection = require('../../twilioconnection');\nconst DefaultBackoff = require('../../util/backoff');\nconst { reconnectBackoffConfig } = require('../../util/constants');\nconst Timeout = require('../../util/timeout');\nconst { SDK_NAME, SDK_VERSION, SDP_FORMAT } = require('../../util/constants');\n\nconst {\n  createBandwidthProfilePayload,\n  createMediaSignalingPayload,\n  createMediaWarningsPayload,\n  createSubscribePayload,\n  getUserAgent,\n  isNonArrayObject\n} = require('../../util');\n\nconst {\n  createTwilioError,\n  RoomCompletedError,\n  SignalingConnectionError,\n  SignalingServerBusyError,\n} = require('../../util/twilio-video-errors');\n\nconst ICE_VERSION = 1;\nconst RSP_VERSION = 2;\n\n/*\nTwilioConnectionTransport States\n----------------\n\n                      +-----------+\n                      |           |\n                      |  syncing  |---------+\n                      |           |         |\n                      +-----------+         |\n                         ^     |            |\n                         |     |            |\n                         |     v            v\n    +------------+    +-----------+    +--------------+\n    |            |    |           |    |              |\n    | connecting |--->| connected |--->| disconnected |\n    |            |    |           |    |              |\n    +------------+    +-----------+    +--------------+\n             |                              ^\n             |                              |\n             |                              |\n             +------------------------------+\n\n*/\n\nconst states = {\n  connecting: [\n    'connected',\n    'disconnected'\n  ],\n  connected: [\n    'disconnected',\n    'syncing'\n  ],\n  syncing: [\n    'connected',\n    'disconnected'\n  ],\n  disconnected: []\n};\n\n/**\n * A {@link TwilioConnectionTransport} supports sending and receiving Room Signaling Protocol\n * (RSP) messages. It also supports RSP requests, such as Sync and Disconnect.\n * @extends StateMachine\n * @emits TwilioConnectionTransport#connected\n * @emits TwilioConnectionTransport#message\n */\nclass TwilioConnectionTransport extends StateMachine {\n  /**\n   * Construct a {@link TwilioConnectionTransport}.\n   * @param {?string} name\n   * @param {string} accessToken\n   * @param {ParticipantSignaling} localParticipant\n   * @param {PeerConnectionManager} peerConnectionManager\n   * @param {string} wsServer\n   * @param {object} [options]\n   */\n  constructor(name, accessToken, localParticipant, peerConnectionManager, wsServer, options) {\n    options = Object.assign({\n      Backoff: DefaultBackoff,\n      TwilioConnection,\n      iceServers: null,\n      trackPriority: true,\n      trackSwitchOff: true,\n      renderHints: true,\n      userAgent: getUserAgent()\n    }, options);\n    super('connecting', states);\n\n\n    Object.defineProperties(this, {\n      _accessToken: {\n        value: accessToken\n      },\n      _automaticSubscription: {\n        value: options.automaticSubscription\n      },\n      _bandwidthProfile: {\n        value: options.bandwidthProfile\n      },\n      _dominantSpeaker: {\n        value: options.dominantSpeaker\n      },\n      _adaptiveSimulcast: {\n        value: options.adaptiveSimulcast\n      },\n      _eventObserver: {\n        value: options.eventObserver,\n        writable: false\n      },\n      _renderHints: {\n        value: options.renderHints\n      },\n      _iceServersStatus: {\n        value: Array.isArray(options.iceServers)\n          ? 'overrode'\n          : 'acquire'\n      },\n      _localParticipant: {\n        value: localParticipant\n      },\n      _name: {\n        value: name,\n      },\n      _networkQuality: {\n        value: isNonArrayObject(options.networkQuality) || options.networkQuality\n      },\n      _notifyWarnings: {\n        value: options.notifyWarnings\n      },\n      _options: {\n        value: options\n      },\n      _peerConnectionManager: {\n        value: peerConnectionManager\n      },\n      _sessionTimer: {\n        value: null,\n        writable: true\n      },\n      _sessionTimeoutMS: {\n        value: 0, // initially 0, set only after 1st successful connection.\n        writable: true\n      },\n      _reconnectBackoff: {\n        value: new options.Backoff(reconnectBackoffConfig)\n      },\n      _session: {\n        value: null,\n        writable: true\n      },\n      _trackPriority: {\n        value: options.trackPriority\n      },\n      _trackSwitchOff: {\n        value: options.trackSwitchOff\n      },\n      _twilioConnection: {\n        value: null,\n        writable: true\n      },\n      _updatesReceived: {\n        value: []\n      },\n      _updatesToSend: {\n        value: []\n      },\n      _userAgent: {\n        value: options.userAgent\n      },\n      _wsServer: {\n        value: wsServer\n      }\n    });\n\n\n    setupTransport(this);\n  }\n\n  /**\n   * Create a Connect, Sync or Disconnect RSP message.\n   * @private\n   * @returns {?object}\n   */\n  _createConnectOrSyncOrDisconnectMessage() {\n    if (this.state === 'connected') {\n      return null;\n    }\n\n    if (this.state === 'disconnected') {\n      return {\n        session: this._session,\n        type: 'disconnect',\n        version: RSP_VERSION\n      };\n    }\n\n    const type = {\n      connecting: 'connect',\n      syncing: 'sync'\n    }[this.state];\n\n    const message = {\n      name: this._name,\n      participant: this._localParticipant.getState(),\n      peer_connections: this._peerConnectionManager.getStates(),\n      type,\n      version: RSP_VERSION\n    };\n\n    if (message.type === 'connect') {\n      message.ice_servers = this._iceServersStatus;\n\n      message.publisher = {\n        name: SDK_NAME,\n        sdk_version: SDK_VERSION,\n        user_agent: this._userAgent\n      };\n\n      if (this._bandwidthProfile) {\n        message.bandwidth_profile = createBandwidthProfilePayload(\n          this._bandwidthProfile);\n      }\n\n      if (this._notifyWarnings) {\n        message.participant.media_warnings = createMediaWarningsPayload(\n          this._notifyWarnings);\n      }\n\n      message.media_signaling = createMediaSignalingPayload(\n        this._dominantSpeaker,\n        this._networkQuality,\n        this._trackPriority,\n        this._trackSwitchOff,\n        this._adaptiveSimulcast,\n        this._renderHints);\n\n      message.subscribe = createSubscribePayload(this._automaticSubscription);\n      message.format = SDP_FORMAT;\n      message.token = this._accessToken;\n    } else if (message.type === 'sync') {\n      message.session = this._session;\n      message.token = this._accessToken;\n    } else if (message.type === 'update') {\n      message.session = this._session;\n    }\n\n    return message;\n  }\n\n  /**\n   * Create an \"ice\" message.\n   * @private\n   */\n  _createIceMessage() {\n    return {\n      edge: 'roaming', // roaming here means use same edge as signaling.\n      token: this._accessToken,\n      type: 'ice',\n      version: ICE_VERSION\n    };\n  }\n\n  /**\n   * Send a Connect, Sync or Disconnect RSP message.\n   * @private\n   */\n  _sendConnectOrSyncOrDisconnectMessage() {\n    const message = this._createConnectOrSyncOrDisconnectMessage();\n    if (message) {\n      this._twilioConnection.sendMessage(message);\n    }\n  }\n\n  /**\n   * Disconnect the {@link TwilioConnectionTransport}. Returns true if calling the method resulted\n   * in disconnection.\n   * @param {TwilioError} [error]\n   * @returns {boolean}\n   */\n  disconnect(error) {\n    if (this.state !== 'disconnected') {\n      this.preempt('disconnected', null, [error]);\n      this._sendConnectOrSyncOrDisconnectMessage();\n      this._twilioConnection.close();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Publish an RSP Update. Returns true if calling the method resulted in\n   * publishing (or eventually publishing) the update.\n   * @param {object} update\n   * @returns {boolean}\n   */\n  publish(update) {\n    switch (this.state) {\n      case 'connected':\n        this._twilioConnection.sendMessage(Object.assign({\n          session: this._session,\n          type: 'update',\n          version: RSP_VERSION\n        }, update));\n        return true;\n      case 'connecting':\n      case 'syncing':\n        this._updatesToSend.push(update);\n        return true;\n      case 'disconnected':\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Publish (or queue) an event to the Insights gateway.\n   * @param {string} group - Event group name\n   * @param {string} name - Event name\n   * @param {string} level - Event level\n   * @param {object} payload - Event payload\n   * @returns {void}\n   */\n  publishEvent(group, name, level, payload) {\n    this._eventObserver.emit('event', { group, name, level, payload });\n  }\n\n  /**\n   * Sync the {@link TwilioConnectionTransport}. Returns true if calling the method resulted in\n   * syncing.\n   * @returns {boolean}\n   */\n  sync() {\n    if (this.state === 'connected') {\n      this.preempt('syncing');\n      this._sendConnectOrSyncOrDisconnectMessage();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @private\n   * @returns {void}\n   */\n  _setSession(session, sessionTimeout) {\n    this._session = session;\n    this._sessionTimeoutMS = sessionTimeout * 1000;\n  }\n\n  /**\n   * Determines if we should attempt reconnect.\n   * returns a Promise to wait on before attempting to\n   * reconnect. returns null if its not okay to reconnect.\n   * @private\n   * @returns {Promise<void>}\n   */\n  _getReconnectTimer() {\n    if (this._sessionTimeoutMS === 0) {\n      // this means either we have never connected.\n      // or we timed out while trying to reconnect\n      // In either case we do not want to reconnect.\n      return null;\n    }\n\n    // start session timer\n    if (!this._sessionTimer) {\n      this._sessionTimer = new Timeout(() => {\n        // ensure that _clearReconnectTimer wasn't\n        // called while we were waiting.\n        if (this._sessionTimer) {\n          // do not allow any more reconnect attempts.\n          this._sessionTimeoutMS = 0;\n        }\n      }, this._sessionTimeoutMS);\n    }\n\n    // return promise that waits with exponential backoff.\n    return new Promise(resolve => {\n      this._reconnectBackoff.backoff(resolve);\n    });\n  }\n\n  /**\n   * clears the session reconnect timer.\n   *\n   * @private\n   * @returns {void}\n   */\n  _clearReconnectTimer() {\n    this._reconnectBackoff.reset();\n    if (this._sessionTimer) {\n      this._sessionTimer.clear();\n      this._sessionTimer = null;\n    }\n  }\n}\n\n/**\n * @event TwilioConnectionTransport#connected\n * @param {object} initialState\n */\n\n/**\n * @event TwilioConnectionTransport#message\n * @param {object} peerConnections\n */\n\nfunction reducePeerConnections(peerConnections) {\n  return Array.from(peerConnections.reduce((peerConnectionsById, update) => {\n    const reduced = peerConnectionsById.get(update.id) || update;\n\n    // First, reduce the top-level `description` property.\n    if (!reduced.description && update.description) {\n      reduced.description = update.description;\n    } else if (reduced.description && update.description) {\n      if (update.description.revision > reduced.description.revision) {\n        reduced.description = update.description;\n      }\n    }\n\n    // Then, reduce the top-level `ice` property.\n    if (!reduced.ice && update.ice) {\n      reduced.ice = update.ice;\n    } else if (reduced.ice && update.ice) {\n      if (update.ice.revision > reduced.ice.revision) {\n        reduced.ice = update.ice;\n      }\n    }\n\n    // Finally, update the map.\n    peerConnectionsById.set(reduced.id, reduced);\n    return peerConnectionsById;\n  }, new Map()).values());\n}\n\nfunction reduceUpdates(updates) {\n  return updates.reduce((reduced, update) => {\n    // First, reduce the top-level `participant` property.\n    if (!reduced.participant && update.participant) {\n      reduced.participant = update.participant;\n    } else if (reduced.participant && update.participant) {\n      if (update.participant.revision > reduced.participant.revision) {\n        reduced.participant = update.participant;\n      }\n    }\n\n    // Then, reduce the top-level `peer_connections` property.\n    /* eslint camelcase:0 */\n    if (!reduced.peer_connections && update.peer_connections) {\n      reduced.peer_connections = reducePeerConnections(update.peer_connections);\n    } else if (reduced.peer_connections && update.peer_connections) {\n      reduced.peer_connections = reducePeerConnections(\n        reduced.peer_connections.concat(update.peer_connections));\n    }\n    return reduced;\n  }, {});\n}\n\nfunction setupTransport(transport) {\n  function createOrResetTwilioConnection() {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n    if (transport._twilioConnection) {\n      transport._twilioConnection.removeListener('message', handleMessage);\n    }\n    const { _iceServersStatus, _options, _wsServer, state } = transport;\n    const { TwilioConnection } = _options;\n\n    const twilioConnection = new TwilioConnection(_wsServer, Object.assign({\n      helloBody: state === 'connecting' && _iceServersStatus === 'acquire'\n        ? transport._createIceMessage()\n        : transport._createConnectOrSyncOrDisconnectMessage()\n    }, _options));\n\n    twilioConnection.once('close', reason => {\n      if (reason === TwilioConnection.CloseReason.LOCAL) {\n        disconnect();\n      } else {\n        disconnect(new Error(reason));\n      }\n    });\n\n    twilioConnection.on('message', handleMessage);\n    transport._twilioConnection = twilioConnection;\n  }\n\n  function disconnect(error) {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n    if (!error) {\n      transport.disconnect();\n      return;\n    }\n\n    const reconnectTimer = transport._getReconnectTimer();\n    if (!reconnectTimer) {\n      const twilioError = error.message === TwilioConnection.CloseReason.BUSY\n        ? new SignalingServerBusyError()\n        : new SignalingConnectionError();\n      transport.disconnect(twilioError);\n      return;\n    }\n\n    if (transport.state === 'connected') {\n      transport.preempt('syncing');\n    }\n\n    reconnectTimer.then(createOrResetTwilioConnection);\n  }\n\n  function handleMessage(message) {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n    if (message.type === 'error') {\n      transport.disconnect(createTwilioError(message.code, message.message));\n      return;\n    }\n    switch (transport.state) {\n      case 'connected':\n        switch (message.type) {\n          case 'connected':\n          case 'synced':\n          case 'update':\n          case 'warning':\n            transport.emit('message', message);\n            return;\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed'\n              ? new RoomCompletedError()\n              : null);\n            return;\n          default:\n            // Do nothing.\n            return;\n        }\n      case 'connecting':\n        switch (message.type) {\n          case 'iced':\n            transport._options.onIced(message.ice_servers).then(() => {\n              transport._sendConnectOrSyncOrDisconnectMessage();\n            });\n            return;\n          case 'connected':\n            transport._setSession(message.session, message.options.session_timeout);\n            transport.emit('connected', message);\n            transport.preempt('connected');\n            return;\n          case 'synced':\n          case 'update':\n            transport._updatesReceived.push(message);\n            return;\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed'\n              ? new RoomCompletedError()\n              : null);\n            return;\n          default:\n            // Do nothing.\n            return;\n        }\n      case 'syncing':\n        switch (message.type) {\n          case 'connected':\n          case 'update':\n            transport._updatesReceived.push(message);\n            return;\n          case 'synced':\n            transport._clearReconnectTimer();\n            transport.emit('message', message);\n            transport.preempt('connected');\n            return;\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed'\n              ? new RoomCompletedError()\n              : null);\n            return;\n          default:\n            // Do nothing.\n            return;\n        }\n      default:\n        // Impossible\n        return;\n    }\n  }\n\n  transport.on('stateChanged', function stateChanged(state) {\n    switch (state) {\n      case 'connected': {\n        const updates = transport._updatesToSend.splice(0);\n        if (updates.length) {\n          transport.publish(reduceUpdates(updates));\n        }\n        transport._updatesReceived.splice(0).forEach(update => transport.emit('message', update));\n        return;\n      }\n      case 'disconnected':\n        transport._twilioConnection.removeListener('message', handleMessage);\n        transport.removeListener('stateChanged', stateChanged);\n        return;\n      case 'syncing':\n        // Do nothing.\n        return;\n      default:\n        // Impossible\n        return;\n    }\n  });\n\n  const { _options, _iceServersStatus } = transport;\n  const { iceServers, onIced } = _options;\n\n  if (_iceServersStatus === 'overrode') {\n    onIced(iceServers).then(createOrResetTwilioConnection);\n  } else {\n    createOrResetTwilioConnection();\n  }\n}\n\nmodule.exports = TwilioConnectionTransport;\n"]},"metadata":{},"sourceType":"script"}