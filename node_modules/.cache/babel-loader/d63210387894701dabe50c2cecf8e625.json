{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.syntheticVideo = void 0;\n\nfunction syntheticVideo(_a) {\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.width,\n      width = _c === void 0 ? 640 : _c,\n      _d = _b.height,\n      height = _d === void 0 ? 480 : _d;\n\n  var canvas = Object.assign(document.createElement('canvas'), {\n    width: width,\n    height: height\n  });\n  var ctx = canvas.getContext('2d');\n  ctx.fillStyle = 'green';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  var stopped = false;\n  requestAnimationFrame(function animate() {\n    if (!stopped) {\n      // draw random rect/circle.\n      var r = Math.round(Math.random() * 255);\n      var g = Math.round(Math.random() * 255);\n      var b = Math.round(Math.random() * 255);\n      var a = Math.round(Math.random() * 255);\n      ctx.fillStyle = \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n      ctx.fillRect(Math.random() * width, Math.random() * height, 50, 50);\n      requestAnimationFrame(animate);\n    }\n  });\n  var stream = canvas.captureStream(30);\n  var track = stream.getTracks()[0];\n  var originalStop = track.stop;\n\n  track.stop = function () {\n    stopped = true;\n    originalStop.call(track);\n  };\n\n  return track;\n}\n\nexports.syntheticVideo = syntheticVideo;","map":{"version":3,"mappings":";;;;;;;AAIA,SAAgBA,cAAhB,CAA+BC,EAA/B,EAAiE;MAAlCC,qBAAgC,EAAhC,GAAkCD;MAAhCE;MAAAC,KAAK,mBAAG,GAAH,GAAMD;MAAEE;MAAAC,MAAM,mBAAG,GAAH,GAAMD;;EACxD,IAAME,MAAM,GAAGC,MAAM,CAACC,MAAP,CACbC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CADa,EACqB;IAAEP,KAAK,OAAP;IAASE,MAAM;EAAf,CADrB,CAAf;EAIA,IAAIM,GAAG,GAAGL,MAAM,CAACM,UAAP,CAAkB,IAAlB,CAAV;EACAD,GAAG,CAACE,SAAJ,GAAgB,OAAhB;EACAF,GAAG,CAACG,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBR,MAAM,CAACH,KAA1B,EAAiCG,MAAM,CAACD,MAAxC;EACA,IAAIU,OAAO,GAAG,KAAd;EACAC,qBAAqB,CAAC,SAASC,OAAT,GAAgB;IACpC,IAAI,CAACF,OAAL,EAAc;MACZ;MACA,IAAMG,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAV;MACA,IAAMC,CAAC,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAV;MACA,IAAME,CAAC,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAV;MACA,IAAMG,CAAC,GAAGL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAV;MACAV,GAAG,CAACE,SAAJ,GAAgB,UAAQK,CAAR,GAAS,IAAT,GAAcI,CAAd,GAAe,IAAf,GAAoBC,CAApB,GAAqB,IAArB,GAA0BC,CAA1B,GAA2B,GAA3C;MACAb,GAAG,CAACG,QAAJ,CAAaK,IAAI,CAACE,MAAL,KAAgBlB,KAA7B,EAAoCgB,IAAI,CAACE,MAAL,KAAgBhB,MAApD,EAA4D,EAA5D,EAAgE,EAAhE;MACAW,qBAAqB,CAACC,OAAD,CAArB;IACD;EACF,CAXoB,CAArB;EAYA,IAAMQ,MAAM,GAAGnB,MAAM,CAACoB,aAAP,CAAqB,EAArB,CAAf;EACA,IAAMC,KAAK,GAAGF,MAAM,CAACG,SAAP,GAAmB,CAAnB,CAAd;EACA,IAAMC,YAAY,GAAGF,KAAK,CAACG,IAA3B;;EACAH,KAAK,CAACG,IAAN,GAAa;IACXf,OAAO,GAAG,IAAV;IACAc,YAAY,CAACE,IAAb,CAAkBJ,KAAlB;EACD,CAHD;;EAKA,OAAOA,KAAP;AACD;;AA9BDK","names":["syntheticVideo","_a","_b","_c","width","_d","height","canvas","Object","assign","document","createElement","ctx","getContext","fillStyle","fillRect","stopped","requestAnimationFrame","animate","r","Math","round","random","g","b","a","stream","captureStream","track","getTracks","originalStop","stop","call","exports"],"sources":["/home/samliu/repos/ieee/tp-robot/node_modules/twilio-video/lib/preflight/syntheticvideo.ts"],"sourcesContent":["interface CanvasElement extends HTMLCanvasElement {\n  captureStream(frameRate?: number): MediaStream;\n}\n\nexport function syntheticVideo({ width = 640, height = 480 } = {}): MediaStreamTrack {\n  const canvas = Object.assign(\n    document.createElement('canvas'), { width, height }\n  ) as CanvasElement;\n\n  let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n  ctx.fillStyle = 'green';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  let stopped = false;\n  requestAnimationFrame(function animate() {\n    if (!stopped) {\n      // draw random rect/circle.\n      const r = Math.round(Math.random() * 255);\n      const g = Math.round(Math.random() * 255);\n      const b = Math.round(Math.random() * 255);\n      const a = Math.round(Math.random() * 255);\n      ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${a})`;\n      ctx.fillRect(Math.random() * width, Math.random() * height, 50, 50);\n      requestAnimationFrame(animate);\n    }\n  });\n  const stream = canvas.captureStream(30);\n  const track = stream.getTracks()[0];\n  const originalStop = track.stop;\n  track.stop = () => {\n    stopped = true;\n    originalStop.call(track);\n  };\n\n  return track;\n}\n\n"]},"metadata":{},"sourceType":"script"}