{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar EventEmitter = require('events').EventEmitter;\n/**\n * {@link EncodingParametersImpl} represents an object which notifies its\n * listeners of any changes in the values of its properties.\n * @extends EventEmitter\n * @implements EncodingParameters\n * @emits EncodingParametersImpl#changed\n * @property {?number} maxAudioBitrate\n * @property {?number} maxVideoBitrate\n */\n\n\nvar EncodingParametersImpl =\n/** @class */\nfunction (_super) {\n  __extends(EncodingParametersImpl, _super);\n  /**\n   * Construct an {@link EncodingParametersImpl}.\n   * @param {EncodingParamters} encodingParameters - Initial {@link EncodingParameters}\n   * @param {Boolean} adaptiveSimulcast - true if adaptive simulcast was enabled by connect options.\n   */\n\n\n  function EncodingParametersImpl(encodingParameters, adaptiveSimulcast) {\n    var _this = _super.call(this) || this;\n\n    encodingParameters = Object.assign({\n      maxAudioBitrate: null,\n      maxVideoBitrate: null\n    }, encodingParameters);\n    Object.defineProperties(_this, {\n      maxAudioBitrate: {\n        value: encodingParameters.maxAudioBitrate,\n        writable: true\n      },\n      maxVideoBitrate: {\n        value: encodingParameters.maxVideoBitrate,\n        writable: true\n      },\n      adaptiveSimulcast: {\n        value: adaptiveSimulcast\n      }\n    });\n    return _this;\n  }\n  /**\n   * Returns the bitrate values in an {@link EncodingParameters}.\n   * @returns {EncodingParameters}\n   */\n\n\n  EncodingParametersImpl.prototype.toJSON = function () {\n    return {\n      maxAudioBitrate: this.maxAudioBitrate,\n      maxVideoBitrate: this.maxVideoBitrate\n    };\n  };\n  /**\n   * Update the bitrate values with those in the given {@link EncodingParameters}.\n   * @param {EncodingParameters} encodingParameters - The new {@link EncodingParameters}\n   * @fires EncodingParametersImpl#changed\n   */\n\n\n  EncodingParametersImpl.prototype.update = function (encodingParameters) {\n    var _this = this;\n\n    encodingParameters = Object.assign({\n      maxAudioBitrate: this.maxAudioBitrate,\n      maxVideoBitrate: this.maxVideoBitrate\n    }, encodingParameters);\n    var shouldEmitChanged = ['maxAudioBitrate', 'maxVideoBitrate'].reduce(function (shouldEmitChanged, maxKindBitrate) {\n      if (_this[maxKindBitrate] !== encodingParameters[maxKindBitrate]) {\n        _this[maxKindBitrate] = encodingParameters[maxKindBitrate];\n        shouldEmitChanged = true;\n      }\n\n      return shouldEmitChanged;\n    }, false);\n\n    if (shouldEmitChanged) {\n      this.emit('changed');\n    }\n  };\n\n  return EncodingParametersImpl;\n}(EventEmitter);\n/**\n * At least one of the {@link EncodingParametersImpl}'s bitrate values changed.\n * @event EncodingParametersImpl#changed\n */\n\n\nmodule.exports = EncodingParametersImpl;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,YAAvC;AAEA;;;;;;;;;;;AASA;AAAA;AAAA;EAAqCE;EACnC;;;;;;;EAKA,gCAAYC,kBAAZ,EAAgCC,iBAAhC,EAAiD;IAAjD,YACEC,qBAAO,IADT;;IAGEF,kBAAkB,GAAGG,MAAM,CAACC,MAAP,CAAc;MACjCC,eAAe,EAAE,IADgB;MAEjCC,eAAe,EAAE;IAFgB,CAAd,EAGlBN,kBAHkB,CAArB;IAKAG,MAAM,CAACI,gBAAP,CAAwBC,KAAxB,EAA8B;MAC5BH,eAAe,EAAE;QACfI,KAAK,EAAET,kBAAkB,CAACK,eADX;QAEfK,QAAQ,EAAE;MAFK,CADW;MAK5BJ,eAAe,EAAE;QACfG,KAAK,EAAET,kBAAkB,CAACM,eADX;QAEfI,QAAQ,EAAE;MAFK,CALW;MAS5BT,iBAAiB,EAAE;QACjBQ,KAAK,EAAER;MADU;IATS,CAA9B;;EAaD;EAED;;;;;;EAIAU;IACE,OAAO;MACLN,eAAe,EAAE,KAAKA,eADjB;MAELC,eAAe,EAAE,KAAKA;IAFjB,CAAP;EAID,CALD;EAOA;;;;;;;EAKAK,oDAAOX,kBAAP,EAAyB;IAAzB;;IACEA,kBAAkB,GAAGG,MAAM,CAACC,MAAP,CAAc;MACjCC,eAAe,EAAE,KAAKA,eADW;MAEjCC,eAAe,EAAE,KAAKA;IAFW,CAAd,EAGlBN,kBAHkB,CAArB;IAKA,IAAMY,iBAAiB,GAAG,CACxB,iBADwB,EAExB,iBAFwB,EAGxBC,MAHwB,CAGjB,UAACD,iBAAD,EAAoBE,cAApB,EAAkC;MACzC,IAAIN,KAAI,CAACM,cAAD,CAAJ,KAAyBd,kBAAkB,CAACc,cAAD,CAA/C,EAAiE;QAC/DN,KAAI,CAACM,cAAD,CAAJ,GAAuBd,kBAAkB,CAACc,cAAD,CAAzC;QACAF,iBAAiB,GAAG,IAApB;MACD;;MACD,OAAOA,iBAAP;IACD,CATyB,EASvB,KATuB,CAA1B;;IAWA,IAAIA,iBAAJ,EAAuB;MACrB,KAAKG,IAAL,CAAU,SAAV;IACD;EACF,CApBD;;EAqBF;AAAC,CAlED,CAAqClB,YAArC;AAoEA;;;;;;AAKAmB,MAAM,CAACC,OAAP,GAAiBN,sBAAjB","names":["EventEmitter","require","__extends","encodingParameters","adaptiveSimulcast","_super","Object","assign","maxAudioBitrate","maxVideoBitrate","defineProperties","_this","value","writable","EncodingParametersImpl","shouldEmitChanged","reduce","maxKindBitrate","emit","module","exports"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/encodingparameters.js"],"sourcesContent":["'use strict';\n\nconst EventEmitter = require('events').EventEmitter;\n\n/**\n * {@link EncodingParametersImpl} represents an object which notifies its\n * listeners of any changes in the values of its properties.\n * @extends EventEmitter\n * @implements EncodingParameters\n * @emits EncodingParametersImpl#changed\n * @property {?number} maxAudioBitrate\n * @property {?number} maxVideoBitrate\n */\nclass EncodingParametersImpl extends EventEmitter {\n  /**\n   * Construct an {@link EncodingParametersImpl}.\n   * @param {EncodingParamters} encodingParameters - Initial {@link EncodingParameters}\n   * @param {Boolean} adaptiveSimulcast - true if adaptive simulcast was enabled by connect options.\n   */\n  constructor(encodingParameters, adaptiveSimulcast) {\n    super();\n\n    encodingParameters = Object.assign({\n      maxAudioBitrate: null,\n      maxVideoBitrate: null\n    }, encodingParameters);\n\n    Object.defineProperties(this, {\n      maxAudioBitrate: {\n        value: encodingParameters.maxAudioBitrate,\n        writable: true\n      },\n      maxVideoBitrate: {\n        value: encodingParameters.maxVideoBitrate,\n        writable: true\n      },\n      adaptiveSimulcast: {\n        value: adaptiveSimulcast\n      }\n    });\n  }\n\n  /**\n   * Returns the bitrate values in an {@link EncodingParameters}.\n   * @returns {EncodingParameters}\n   */\n  toJSON() {\n    return {\n      maxAudioBitrate: this.maxAudioBitrate,\n      maxVideoBitrate: this.maxVideoBitrate\n    };\n  }\n\n  /**\n   * Update the bitrate values with those in the given {@link EncodingParameters}.\n   * @param {EncodingParameters} encodingParameters - The new {@link EncodingParameters}\n   * @fires EncodingParametersImpl#changed\n   */\n  update(encodingParameters) {\n    encodingParameters = Object.assign({\n      maxAudioBitrate: this.maxAudioBitrate,\n      maxVideoBitrate: this.maxVideoBitrate\n    }, encodingParameters);\n\n    const shouldEmitChanged = [\n      'maxAudioBitrate',\n      'maxVideoBitrate'\n    ].reduce((shouldEmitChanged, maxKindBitrate) => {\n      if (this[maxKindBitrate] !== encodingParameters[maxKindBitrate]) {\n        this[maxKindBitrate] = encodingParameters[maxKindBitrate];\n        shouldEmitChanged = true;\n      }\n      return shouldEmitChanged;\n    }, false);\n\n    if (shouldEmitChanged) {\n      this.emit('changed');\n    }\n  }\n}\n\n/**\n * At least one of the {@link EncodingParametersImpl}'s bitrate values changed.\n * @event EncodingParametersImpl#changed\n */\n\nmodule.exports = EncodingParametersImpl;\n"]},"metadata":{},"sourceType":"script"}