{"ast":null,"code":"'use strict';\n\nvar defer = require('./').defer;\n/**\n * An {@link AsyncVar} is an \"asynchronous variable\" which may or may not\n * contain a value of some type T. You can put a value into the {@link AsyncVar}\n * with {@link AsyncVar#put}. Callers can take a value out of the\n * {@link AsyncVar} by queueing up with {@link AsyncVar#take}. N calls to\n * {@link AsyncVar#take} require N calls to {@link AsyncVar#put} to resolve, and\n * they resolve in order.\n */\n\n\nvar AsyncVar =\n/** @class */\nfunction () {\n  /**\n   * Construct an {@link AsyncVar}.\n   */\n  function AsyncVar() {\n    Object.defineProperties(this, {\n      _deferreds: {\n        value: []\n      },\n      _hasValue: {\n        value: false,\n        writable: true\n      },\n      _value: {\n        value: null,\n        writable: true\n      }\n    });\n  }\n  /**\n   * Put a value into the {@link AsyncVar}.\n   * @param {T} value\n   * @returns {this}\n   */\n\n\n  AsyncVar.prototype.put = function (value) {\n    this._hasValue = true;\n    this._value = value;\n\n    var deferred = this._deferreds.shift();\n\n    if (deferred) {\n      deferred.resolve(value);\n    }\n\n    return this;\n  };\n  /**\n   * Take the value out of the {@link AsyncVar}.\n   * @returns {Promise<T>}\n   */\n\n\n  AsyncVar.prototype.take = function () {\n    var _this = this;\n\n    if (this._hasValue && !this._deferreds.length) {\n      this._hasValue = false;\n      return Promise.resolve(this._value);\n    }\n\n    var deferred = defer();\n\n    this._deferreds.push(deferred);\n\n    return deferred.promise.then(function (value) {\n      _this._hasValue = false;\n      return value;\n    });\n  };\n\n  return AsyncVar;\n}();\n\nmodule.exports = AsyncVar;","map":{"version":3,"mappings":"AAAA;;AAEQ,SAAK,GAAKA,OAAO,CAAC,IAAD,CAAP,CAAaC,KAAvB;AAER;;;;;;;;;;AAQA;AAAA;AAAA;EACE;;;EAGA;IACEC,MAAM,CAACC,gBAAP,CAAwB,IAAxB,EAA8B;MAC5BC,UAAU,EAAE;QACVC,KAAK,EAAE;MADG,CADgB;MAI5BC,SAAS,EAAE;QACTD,KAAK,EAAE,KADE;QAETE,QAAQ,EAAE;MAFD,CAJiB;MAQ5BC,MAAM,EAAE;QACNH,KAAK,EAAE,IADD;QAENE,QAAQ,EAAE;MAFJ;IARoB,CAA9B;EAaD;EAED;;;;;;;EAKAE,mCAAIJ,KAAJ,EAAS;IACP,KAAKC,SAAL,GAAiB,IAAjB;IACA,KAAKE,MAAL,GAAcH,KAAd;;IACA,IAAMK,QAAQ,GAAG,KAAKN,UAAL,CAAgBO,KAAhB,EAAjB;;IACA,IAAID,QAAJ,EAAc;MACZA,QAAQ,CAACE,OAAT,CAAiBP,KAAjB;IACD;;IACD,OAAO,IAAP;EACD,CARD;EAUA;;;;;;EAIAI;IAAA;;IACE,IAAI,KAAKH,SAAL,IAAkB,CAAC,KAAKF,UAAL,CAAgBS,MAAvC,EAA+C;MAC7C,KAAKP,SAAL,GAAiB,KAAjB;MACA,OAAOQ,OAAO,CAACF,OAAR,CAAgB,KAAKJ,MAArB,CAAP;IACD;;IACD,IAAME,QAAQ,GAAGT,KAAK,EAAtB;;IACA,KAAKG,UAAL,CAAgBW,IAAhB,CAAqBL,QAArB;;IACA,OAAOA,QAAQ,CAACM,OAAT,CAAiBC,IAAjB,CAAsB,iBAAK;MAChCC,KAAI,CAACZ,SAAL,GAAiB,KAAjB;MACA,OAAOD,KAAP;IACD,CAHM,CAAP;EAID,CAXD;;EAYF;AAAC,CAnDD;;AAqDAc,MAAM,CAACC,OAAP,GAAiBX,QAAjB","names":["require","defer","Object","defineProperties","_deferreds","value","_hasValue","writable","_value","AsyncVar","deferred","shift","resolve","length","Promise","push","promise","then","_this","module","exports"],"sources":["/home/samliu/repos/ieee/tp-robot/node_modules/twilio-video/lib/util/asyncvar.js"],"sourcesContent":["'use strict';\n\nconst { defer } = require('./');\n\n/**\n * An {@link AsyncVar} is an \"asynchronous variable\" which may or may not\n * contain a value of some type T. You can put a value into the {@link AsyncVar}\n * with {@link AsyncVar#put}. Callers can take a value out of the\n * {@link AsyncVar} by queueing up with {@link AsyncVar#take}. N calls to\n * {@link AsyncVar#take} require N calls to {@link AsyncVar#put} to resolve, and\n * they resolve in order.\n */\nclass AsyncVar {\n  /**\n   * Construct an {@link AsyncVar}.\n   */\n  constructor() {\n    Object.defineProperties(this, {\n      _deferreds: {\n        value: []\n      },\n      _hasValue: {\n        value: false,\n        writable: true\n      },\n      _value: {\n        value: null,\n        writable: true\n      }\n    });\n  }\n\n  /**\n   * Put a value into the {@link AsyncVar}.\n   * @param {T} value\n   * @returns {this}\n   */\n  put(value) {\n    this._hasValue = true;\n    this._value = value;\n    const deferred = this._deferreds.shift();\n    if (deferred) {\n      deferred.resolve(value);\n    }\n    return this;\n  }\n\n  /**\n   * Take the value out of the {@link AsyncVar}.\n   * @returns {Promise<T>}\n   */\n  take() {\n    if (this._hasValue && !this._deferreds.length) {\n      this._hasValue = false;\n      return Promise.resolve(this._value);\n    }\n    const deferred = defer();\n    this._deferreds.push(deferred);\n    return deferred.promise.then(value => {\n      this._hasValue = false;\n      return value;\n    });\n  }\n}\n\nmodule.exports = AsyncVar;\n"]},"metadata":{},"sourceType":"script"}