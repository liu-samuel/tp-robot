{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar average = require('./average');\n\nvar SenderOrReceiverReport = require('./senderorreceiverreport');\n\nvar sum = require('./sum');\n/**\n * @interface ReceiverSummary\n * @property {number} bitrate\n * @property {number} fractionLost - 0–1\n * @property {number} [jitter] - s (undefined for video tracks in Chrome)\n */\n\n/**\n * @extends SenderOrReceiverReport\n * @property {number} deltaPacketsLost\n * @property {number} deltaPacketsReceived\n * @property {number} [fractionLost] - 0–1 (undefined in Firefox)\n * @property {number} [jitter] - s (undefined for video tracks in Chrome)\n * @property {number} phonyPacketsLost - 0–1\n */\n\n\nvar ReceiverReport =\n/** @class */\nfunction (_super) {\n  __extends(ReceiverReport, _super);\n  /**\n   * @param {StatsId} id\n   * @param {TrackId} trackId\n   * @param {number} bitrate - bps\n   * @param {number} deltaPacketsLost\n   * @param {number} deltaPacketsReceived\n   * @param {number} [fractionLost] - 0–1 (undefined in Firefox)\n   * @param {number} [jitter] - s (undefined for video tracks in Chrome)\n   */\n\n\n  function ReceiverReport(id, trackId, bitrate, deltaPacketsLost, deltaPacketsReceived, fractionLost, jitter) {\n    var _this = _super.call(this, id, trackId, bitrate) || this;\n\n    var phonyFractionLost = deltaPacketsReceived > 0 ? deltaPacketsLost / deltaPacketsReceived : 0;\n    Object.defineProperties(_this, {\n      deltaPacketsLost: {\n        enumerable: true,\n        value: deltaPacketsLost\n      },\n      deltaPacketsReceived: {\n        enumerable: true,\n        value: deltaPacketsReceived\n      },\n      fractionLost: {\n        enumerable: true,\n        value: fractionLost\n      },\n      jitter: {\n        enumerable: true,\n        value: jitter\n      },\n      phonyFractionLost: {\n        enumerable: true,\n        value: phonyFractionLost\n      }\n    });\n    return _this;\n  }\n  /**\n   * Create a {@link ReceiverReport}.\n   * @param {string} trackId\n   * @param {RTCStats} olderStats\n   * @param {RTCStats} newerStats\n   * @returns {ReceiverReport}\n   */\n\n\n  ReceiverReport.of = function (trackId, olderStats, newerStats) {\n    if (olderStats.id !== newerStats.id) {\n      throw new Error('RTCStats IDs must match');\n    }\n\n    var secondsElapsed = (newerStats.timestamp - olderStats.timestamp) / 1000;\n    var deltaBytesReceived = newerStats.bytesReceived - olderStats.bytesReceived;\n    var bitrate = secondsElapsed > 0 ? deltaBytesReceived / secondsElapsed * 8 : 0;\n    var deltaPacketsLost = Math.max(newerStats.packetsLost - olderStats.packetsLost, 0);\n    var deltaPacketsReceived = newerStats.packetsReceived - olderStats.packetsReceived;\n    var fractionLost = newerStats.fractionLost,\n        jitter = newerStats.jitter;\n    return new ReceiverReport(olderStats.id, trackId, bitrate, deltaPacketsLost, deltaPacketsReceived, fractionLost, jitter);\n  };\n  /**\n   * Summarize {@link ReceiverReport}s by summing and averaging their values.\n   * @param {Array<ReceiverReport>} reports\n   * @returns {ReceiverSummary}\n   */\n\n\n  ReceiverReport.summarize = function (reports) {\n    var summaries = reports.map(function (report) {\n      return report.summarize();\n    });\n    var bitrate = sum(summaries.map(function (summary) {\n      return summary.bitrate;\n    }));\n    var fractionLost = average(summaries.map(function (summary) {\n      return summary.fractionLost;\n    }));\n    var jitter = average(summaries.map(function (summary) {\n      return summary.jitter;\n    }));\n    return {\n      bitrate: bitrate,\n      fractionLost: fractionLost,\n      jitter: jitter\n    };\n  };\n  /**\n   * Summarize the {@link ReceiveReport}.\n   * @returns {ReceiverSummary}\n   */\n\n\n  ReceiverReport.prototype.summarize = function () {\n    return {\n      bitrate: this.bitrate,\n      fractionLost: typeof this.fractionLost === 'number' ? this.fractionLost : this.phonyFractionLost,\n      jitter: this.jitter\n    };\n  };\n\n  return ReceiverReport;\n}(SenderOrReceiverReport);\n\nmodule.exports = ReceiverReport;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAMC,sBAAsB,GAAGD,OAAO,CAAC,0BAAD,CAAtC;;AACA,IAAME,GAAG,GAAGF,OAAO,CAAC,OAAD,CAAnB;AAEA;;;;;;;AAOA;;;;;;;;;;AAQA;AAAA;AAAA;EAA6BG;EAC3B;;;;;;;;;;;EASA,wBAAYC,EAAZ,EAAgBC,OAAhB,EAAyBC,OAAzB,EAAkCC,gBAAlC,EAAoDC,oBAApD,EAA0EC,YAA1E,EAAwFC,MAAxF,EAA8F;IAA9F,YACEC,kBAAMP,EAAN,EAAUC,OAAV,EAAmBC,OAAnB,KAA2B,IAD7B;;IAEE,IAAMM,iBAAiB,GAAGJ,oBAAoB,GAAG,CAAvB,GACtBD,gBAAgB,GAAGC,oBADG,GAEtB,CAFJ;IAGAK,MAAM,CAACC,gBAAP,CAAwBC,KAAxB,EAA8B;MAC5BR,gBAAgB,EAAE;QAChBS,UAAU,EAAE,IADI;QAEhBC,KAAK,EAAEV;MAFS,CADU;MAK5BC,oBAAoB,EAAE;QACpBQ,UAAU,EAAE,IADQ;QAEpBC,KAAK,EAAET;MAFa,CALM;MAS5BC,YAAY,EAAE;QACZO,UAAU,EAAE,IADA;QAEZC,KAAK,EAAER;MAFK,CATc;MAa5BC,MAAM,EAAE;QACNM,UAAU,EAAE,IADN;QAENC,KAAK,EAAEP;MAFD,CAboB;MAiB5BE,iBAAiB,EAAE;QACjBI,UAAU,EAAE,IADK;QAEjBC,KAAK,EAAEL;MAFU;IAjBS,CAA9B;;EAsBD;EAED;;;;;;;;;EAOOM,oBAAP,UAAUb,OAAV,EAAmBc,UAAnB,EAA+BC,UAA/B,EAAyC;IACvC,IAAID,UAAU,CAACf,EAAX,KAAkBgB,UAAU,CAAChB,EAAjC,EAAqC;MACnC,MAAM,IAAIiB,KAAJ,CAAU,yBAAV,CAAN;IACD;;IACD,IAAMC,cAAc,GAAG,CAACF,UAAU,CAACG,SAAX,GAAuBJ,UAAU,CAACI,SAAnC,IAAgD,IAAvE;IACA,IAAMC,kBAAkB,GAAGJ,UAAU,CAACK,aAAX,GAA2BN,UAAU,CAACM,aAAjE;IACA,IAAMnB,OAAO,GAAGgB,cAAc,GAAG,CAAjB,GACXE,kBAAkB,GAAGF,cAAtB,GAAwC,CAD5B,GAEZ,CAFJ;IAGA,IAAMf,gBAAgB,GAAGmB,IAAI,CAACC,GAAL,CAASP,UAAU,CAACQ,WAAX,GAAyBT,UAAU,CAACS,WAA7C,EAA0D,CAA1D,CAAzB;IACA,IAAMpB,oBAAoB,GAAGY,UAAU,CAACS,eAAX,GAA6BV,UAAU,CAACU,eAArE;IACQ,gBAAY,GAAaT,UAAU,aAAnC;IAAA,IAAcV,MAAM,GAAKU,UAAU,OAAnC;IACR,OAAO,IAAIF,cAAJ,CAAmBC,UAAU,CAACf,EAA9B,EAAkCC,OAAlC,EAA2CC,OAA3C,EAAoDC,gBAApD,EAAsEC,oBAAtE,EAA4FC,YAA5F,EAA0GC,MAA1G,CAAP;EACD,CAbM;EAeP;;;;;;;EAKOQ,2BAAP,UAAiBY,OAAjB,EAAwB;IACtB,IAAMC,SAAS,GAAGD,OAAO,CAACE,GAAR,CAAY,kBAAM;MAAI,aAAM,CAACC,SAAP;IAAkB,CAAxC,CAAlB;IACA,IAAM3B,OAAO,GAAGJ,GAAG,CAAC6B,SAAS,CAACC,GAAV,CAAc,mBAAO;MAAI,cAAO,CAAC1B,OAAR;IAAe,CAAxC,CAAD,CAAnB;IACA,IAAMG,YAAY,GAAGV,OAAO,CAACgC,SAAS,CAACC,GAAV,CAAc,mBAAO;MAAI,cAAO,CAACvB,YAAR;IAAoB,CAA7C,CAAD,CAA5B;IACA,IAAMC,MAAM,GAAGX,OAAO,CAACgC,SAAS,CAACC,GAAV,CAAc,mBAAO;MAAI,cAAO,CAACtB,MAAR;IAAc,CAAvC,CAAD,CAAtB;IACA,OAAO;MACLJ,OAAO,SADF;MAELG,YAAY,cAFP;MAGLC,MAAM;IAHD,CAAP;EAKD,CAVM;EAYP;;;;;;EAIAQ;IACE,OAAO;MACLZ,OAAO,EAAE,KAAKA,OADT;MAELG,YAAY,EAAE,OAAO,KAAKA,YAAZ,KAA6B,QAA7B,GAAwC,KAAKA,YAA7C,GAA4D,KAAKG,iBAF1E;MAGLF,MAAM,EAAE,KAAKA;IAHR,CAAP;EAKD,CAND;;EAOF;AAAC,CAzFD,CAA6BT,sBAA7B;;AA2FAiC,MAAM,CAACC,OAAP,GAAiBjB,cAAjB","names":["average","require","SenderOrReceiverReport","sum","__extends","id","trackId","bitrate","deltaPacketsLost","deltaPacketsReceived","fractionLost","jitter","_super","phonyFractionLost","Object","defineProperties","_this","enumerable","value","ReceiverReport","olderStats","newerStats","Error","secondsElapsed","timestamp","deltaBytesReceived","bytesReceived","Math","max","packetsLost","packetsReceived","reports","summaries","map","summarize","module","exports"],"sources":["/home/samliu/repos/ieee/tp-robot/node_modules/twilio-video/lib/stats/receiverreport.js"],"sourcesContent":["'use strict';\n\nconst average = require('./average');\nconst SenderOrReceiverReport = require('./senderorreceiverreport');\nconst sum = require('./sum');\n\n/**\n * @interface ReceiverSummary\n * @property {number} bitrate\n * @property {number} fractionLost - 0–1\n * @property {number} [jitter] - s (undefined for video tracks in Chrome)\n */\n\n/**\n * @extends SenderOrReceiverReport\n * @property {number} deltaPacketsLost\n * @property {number} deltaPacketsReceived\n * @property {number} [fractionLost] - 0–1 (undefined in Firefox)\n * @property {number} [jitter] - s (undefined for video tracks in Chrome)\n * @property {number} phonyPacketsLost - 0–1\n */\nclass ReceiverReport extends SenderOrReceiverReport {\n  /**\n   * @param {StatsId} id\n   * @param {TrackId} trackId\n   * @param {number} bitrate - bps\n   * @param {number} deltaPacketsLost\n   * @param {number} deltaPacketsReceived\n   * @param {number} [fractionLost] - 0–1 (undefined in Firefox)\n   * @param {number} [jitter] - s (undefined for video tracks in Chrome)\n   */\n  constructor(id, trackId, bitrate, deltaPacketsLost, deltaPacketsReceived, fractionLost, jitter) {\n    super(id, trackId, bitrate);\n    const phonyFractionLost = deltaPacketsReceived > 0\n      ? deltaPacketsLost / deltaPacketsReceived\n      : 0;\n    Object.defineProperties(this, {\n      deltaPacketsLost: {\n        enumerable: true,\n        value: deltaPacketsLost\n      },\n      deltaPacketsReceived: {\n        enumerable: true,\n        value: deltaPacketsReceived\n      },\n      fractionLost: {\n        enumerable: true,\n        value: fractionLost\n      },\n      jitter: {\n        enumerable: true,\n        value: jitter\n      },\n      phonyFractionLost: {\n        enumerable: true,\n        value: phonyFractionLost\n      }\n    });\n  }\n\n  /**\n   * Create a {@link ReceiverReport}.\n   * @param {string} trackId\n   * @param {RTCStats} olderStats\n   * @param {RTCStats} newerStats\n   * @returns {ReceiverReport}\n   */\n  static of(trackId, olderStats, newerStats) {\n    if (olderStats.id !== newerStats.id) {\n      throw new Error('RTCStats IDs must match');\n    }\n    const secondsElapsed = (newerStats.timestamp - olderStats.timestamp) / 1000;\n    const deltaBytesReceived = newerStats.bytesReceived - olderStats.bytesReceived;\n    const bitrate = secondsElapsed > 0\n      ? (deltaBytesReceived / secondsElapsed) * 8\n      : 0;\n    const deltaPacketsLost = Math.max(newerStats.packetsLost - olderStats.packetsLost, 0);\n    const deltaPacketsReceived = newerStats.packetsReceived - olderStats.packetsReceived;\n    const { fractionLost, jitter } = newerStats;\n    return new ReceiverReport(olderStats.id, trackId, bitrate, deltaPacketsLost, deltaPacketsReceived, fractionLost, jitter);\n  }\n\n  /**\n   * Summarize {@link ReceiverReport}s by summing and averaging their values.\n   * @param {Array<ReceiverReport>} reports\n   * @returns {ReceiverSummary}\n   */\n  static summarize(reports) {\n    const summaries = reports.map(report => report.summarize());\n    const bitrate = sum(summaries.map(summary => summary.bitrate));\n    const fractionLost = average(summaries.map(summary => summary.fractionLost));\n    const jitter = average(summaries.map(summary => summary.jitter));\n    return {\n      bitrate,\n      fractionLost,\n      jitter\n    };\n  }\n\n  /**\n   * Summarize the {@link ReceiveReport}.\n   * @returns {ReceiverSummary}\n   */\n  summarize() {\n    return {\n      bitrate: this.bitrate,\n      fractionLost: typeof this.fractionLost === 'number' ? this.fractionLost : this.phonyFractionLost,\n      jitter: this.jitter\n    };\n  }\n}\n\nmodule.exports = ReceiverReport;\n"]},"metadata":{},"sourceType":"script"}