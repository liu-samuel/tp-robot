{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar MediaSignaling = require('./mediasignaling');\n\nvar AsyncVar = require('../../util/asyncvar');\n\nvar Timeout = require('../../util/timeout');\n\nvar NETWORK_QUALITY_RESPONSE_TIME_MS = 5000;\n/**\n * @interface MediaSignalingTransport\n * @property {function(object): boolean} send\n * @emits MediaSignalingTransport#message\n */\n\n/**\n * The {@link MediaSignalingTransport} received a message.\n * @event MediaSignalingTransport#message\n * @param {object} message\n */\n\n/**\n * @interface LatencyStats\n * @property {number} jitter\n * @property {number} rtt\n * @property {number} level\n */\n\n/**\n * @interface FractionLostStats\n * @property {number} fractionLost\n * @property {number} level\n */\n\n/**\n * @interface BandwidthStats\n * @property {number} actual\n * @property {number} available\n * @property {number} level\n */\n\n/**\n * @interface SendOrRecvStats\n * @property {BandwidthStats} bandwidth\n * @property {FractionLostStats} fractionLost\n * @property {LatencyStats} latency\n */\n\n/**\n * @interface MediaLevels\n * @property {number} send\n * @property {SendOrRecvStats} sendStats\n * @property {number} recv\n * @property {SendOrRecvStats} recvStats\n */\n\n/**\n * @interface NetworkQualityLevels\n * @property {number} level\n * @property {MediaLevels} audio\n * @property {MediaLevels} video\n */\n\n/**\n * @typedef {PeerConnectionSummary} NetworkQualityInputs\n */\n\n/**\n * @classdesc The {@link NetworkQualitySignaling} class allows submitting\n *   {@link NetworkQualityInputs} for computing {@link NetworkQualityLevel}. It\n *   does so by sending and receiving messages over a\n *   {@link MediaSignalingTransport}. The exact transport used depends on the\n *   topology of the {@link Room} that {@link NetworkQualitySignaling} is being\n *   used within: for P2P Rooms, we re-use the {@link TransportV2}; and for\n *   Group Rooms, we use a {@link DataTransport}.\n * @emits NetworkQualitySignaling#updated\n */\n\nvar NetworkQualitySignaling =\n/** @class */\nfunction (_super) {\n  __extends(NetworkQualitySignaling, _super);\n  /**\n   * Construct a {@link NetworkQualitySignaling}.\n   * @param {Promise<DataTrackReceiver>} getReceiver\n   * @param {NetworkQualityConfigurationImpl} networkQualityConfiguration\n   */\n\n\n  function NetworkQualitySignaling(getReceiver, networkQualityConfiguration, options) {\n    var _this = _super.call(this, getReceiver, 'network_quality', options) || this;\n\n    Object.defineProperties(_this, {\n      _level: {\n        value: null,\n        writable: true\n      },\n      _levels: {\n        value: null,\n        writable: true\n      },\n      _remoteLevels: {\n        value: new Map(),\n        writable: true\n      },\n      _networkQualityInputs: {\n        value: new AsyncVar()\n      },\n      _resendTimer: {\n        value: new Timeout(function () {\n          // and schedule next timer at x1.5 the delay..\n          _this._resendTimer.setDelay(_this._resendTimer.delay * 1.5);\n\n          _this._sendNetworkQualityInputs();\n        }, NETWORK_QUALITY_RESPONSE_TIME_MS, false)\n      },\n      _networkQualityReportLevels: {\n        get: function get() {\n          return {\n            reportLevel: networkQualityConfiguration.local,\n            remoteReportLevel: networkQualityConfiguration.remote\n          };\n        }\n      }\n    });\n\n    _this.on('ready', function (transport) {\n      transport.on('message', function (message) {\n        _this._log.debug('Incoming: ', message);\n\n        switch (message.type) {\n          case 'network_quality':\n            _this._handleNetworkQualityMessage(message);\n\n            break;\n\n          default:\n            break;\n        }\n      });\n    });\n\n    _this._sendNetworkQualityInputs();\n\n    return _this;\n  }\n\n  Object.defineProperty(NetworkQualitySignaling.prototype, \"level\", {\n    /**\n     * Get the current {@link NetworkQualityLevel}, if any.\n     * @returns {?NetworkQualityLevel} level - initially null\n     */\n    get: function get() {\n      return this._level;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NetworkQualitySignaling.prototype, \"levels\", {\n    /**\n     * Get the current {@link NetworkQualityLevels}, if any.\n     * @returns {?NetworkQualityLevels} levels - initially null\n     */\n    get: function get() {\n      return this._levels;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NetworkQualitySignaling.prototype, \"remoteLevels\", {\n    /**\n     * Get the current {@link NetworkQualityLevels} of remote participants, if any.\n     * @returns {Map<String, NetworkQualityLevels>} remoteLevels\n     */\n    get: function get() {\n      return this._remoteLevels;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Check to see if the {@link NetworkQualityLevel} is new, and raise an\n   * event if necessary.\n   * @private\n   * @param {object} message\n   * @returns {void}\n   */\n\n  NetworkQualitySignaling.prototype._handleNetworkQualityMessage = function (message) {\n    var _this = this;\n\n    var updated = false;\n    var level = null;\n    var local = message ? message.local : null;\n\n    if (typeof local === 'number') {\n      // NOTE(mroberts): In prod, we plan to only send the level.\n      level = local;\n      this._levels = null;\n    } else if (typeof local === 'object' && local) {\n      // NOTE(mroberts): In dev, we plan to send the decomposed levels. An early\n      // VMS version does not compute `level` for us, so we fallback to taking\n      // the minimum ourselves.\n      this._levels = local;\n      level = typeof local.level === 'number' ? local.level : Math.min(local.audio.send, local.audio.recv, local.video.send, local.video.recv);\n    }\n\n    if (level !== null && this.level !== level) {\n      this._level = level;\n      updated = true;\n    }\n\n    this._remoteLevels = message && message.remotes ? message.remotes.reduce(function (levels, obj) {\n      var oldObj = _this._remoteLevels.get(obj.sid) || {};\n\n      if (oldObj.level !== obj.level) {\n        updated = true;\n      }\n\n      return levels.set(obj.sid, obj);\n    }, new Map()) : this._remoteLevels;\n\n    if (updated) {\n      this.emit('updated');\n    } // score is received. so reset the timer to default timeout.\n\n\n    this._resendTimer.setDelay(NETWORK_QUALITY_RESPONSE_TIME_MS); // timer is cleared only while we are sending inputs.\n    // if we are already sending inputs do not send them again.\n\n\n    if (this._resendTimer.isSet) {\n      setTimeout(function () {\n        return _this._sendNetworkQualityInputs();\n      }, 1000);\n    }\n  };\n  /**\n   * Start sending {@link NetworkQualityInputs}.\n   * @private\n   * @returns {Promise<void>}\n   */\n\n\n  NetworkQualitySignaling.prototype._sendNetworkQualityInputs = function () {\n    var _this = this;\n\n    this._resendTimer.clear();\n\n    return this._networkQualityInputs.take().then(function (networkQualityInputs) {\n      if (_this._transport) {\n        _this._transport.publish(createNetworkQualityInputsMessage(networkQualityInputs, _this._networkQualityReportLevels));\n      }\n    }).finally(function () {\n      _this._resendTimer.start();\n    });\n  };\n  /**\n   * Put {@link NetworkQualityInputs} to be used for computing\n   * {@link NetworkQualityLevel}.\n   * @param {NetworkQualityInputs} networkQualityInputs\n   * @returns {void}\n   */\n\n\n  NetworkQualitySignaling.prototype.put = function (networkQualityInputs) {\n    this._networkQualityInputs.put(networkQualityInputs);\n  };\n\n  return NetworkQualitySignaling;\n}(MediaSignaling);\n/**\n * The {@link NetworkQualityLevel} changed.\n * @event NetworkQualitySignaling#updated\n */\n\n/**\n * @typedef {object} NetworkQualityReportLevels\n * @param {number} reportLevel\n * @param {number} remoteReportLevel\n */\n\n/**\n * @param {NetworkQualityInputs} networkQualityInputs\n * @param {NetworkQualityReportLevels} networkQualityReportLevels\n * @returns {object} message\n */\n\n\nfunction createNetworkQualityInputsMessage(networkQualityInputs, networkQualityReportLevels) {\n  return Object.assign({\n    type: 'network_quality'\n  }, networkQualityInputs, networkQualityReportLevels);\n}\n\nmodule.exports = NetworkQualitySignaling;","map":{"version":3,"mappings":"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","names":["MediaSignaling","require","AsyncVar","Timeout","NETWORK_QUALITY_RESPONSE_TIME_MS","__extends","getReceiver","networkQualityConfiguration","options","_super","Object","defineProperties","_this","_level","value","writable","_levels","_remoteLevels","Map","_networkQualityInputs","_resendTimer","setDelay","delay","_sendNetworkQualityInputs","_networkQualityReportLevels","get","reportLevel","local","remoteReportLevel","remote","on","transport","_log","debug","message","type","_handleNetworkQualityMessage","NetworkQualitySignaling","updated","level","Math","min","audio","send","recv","video","remotes","reduce","levels","obj","oldObj","sid","set","emit","isSet","setTimeout","clear","take","then","_transport","publish","createNetworkQualityInputsMessage","networkQualityInputs","finally","start","put","networkQualityReportLevels","assign","module","exports"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/signaling/v2/networkqualitysignaling.js"],"sourcesContent":["'use strict';\n\nconst MediaSignaling = require('./mediasignaling');\nconst AsyncVar = require('../../util/asyncvar');\nconst Timeout = require('../../util/timeout');\n\nconst NETWORK_QUALITY_RESPONSE_TIME_MS = 5000;\n\n/**\n * @interface MediaSignalingTransport\n * @property {function(object): boolean} send\n * @emits MediaSignalingTransport#message\n */\n\n/**\n * The {@link MediaSignalingTransport} received a message.\n * @event MediaSignalingTransport#message\n * @param {object} message\n */\n\n/**\n * @interface LatencyStats\n * @property {number} jitter\n * @property {number} rtt\n * @property {number} level\n */\n\n/**\n * @interface FractionLostStats\n * @property {number} fractionLost\n * @property {number} level\n */\n\n/**\n * @interface BandwidthStats\n * @property {number} actual\n * @property {number} available\n * @property {number} level\n */\n\n/**\n * @interface SendOrRecvStats\n * @property {BandwidthStats} bandwidth\n * @property {FractionLostStats} fractionLost\n * @property {LatencyStats} latency\n */\n\n/**\n * @interface MediaLevels\n * @property {number} send\n * @property {SendOrRecvStats} sendStats\n * @property {number} recv\n * @property {SendOrRecvStats} recvStats\n */\n\n/**\n * @interface NetworkQualityLevels\n * @property {number} level\n * @property {MediaLevels} audio\n * @property {MediaLevels} video\n */\n\n/**\n * @typedef {PeerConnectionSummary} NetworkQualityInputs\n */\n\n/**\n * @classdesc The {@link NetworkQualitySignaling} class allows submitting\n *   {@link NetworkQualityInputs} for computing {@link NetworkQualityLevel}. It\n *   does so by sending and receiving messages over a\n *   {@link MediaSignalingTransport}. The exact transport used depends on the\n *   topology of the {@link Room} that {@link NetworkQualitySignaling} is being\n *   used within: for P2P Rooms, we re-use the {@link TransportV2}; and for\n *   Group Rooms, we use a {@link DataTransport}.\n * @emits NetworkQualitySignaling#updated\n */\nclass NetworkQualitySignaling extends MediaSignaling {\n  /**\n   * Construct a {@link NetworkQualitySignaling}.\n   * @param {Promise<DataTrackReceiver>} getReceiver\n   * @param {NetworkQualityConfigurationImpl} networkQualityConfiguration\n   */\n  constructor(getReceiver, networkQualityConfiguration, options) {\n    super(getReceiver, 'network_quality', options);\n\n    Object.defineProperties(this, {\n      _level: {\n        value: null,\n        writable: true\n      },\n      _levels: {\n        value: null,\n        writable: true\n      },\n      _remoteLevels: {\n        value: new Map(),\n        writable: true\n      },\n      _networkQualityInputs: {\n        value: new AsyncVar()\n      },\n      _resendTimer: {\n        value: new Timeout(() => {\n          // and schedule next timer at x1.5 the delay..\n          this._resendTimer.setDelay(this._resendTimer.delay * 1.5);\n          this._sendNetworkQualityInputs();\n        }, NETWORK_QUALITY_RESPONSE_TIME_MS, false),\n      },\n      _networkQualityReportLevels: {\n        get() {\n          return {\n            reportLevel: networkQualityConfiguration.local,\n            remoteReportLevel: networkQualityConfiguration.remote\n          };\n        }\n      }\n    });\n\n    this.on('ready', transport => {\n      transport.on('message', message => {\n        this._log.debug('Incoming: ', message);\n        switch (message.type) {\n          case 'network_quality':\n            this._handleNetworkQualityMessage(message);\n            break;\n          default:\n            break;\n        }\n      });\n    });\n\n    this._sendNetworkQualityInputs();\n  }\n\n  /**\n   * Get the current {@link NetworkQualityLevel}, if any.\n   * @returns {?NetworkQualityLevel} level - initially null\n   */\n  get level() {\n    return this._level;\n  }\n\n  /**\n   * Get the current {@link NetworkQualityLevels}, if any.\n   * @returns {?NetworkQualityLevels} levels - initially null\n   */\n  get levels() {\n    return this._levels;\n  }\n\n  /**\n   * Get the current {@link NetworkQualityLevels} of remote participants, if any.\n   * @returns {Map<String, NetworkQualityLevels>} remoteLevels\n   */\n  get remoteLevels() {\n    return this._remoteLevels;\n  }\n\n  /**\n   * Check to see if the {@link NetworkQualityLevel} is new, and raise an\n   * event if necessary.\n   * @private\n   * @param {object} message\n   * @returns {void}\n   */\n  _handleNetworkQualityMessage(message) {\n    let updated = false;\n    let level = null;\n    const local = message ? message.local : null;\n    if (typeof local === 'number') {\n      // NOTE(mroberts): In prod, we plan to only send the level.\n      level = local;\n      this._levels = null;\n    } else if (typeof local === 'object' && local) {\n      // NOTE(mroberts): In dev, we plan to send the decomposed levels. An early\n      // VMS version does not compute `level` for us, so we fallback to taking\n      // the minimum ourselves.\n      this._levels = local;\n      level = typeof local.level === 'number'\n        ? local.level\n        : Math.min(\n          local.audio.send,\n          local.audio.recv,\n          local.video.send,\n          local.video.recv);\n    }\n    if (level !== null && this.level !== level) {\n      this._level = level;\n      updated = true;\n    }\n    this._remoteLevels = message && message.remotes\n      ? message.remotes.reduce((levels, obj) => {\n        const oldObj = this._remoteLevels.get(obj.sid) || {};\n        if (oldObj.level !== obj.level) {\n          updated = true;\n        }\n        return levels.set(obj.sid, obj);\n      }, new Map())\n      : this._remoteLevels;\n\n    if (updated) {\n      this.emit('updated');\n    }\n\n\n    // score is received. so reset the timer to default timeout.\n    this._resendTimer.setDelay(NETWORK_QUALITY_RESPONSE_TIME_MS);\n\n    // timer is cleared only while we are sending inputs.\n    // if we are already sending inputs do not send them again.\n    if (this._resendTimer.isSet) {\n      setTimeout(() => this._sendNetworkQualityInputs(), 1000);\n    }\n  }\n\n  /**\n   * Start sending {@link NetworkQualityInputs}.\n   * @private\n   * @returns {Promise<void>}\n   */\n  _sendNetworkQualityInputs() {\n    this._resendTimer.clear();\n    return this._networkQualityInputs.take().then(networkQualityInputs => {\n      if (this._transport) {\n        this._transport.publish(\n          createNetworkQualityInputsMessage(networkQualityInputs, this._networkQualityReportLevels));\n      }\n    }).finally(() => {\n      this._resendTimer.start();\n    });\n  }\n\n  /**\n   * Put {@link NetworkQualityInputs} to be used for computing\n   * {@link NetworkQualityLevel}.\n   * @param {NetworkQualityInputs} networkQualityInputs\n   * @returns {void}\n   */\n  put(networkQualityInputs) {\n    this._networkQualityInputs.put(networkQualityInputs);\n  }\n}\n\n/**\n * The {@link NetworkQualityLevel} changed.\n * @event NetworkQualitySignaling#updated\n */\n\n/**\n * @typedef {object} NetworkQualityReportLevels\n * @param {number} reportLevel\n * @param {number} remoteReportLevel\n */\n\n/**\n * @param {NetworkQualityInputs} networkQualityInputs\n * @param {NetworkQualityReportLevels} networkQualityReportLevels\n * @returns {object} message\n */\nfunction createNetworkQualityInputsMessage(networkQualityInputs, networkQualityReportLevels) {\n  return Object.assign(\n    { type: 'network_quality' },\n    networkQualityInputs,\n    networkQualityReportLevels);\n}\n\nmodule.exports = NetworkQualitySignaling;\n"]},"metadata":{},"sourceType":"script"}