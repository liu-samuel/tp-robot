{"ast":null,"code":"'use strict';\n\nvar CancelablePromise = require('./util/cancelablepromise');\n/**\n * Create a {@link CancelablePromise<Room>}.\n * @param {function(function(Array<LocalTrack>): CancelablePromise<RoomSignaling>):\n *   Promise<function(): CancelablePromise<RoomSignaling>>} getLocalTracks\n * @param {function(Array<LocalTrack>): LocalParticipant} createLocalParticipant\n * @param {function(Array<LocalTrack>): CancelablePromise<RoomSignaling>} createRoomSignaling\n * @param {function(LocalParticipant, RoomSignaling): Room} createRoom\n * @returns CancelablePromise<Room>\n */\n\n\nfunction createCancelableRoomPromise(getLocalTracks, createLocalParticipant, createRoomSignaling, createRoom) {\n  var cancelableRoomSignalingPromise;\n  var cancellationError = new Error('Canceled');\n  return new CancelablePromise(function onCreate(resolve, reject, isCanceled) {\n    var localParticipant;\n    getLocalTracks(function getLocalTracksSucceeded(localTracks) {\n      if (isCanceled()) {\n        return CancelablePromise.reject(cancellationError);\n      }\n\n      localParticipant = createLocalParticipant(localTracks);\n      return createRoomSignaling(localParticipant).then(function createRoomSignalingSucceeded(getCancelableRoomSignalingPromise) {\n        if (isCanceled()) {\n          throw cancellationError;\n        }\n\n        cancelableRoomSignalingPromise = getCancelableRoomSignalingPromise();\n        return cancelableRoomSignalingPromise;\n      });\n    }).then(function roomSignalingConnected(roomSignaling) {\n      if (isCanceled()) {\n        roomSignaling.disconnect();\n        throw cancellationError;\n      }\n\n      resolve(createRoom(localParticipant, roomSignaling));\n    }).catch(function onError(error) {\n      reject(error);\n    });\n  }, function onCancel() {\n    if (cancelableRoomSignalingPromise) {\n      cancelableRoomSignalingPromise.cancel();\n    }\n  });\n}\n\nmodule.exports = createCancelableRoomPromise;","map":{"version":3,"mappings":"AAAA;;AAEA,IAAMA,iBAAiB,GAAGC,OAAO,CAAC,0BAAD,CAAjC;AAEA;;;;;;;;;;;AASA,SAASC,2BAAT,CAAqCC,cAArC,EAAqDC,sBAArD,EAA6EC,mBAA7E,EAAkGC,UAAlG,EAA4G;EAC1G,IAAIC,8BAAJ;EACA,IAAMC,iBAAiB,GAAG,IAAIC,KAAJ,CAAU,UAAV,CAA1B;EAEA,OAAO,IAAIT,iBAAJ,CAAsB,SAASU,QAAT,CAAkBC,OAAlB,EAA2BC,MAA3B,EAAmCC,UAAnC,EAA6C;IACxE,IAAIC,gBAAJ;IACAX,cAAc,CAAC,SAASY,uBAAT,CAAiCC,WAAjC,EAA4C;MACzD,IAAIH,UAAU,EAAd,EAAkB;QAChB,OAAOb,iBAAiB,CAACY,MAAlB,CAAyBJ,iBAAzB,CAAP;MACD;;MACDM,gBAAgB,GAAGV,sBAAsB,CAACY,WAAD,CAAzC;MACA,OAAOX,mBAAmB,CAACS,gBAAD,CAAnB,CAAsCG,IAAtC,CAA2C,SAASC,4BAAT,CAAsCC,iCAAtC,EAAuE;QACvH,IAAIN,UAAU,EAAd,EAAkB;UAChB,MAAML,iBAAN;QACD;;QACDD,8BAA8B,GAAGY,iCAAiC,EAAlE;QACA,OAAOZ,8BAAP;MACD,CANM,CAAP;IAOD,CAZa,CAAd,CAYGU,IAZH,CAYQ,SAASG,sBAAT,CAAgCC,aAAhC,EAA6C;MACnD,IAAIR,UAAU,EAAd,EAAkB;QAChBQ,aAAa,CAACC,UAAd;QACA,MAAMd,iBAAN;MACD;;MACDG,OAAO,CAACL,UAAU,CAACQ,gBAAD,EAAmBO,aAAnB,CAAX,CAAP;IACD,CAlBD,EAkBGE,KAlBH,CAkBS,SAASC,OAAT,CAAiBC,KAAjB,EAAsB;MAC7Bb,MAAM,CAACa,KAAD,CAAN;IACD,CApBD;EAqBD,CAvBM,EAuBJ,SAASC,QAAT,GAAiB;IAClB,IAAInB,8BAAJ,EAAoC;MAClCA,8BAA8B,CAACoB,MAA/B;IACD;EACF,CA3BM,CAAP;AA4BD;;AAEDC,MAAM,CAACC,OAAP,GAAiB3B,2BAAjB","names":["CancelablePromise","require","createCancelableRoomPromise","getLocalTracks","createLocalParticipant","createRoomSignaling","createRoom","cancelableRoomSignalingPromise","cancellationError","Error","onCreate","resolve","reject","isCanceled","localParticipant","getLocalTracksSucceeded","localTracks","then","createRoomSignalingSucceeded","getCancelableRoomSignalingPromise","roomSignalingConnected","roomSignaling","disconnect","catch","onError","error","onCancel","cancel","module","exports"],"sources":["/home/samliu/repos/ieee/tp-robot/node_modules/twilio-video/lib/cancelableroompromise.js"],"sourcesContent":["'use strict';\n\nconst CancelablePromise = require('./util/cancelablepromise');\n\n/**\n * Create a {@link CancelablePromise<Room>}.\n * @param {function(function(Array<LocalTrack>): CancelablePromise<RoomSignaling>):\n *   Promise<function(): CancelablePromise<RoomSignaling>>} getLocalTracks\n * @param {function(Array<LocalTrack>): LocalParticipant} createLocalParticipant\n * @param {function(Array<LocalTrack>): CancelablePromise<RoomSignaling>} createRoomSignaling\n * @param {function(LocalParticipant, RoomSignaling): Room} createRoom\n * @returns CancelablePromise<Room>\n */\nfunction createCancelableRoomPromise(getLocalTracks, createLocalParticipant, createRoomSignaling, createRoom) {\n  let cancelableRoomSignalingPromise;\n  const cancellationError = new Error('Canceled');\n\n  return new CancelablePromise(function onCreate(resolve, reject, isCanceled) {\n    let localParticipant;\n    getLocalTracks(function getLocalTracksSucceeded(localTracks) {\n      if (isCanceled()) {\n        return CancelablePromise.reject(cancellationError);\n      }\n      localParticipant = createLocalParticipant(localTracks);\n      return createRoomSignaling(localParticipant).then(function createRoomSignalingSucceeded(getCancelableRoomSignalingPromise) {\n        if (isCanceled()) {\n          throw cancellationError;\n        }\n        cancelableRoomSignalingPromise = getCancelableRoomSignalingPromise();\n        return cancelableRoomSignalingPromise;\n      });\n    }).then(function roomSignalingConnected(roomSignaling) {\n      if (isCanceled()) {\n        roomSignaling.disconnect();\n        throw cancellationError;\n      }\n      resolve(createRoom(localParticipant, roomSignaling));\n    }).catch(function onError(error) {\n      reject(error);\n    });\n  }, function onCancel() {\n    if (cancelableRoomSignalingPromise) {\n      cancelableRoomSignalingPromise.cancel();\n    }\n  });\n}\n\nmodule.exports = createCancelableRoomPromise;\n"]},"metadata":{},"sourceType":"script"}