{"ast":null,"code":"'use strict';\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar guessBrowser = require('../webrtc/util').guessBrowser;\n\nvar IceReportFactory = require('./icereportfactory');\n\nvar PeerConnectionReport = require('./peerconnectionreport');\n\nvar ReceiverReportFactory = require('./receiverreportfactory');\n\nvar SenderReportFactory = require('./senderreportfactory');\n/**\n * @typedef {string} TrackId\n */\n\n/**\n * @typedef {string} StatsId\n */\n\n/**\n * @interface SenderReportFactoriesByMediaType\n * @property {Map<StatsId, SenderReportFactory>} audio\n * @property {Map<StatsId, SenderReportFactory>} video\n */\n\n/**\n * @interface ReceiverReportFactoriesByMediaType\n * @property {Map<StatsId, ReceiverReportFactory>} audio\n * @property {Map<StatsId, ReceiverReportFactory>} video\n */\n\n/**\n * @interface SenderAndReceiverReportFactories\n * @property {Map<StatsId, SenderReportFactories>} send\n * @property {Map<StatsId, ReceiverReportFactories>} recv\n */\n\n/**\n * @interface {StatsIdsByMediaType}\n * @property {Set<StatsId>} audio\n * @property {Set<StatsId>} video\n */\n\n/**\n * @property {RTCPeerConnection} pc\n * @property {IceReportFactory} iceReportFactory\n * @property {SenderAndReceiverReportFactories} audio\n * @property {SenderAndReceiverReportFactories} video\n * @property {?PeerConnectionReport} lastReport\n */\n\n\nvar PeerConnectionReportFactory =\n/** @class */\nfunction () {\n  /**\n   * Construct a {@link PeerConnectionReportFactory}.\n   * @param {RTCPeerConnection} pc\n   */\n  function PeerConnectionReportFactory(pc) {\n    Object.defineProperties(this, {\n      pc: {\n        enumerable: true,\n        value: pc\n      },\n      ice: {\n        enumerable: true,\n        value: new IceReportFactory()\n      },\n      audio: {\n        enumerable: true,\n        value: {\n          send: new Map(),\n          recv: new Map()\n        }\n      },\n      video: {\n        enumerable: true,\n        value: {\n          send: new Map(),\n          recv: new Map()\n        }\n      },\n      lastReport: {\n        enumerable: true,\n        value: null,\n        writable: true\n      }\n    });\n  }\n  /**\n   * Create a {@link PeerConnectionReport}.\n   * @returns {Promise<PeerConnectionReport>}\n   */\n\n\n  PeerConnectionReportFactory.prototype.next = function () {\n    var _this = this;\n\n    var updatePromise = guessBrowser() === 'firefox' ? updateFirefox(this) : updateChrome(this);\n    return updatePromise.then(function () {\n      var audioSenderReportFactories = __spreadArray([], __read(_this.audio.send.values()));\n\n      var videoSenderReportFactories = __spreadArray([], __read(_this.video.send.values()));\n\n      var audioReceiverReportFactories = __spreadArray([], __read(_this.audio.recv.values()));\n\n      var videoReceiverReportFactories = __spreadArray([], __read(_this.video.recv.values()));\n\n      var report = new PeerConnectionReport(_this.ice.lastReport, {\n        send: audioSenderReportFactories.map(function (factory) {\n          return factory.lastReport;\n        }).filter(function (report) {\n          return report;\n        }),\n        recv: audioReceiverReportFactories.map(function (factory) {\n          return factory.lastReport;\n        }).filter(function (report) {\n          return report;\n        })\n      }, {\n        send: videoSenderReportFactories.map(function (factory) {\n          return factory.lastReport;\n        }).filter(function (report) {\n          return report;\n        }),\n        recv: videoReceiverReportFactories.map(function (factory) {\n          return factory.lastReport;\n        }).filter(function (report) {\n          return report;\n        })\n      });\n      _this.lastReport = report;\n      return report;\n    });\n  };\n\n  return PeerConnectionReportFactory;\n}();\n/**\n * Construct a Map from MediaStreamTrack Ids to RTCStatsReports.\n * @param {Array<RTCRtpSender>|Array<RTCRtpReceiver>} sendersOrReceivers - each\n *   RTCRtpSender should have a non-null track\n * @returns {Promise<Map<TrackId, RTCStats>>}\n */\n\n\nfunction getSenderOrReceiverReports(sendersOrReceivers) {\n  return Promise.all(sendersOrReceivers.map(function (senderOrReceiver) {\n    var trackId = senderOrReceiver.track.id;\n    return senderOrReceiver.getStats().then(function (report) {\n      var e_1, _a;\n\n      try {\n        // NOTE(mroberts): We have to rewrite Ids due to this bug:\n        //\n        //   https://bugzilla.mozilla.org/show_bug.cgi?id=1463430\n        //\n        for (var _b = __values(report.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var stats = _c.value;\n\n          if (stats.type === 'inbound-rtp') {\n            stats.id = trackId + \"-\" + stats.id;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      return [trackId, report];\n    });\n  })).then(function (pairs) {\n    return new Map(pairs);\n  });\n}\n/**\n * @param {SenderReportFactory.constructor} SenderReportFactory\n * @param {SenderReportFactoriesByMediaType} sendersByMediaType\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?SenderReportFactory}\n */\n\n/**\n* @param {ReceiverReportFactory.constructor} ReceiverReportFactory\n* @param {ReceiverReportFactoriesByMediaType} receiversByMediaType\n* @param {RTCStatsReport} report\n* @param {RTCStats} stats\n* @param {TrackId} [trackId]\n* @returns {?ReceiverReportFactory}\n*/\n\n\nfunction getOrCreateSenderOrReceiverReportFactory(SenderOrReceiverReportFactory, sendersOrReceiversByMediaType, report, stats, trackId) {\n  var sendersOrReceivers = sendersOrReceiversByMediaType[stats.mediaType];\n\n  if (!trackId) {\n    var trackStats = report.get(stats.trackId);\n\n    if (trackStats) {\n      trackId = trackStats.trackIdentifier;\n    }\n  }\n\n  if (sendersOrReceivers && trackId) {\n    if (sendersOrReceivers.has(stats.id)) {\n      return sendersOrReceivers.get(stats.id);\n    }\n\n    var senderOrReceiverFactory = new SenderOrReceiverReportFactory(trackId, stats);\n    sendersOrReceivers.set(stats.id, senderOrReceiverFactory);\n  }\n\n  return null;\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {SenderReportFactoriesByMediaType}\n */\n\n\nfunction getSenderReportFactoriesByMediaType(factory) {\n  return {\n    audio: factory.audio.send,\n    video: factory.video.send\n  };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {ReceiverReportFactoriesByMediaType}\n */\n\n\nfunction getReceiverReportFactoriesByMediaType(factory) {\n  return {\n    audio: factory.audio.recv,\n    video: factory.video.recv\n  };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?SenderReportFactory}\n */\n\n\nfunction getOrCreateSenderReportFactory(factory, report, stats, trackId) {\n  return getOrCreateSenderOrReceiverReportFactory(SenderReportFactory, getSenderReportFactoriesByMediaType(factory), report, stats, trackId);\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?ReceiverReportFactory}\n */\n\n\nfunction getOrCreateReceiverReportFactory(factory, report, stats, trackId) {\n  return getOrCreateSenderOrReceiverReportFactory(ReceiverReportFactory, getReceiverReportFactoriesByMediaType(factory), report, stats, trackId);\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @retuns {StatsIdsByMediaType}\n */\n\n\nfunction getSenderReportFactoryIdsByMediaType(factory) {\n  return {\n    audio: new Set(factory.audio.send.keys()),\n    video: new Set(factory.video.send.keys())\n  };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @retuns {StatsIdsByMediaType}\n */\n\n\nfunction getReceiverReportFactoryIdsByMediaType(factory) {\n  return {\n    audio: new Set(factory.audio.recv.keys()),\n    video: new Set(factory.video.recv.keys())\n  };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {StatsIdsByMediaType} senderReportFactoryIdsToDeleteByMediaType\n * @param {TrackId} [trackId]\n * @returns {void}\n */\n\n\nfunction updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType, trackId) {\n  var e_2, _a;\n\n  try {\n    for (var _b = __values(report.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var stats = _c.value;\n\n      if (stats.type === 'outbound-rtp' && !stats.isRemote) {\n        if (guessBrowser() !== 'firefox' && !stats.trackId) {\n          continue;\n        }\n\n        var senderReportFactoryIdsToDelete = senderReportFactoryIdsToDeleteByMediaType[stats.mediaType];\n\n        if (senderReportFactoryIdsToDelete) {\n          senderReportFactoryIdsToDelete.delete(stats.id);\n        }\n\n        var senderReportFactory = getOrCreateSenderReportFactory(factory, report, stats, trackId);\n\n        if (senderReportFactory) {\n          var remoteInboundStats = report.get(stats.remoteId);\n          senderReportFactory.next(trackId || senderReportFactory.trackId, stats, remoteInboundStats);\n        }\n      }\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {StatsIdsByMediaType} receiverReportFactoryIdsToDeleteByMediaType\n * @param {TrackId} [trackId]\n * @returns {void}\n */\n\n\nfunction updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType, trackId) {\n  var e_3, _a;\n\n  try {\n    for (var _b = __values(report.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var stats = _c.value;\n\n      if (stats.type === 'inbound-rtp' && !stats.isRemote) {\n        var receiverReportFactoryIdsToDelete = receiverReportFactoryIdsToDeleteByMediaType[stats.mediaType];\n\n        if (receiverReportFactoryIdsToDelete) {\n          receiverReportFactoryIdsToDelete.delete(stats.id);\n        }\n\n        var receiverReportFactory = getOrCreateReceiverReportFactory(factory, report, stats, trackId);\n\n        if (receiverReportFactory) {\n          receiverReportFactory.next(trackId || receiverReportFactory.trackId, stats);\n        }\n      }\n    }\n  } catch (e_3_1) {\n    e_3 = {\n      error: e_3_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_3) throw e_3.error;\n    }\n  }\n}\n/**\n * @param {SenderReportFactoriesByMediaType|ReceiverReportFactoriesByMediaType} senderOrReceiverReportFactoriesByMediaType\n * @param {StatsIdsByMediaType} senderOrReceiverReportFactoryIdsByMediaType\n * @returns {void}\n */\n\n\nfunction deleteSenderOrReceiverReportFactories(senderOrReceiverReportFactoriesByMediaType, senderOrReceiverReportFactoryIdsByMediaType) {\n  var _loop_1 = function _loop_1(mediaType) {\n    var senderOrReceiverReportFactories = senderOrReceiverReportFactoriesByMediaType[mediaType];\n    var senderOrReceiverReportFactoryIds = senderOrReceiverReportFactoryIdsByMediaType[mediaType];\n    senderOrReceiverReportFactoryIds.forEach(function (senderOrReceiverReportFactoryId) {\n      return senderOrReceiverReportFactories.delete(senderOrReceiverReportFactoryId);\n    });\n  };\n\n  for (var mediaType in senderOrReceiverReportFactoryIdsByMediaType) {\n    _loop_1(mediaType);\n  }\n}\n/**\n * @param {IceReportFactory} ice\n * @param {RTCStatsReport} report\n * @returns {void}\n */\n\n\nfunction updateIceReport(ice, report) {\n  var e_4, _a, e_5, _b;\n\n  var selectedCandidatePair;\n\n  try {\n    for (var _c = __values(report.values()), _d = _c.next(); !_d.done; _d = _c.next()) {\n      var stats = _d.value;\n\n      if (stats.type === 'transport') {\n        selectedCandidatePair = report.get(stats.selectedCandidatePairId);\n      }\n    }\n  } catch (e_4_1) {\n    e_4 = {\n      error: e_4_1\n    };\n  } finally {\n    try {\n      if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n    } finally {\n      if (e_4) throw e_4.error;\n    }\n  }\n\n  if (selectedCandidatePair) {\n    ice.next(selectedCandidatePair);\n    return;\n  }\n\n  try {\n    for (var _e = __values(report.values()), _f = _e.next(); !_f.done; _f = _e.next()) {\n      var stats = _f.value;\n\n      if (stats.type === 'candidate-pair' && stats.nominated && ('selected' in stats ? stats.selected : true)) {\n        ice.next(stats);\n      }\n    }\n  } catch (e_5_1) {\n    e_5 = {\n      error: e_5_1\n    };\n  } finally {\n    try {\n      if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n    } finally {\n      if (e_5) throw e_5.error;\n    }\n  }\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {Promise<PeerConnectionReport>}\n */\n\n\nfunction updateFirefox(factory) {\n  var senders = factory.pc.getTransceivers().filter(function (transceiver) {\n    return transceiver.currentDirection && transceiver.currentDirection.match(/send/) && transceiver.sender.track;\n  }).map(function (transceiver) {\n    return transceiver.sender;\n  });\n  var receivers = factory.pc.getTransceivers().filter(function (transceiver) {\n    return transceiver.currentDirection && transceiver.currentDirection.match(/recv/);\n  }).map(function (transceiver) {\n    return transceiver.receiver;\n  });\n  return Promise.all([getSenderOrReceiverReports(senders), getSenderOrReceiverReports(receivers), factory.pc.getStats()]).then(function (_a) {\n    var _b = __read(_a, 3),\n        senderReports = _b[0],\n        receiverReports = _b[1],\n        pcReport = _b[2];\n\n    var senderReportFactoriesByMediaType = getSenderReportFactoriesByMediaType(factory);\n    var senderReportFactoryIdsToDeleteByMediaType = getSenderReportFactoryIdsByMediaType(factory);\n    senderReports.forEach(function (report, trackId) {\n      return updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType, trackId);\n    });\n    deleteSenderOrReceiverReportFactories(senderReportFactoriesByMediaType, senderReportFactoryIdsToDeleteByMediaType);\n    var receiverReportFactoriesByMediaType = getReceiverReportFactoriesByMediaType(factory);\n    var receiverReportFactoryIdsToDeleteByMediaType = getReceiverReportFactoryIdsByMediaType(factory);\n    receiverReports.forEach(function (report, trackId) {\n      return updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType, trackId);\n    });\n    deleteSenderOrReceiverReportFactories(receiverReportFactoriesByMediaType, receiverReportFactoryIdsToDeleteByMediaType);\n    updateIceReport(factory.ice, pcReport);\n  });\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {Promise<PeerConnectionReport>}\n */\n\n\nfunction updateChrome(factory) {\n  return factory.pc.getStats().then(function (report) {\n    var senderReportFactoriesByMediaType = getSenderReportFactoriesByMediaType(factory);\n    var senderReportFactoryIdsToDeleteByMediaType = getSenderReportFactoryIdsByMediaType(factory);\n    updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType);\n    deleteSenderOrReceiverReportFactories(senderReportFactoriesByMediaType, senderReportFactoryIdsToDeleteByMediaType);\n    var receiverReportFactoriesByMediaType = getReceiverReportFactoriesByMediaType(factory);\n    var receiverReportFactoryIdsToDeleteByMediaType = getReceiverReportFactoryIdsByMediaType(factory);\n    updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType);\n    deleteSenderOrReceiverReportFactories(receiverReportFactoriesByMediaType, receiverReportFactoryIdsToDeleteByMediaType);\n    updateIceReport(factory.ice, report);\n  });\n}\n\nmodule.exports = PeerConnectionReportFactory;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEQ,gBAAY,GAAKA,OAAO,CAAC,gBAAD,CAAP,CAAyBC,YAA1C;;AAER,IAAMC,gBAAgB,GAAGF,OAAO,CAAC,oBAAD,CAAhC;;AACA,IAAMG,oBAAoB,GAAGH,OAAO,CAAC,wBAAD,CAApC;;AACA,IAAMI,qBAAqB,GAAGJ,OAAO,CAAC,yBAAD,CAArC;;AACA,IAAMK,mBAAmB,GAAGL,OAAO,CAAC,uBAAD,CAAnC;AAEA;;;;AAIA;;;;AAIA;;;;;;AAMA;;;;;;AAMA;;;;;;AAMA;;;;;;AAMA;;;;;;;;;AAOA;AAAA;AAAA;EACE;;;;EAIA,qCAAYM,EAAZ,EAAc;IACZC,MAAM,CAACC,gBAAP,CAAwB,IAAxB,EAA8B;MAC5BF,EAAE,EAAE;QACFG,UAAU,EAAE,IADV;QAEFC,KAAK,EAAEJ;MAFL,CADwB;MAK5BK,GAAG,EAAE;QACHF,UAAU,EAAE,IADT;QAEHC,KAAK,EAAE,IAAIR,gBAAJ;MAFJ,CALuB;MAS5BU,KAAK,EAAE;QACLH,UAAU,EAAE,IADP;QAELC,KAAK,EAAE;UACLG,IAAI,EAAE,IAAIC,GAAJ,EADD;UAELC,IAAI,EAAE,IAAID,GAAJ;QAFD;MAFF,CATqB;MAgB5BE,KAAK,EAAE;QACLP,UAAU,EAAE,IADP;QAELC,KAAK,EAAE;UACLG,IAAI,EAAE,IAAIC,GAAJ,EADD;UAELC,IAAI,EAAE,IAAID,GAAJ;QAFD;MAFF,CAhBqB;MAuB5BG,UAAU,EAAE;QACVR,UAAU,EAAE,IADF;QAEVC,KAAK,EAAE,IAFG;QAGVQ,QAAQ,EAAE;MAHA;IAvBgB,CAA9B;EA6BD;EAED;;;;;;EAIAC;IAAA;;IACE,IAAMC,aAAa,GAAGnB,YAAY,OAAO,SAAnB,GAClBoB,aAAa,CAAC,IAAD,CADK,GAElBC,YAAY,CAAC,IAAD,CAFhB;IAIA,OAAOF,aAAa,CAACG,IAAd,CAAmB;MACxB,IAAMC,0BAA0B,4BAAOC,KAAI,CAACb,KAAL,CAAWC,IAAX,CAAgBa,MAAhB,EAAP,EAAhC;;MACA,IAAMC,0BAA0B,4BAAOF,KAAI,CAACT,KAAL,CAAWH,IAAX,CAAgBa,MAAhB,EAAP,EAAhC;;MACA,IAAME,4BAA4B,4BAAOH,KAAI,CAACb,KAAL,CAAWG,IAAX,CAAgBW,MAAhB,EAAP,EAAlC;;MACA,IAAMG,4BAA4B,4BAAOJ,KAAI,CAACT,KAAL,CAAWD,IAAX,CAAgBW,MAAhB,EAAP,EAAlC;;MAEA,IAAMI,MAAM,GAAG,IAAI3B,oBAAJ,CACbsB,KAAI,CAACd,GAAL,CAASM,UADI,EAEb;QACEJ,IAAI,EAAEW,0BAA0B,CAACO,GAA3B,CAA+B,mBAAO;UAAI,cAAO,CAACd,UAAR;QAAkB,CAA5D,EAA8De,MAA9D,CAAqE,kBAAM;UAAI;QAAM,CAArF,CADR;QAEEjB,IAAI,EAAEa,4BAA4B,CAACG,GAA7B,CAAiC,mBAAO;UAAI,cAAO,CAACd,UAAR;QAAkB,CAA9D,EAAgEe,MAAhE,CAAuE,kBAAM;UAAI;QAAM,CAAvF;MAFR,CAFa,EAMb;QACEnB,IAAI,EAAEc,0BAA0B,CAACI,GAA3B,CAA+B,mBAAO;UAAI,cAAO,CAACd,UAAR;QAAkB,CAA5D,EAA8De,MAA9D,CAAqE,kBAAM;UAAI;QAAM,CAArF,CADR;QAEEjB,IAAI,EAAEc,4BAA4B,CAACE,GAA7B,CAAiC,mBAAO;UAAI,cAAO,CAACd,UAAR;QAAkB,CAA9D,EAAgEe,MAAhE,CAAuE,kBAAM;UAAI;QAAM,CAAvF;MAFR,CANa,CAAf;MAYAP,KAAI,CAACR,UAAL,GAAkBa,MAAlB;MAEA,OAAOA,MAAP;IACD,CArBM,CAAP;EAsBD,CA3BD;;EA4BF;AAAC,CArED;AAuEA;;;;;;;;AAMA,SAASG,0BAAT,CAAoCC,kBAApC,EAAsD;EACpD,OAAOC,OAAO,CAACC,GAAR,CAAYF,kBAAkB,CAACH,GAAnB,CAAuB,4BAAgB;IACxD,IAAMM,OAAO,GAAGC,gBAAgB,CAACC,KAAjB,CAAuBC,EAAvC;IACA,OAAOF,gBAAgB,CAACG,QAAjB,GAA4BlB,IAA5B,CAAiC,kBAAM;;;;QAC5C;QACA;QACA;QACA;QACA,KAAoB,wBAAM,CAACG,MAAP,KAAegB,cAAnC,EAAmC,QAAnC,EAAmCA,cAAnC,EAAqC;UAAhC,IAAMC,KAAK,WAAX;;UACH,IAAIA,KAAK,CAACC,IAAN,KAAe,aAAnB,EAAkC;YAChCD,KAAK,CAACH,EAAN,GAAcH,OAAO,MAAP,GAAWM,KAAK,CAACH,EAA/B;UACD;QACF;;;;;;;;;;;;;MACD,OAAO,CAACH,OAAD,EAAUP,MAAV,CAAP;IACD,CAXM,CAAP;EAYD,CAdkB,CAAZ,EAcHP,IAdG,CAcE,iBAAK;IAAI,WAAIT,GAAJ,CAAQ+B,KAAR;EAAc,CAdzB,CAAP;AAeD;AAED;;;;;;;;;AAOG;;;;;;;;;;AAQH,SAASC,wCAAT,CAAkDC,6BAAlD,EAAiFC,6BAAjF,EAAgHlB,MAAhH,EAAwHa,KAAxH,EAA+HN,OAA/H,EAAsI;EACpI,IAAMH,kBAAkB,GAAGc,6BAA6B,CAACL,KAAK,CAACM,SAAP,CAAxD;;EACA,IAAI,CAACZ,OAAL,EAAc;IACZ,IAAMa,UAAU,GAAGpB,MAAM,CAACqB,GAAP,CAAWR,KAAK,CAACN,OAAjB,CAAnB;;IACA,IAAIa,UAAJ,EAAgB;MACdb,OAAO,GAAGa,UAAU,CAACE,eAArB;IACD;EACF;;EACD,IAAIlB,kBAAkB,IAAIG,OAA1B,EAAmC;IACjC,IAAIH,kBAAkB,CAACmB,GAAnB,CAAuBV,KAAK,CAACH,EAA7B,CAAJ,EAAsC;MACpC,OAAON,kBAAkB,CAACiB,GAAnB,CAAuBR,KAAK,CAACH,EAA7B,CAAP;IACD;;IACD,IAAMc,uBAAuB,GAAG,IAAIP,6BAAJ,CAAkCV,OAAlC,EAA2CM,KAA3C,CAAhC;IACAT,kBAAkB,CAACqB,GAAnB,CAAuBZ,KAAK,CAACH,EAA7B,EAAiCc,uBAAjC;EACD;;EACD,OAAO,IAAP;AACD;AAED;;;;;;AAIA,SAASE,mCAAT,CAA6CC,OAA7C,EAAoD;EAClD,OAAO;IAAE7C,KAAK,EAAE6C,OAAO,CAAC7C,KAAR,CAAcC,IAAvB;IAA6BG,KAAK,EAAEyC,OAAO,CAACzC,KAAR,CAAcH;EAAlD,CAAP;AACD;AAED;;;;;;AAIA,SAAS6C,qCAAT,CAA+CD,OAA/C,EAAsD;EACpD,OAAO;IAAE7C,KAAK,EAAE6C,OAAO,CAAC7C,KAAR,CAAcG,IAAvB;IAA6BC,KAAK,EAAEyC,OAAO,CAACzC,KAAR,CAAcD;EAAlD,CAAP;AACD;AAED;;;;;;;;;AAOA,SAAS4C,8BAAT,CAAwCF,OAAxC,EAAiD3B,MAAjD,EAAyDa,KAAzD,EAAgEN,OAAhE,EAAuE;EACrE,OAAOS,wCAAwC,CAACzC,mBAAD,EAAsBmD,mCAAmC,CAACC,OAAD,CAAzD,EAAoE3B,MAApE,EAA4Ea,KAA5E,EAAmFN,OAAnF,CAA/C;AACD;AAED;;;;;;;;;AAOA,SAASuB,gCAAT,CAA0CH,OAA1C,EAAmD3B,MAAnD,EAA2Da,KAA3D,EAAkEN,OAAlE,EAAyE;EACvE,OAAOS,wCAAwC,CAAC1C,qBAAD,EAAwBsD,qCAAqC,CAACD,OAAD,CAA7D,EAAwE3B,MAAxE,EAAgFa,KAAhF,EAAuFN,OAAvF,CAA/C;AACD;AAED;;;;;;AAIA,SAASwB,oCAAT,CAA8CJ,OAA9C,EAAqD;EACnD,OAAO;IACL7C,KAAK,EAAE,IAAIkD,GAAJ,CAAQL,OAAO,CAAC7C,KAAR,CAAcC,IAAd,CAAmBkD,IAAnB,EAAR,CADF;IAEL/C,KAAK,EAAE,IAAI8C,GAAJ,CAAQL,OAAO,CAACzC,KAAR,CAAcH,IAAd,CAAmBkD,IAAnB,EAAR;EAFF,CAAP;AAID;AAED;;;;;;AAIA,SAASC,sCAAT,CAAgDP,OAAhD,EAAuD;EACrD,OAAO;IACL7C,KAAK,EAAE,IAAIkD,GAAJ,CAAQL,OAAO,CAAC7C,KAAR,CAAcG,IAAd,CAAmBgD,IAAnB,EAAR,CADF;IAEL/C,KAAK,EAAE,IAAI8C,GAAJ,CAAQL,OAAO,CAACzC,KAAR,CAAcD,IAAd,CAAmBgD,IAAnB,EAAR;EAFF,CAAP;AAID;AAED;;;;;;;;;AAOA,SAASE,mBAAT,CAA6BR,OAA7B,EAAsC3B,MAAtC,EAA8CoC,yCAA9C,EAAyF7B,OAAzF,EAAgG;;;;IAC9F,KAAoB,wBAAM,CAACX,MAAP,KAAegB,cAAnC,EAAmC,QAAnC,EAAmCA,cAAnC,EAAqC;MAAhC,IAAMC,KAAK,WAAX;;MACH,IAAIA,KAAK,CAACC,IAAN,KAAe,cAAf,IAAiC,CAACD,KAAK,CAACwB,QAA5C,EAAsD;QACpD,IAAIlE,YAAY,OAAO,SAAnB,IAAgC,CAAC0C,KAAK,CAACN,OAA3C,EAAoD;UAClD;QACD;;QACD,IAAM+B,8BAA8B,GAAGF,yCAAyC,CAACvB,KAAK,CAACM,SAAP,CAAhF;;QACA,IAAImB,8BAAJ,EAAoC;UAClCA,8BAA8B,CAACC,MAA/B,CAAsC1B,KAAK,CAACH,EAA5C;QACD;;QACD,IAAM8B,mBAAmB,GAAGX,8BAA8B,CAACF,OAAD,EAAU3B,MAAV,EAAkBa,KAAlB,EAAyBN,OAAzB,CAA1D;;QACA,IAAIiC,mBAAJ,EAAyB;UACvB,IAAMC,kBAAkB,GAAGzC,MAAM,CAACqB,GAAP,CAAWR,KAAK,CAAC6B,QAAjB,CAA3B;UACAF,mBAAmB,CAACG,IAApB,CAAyBpC,OAAO,IAAIiC,mBAAmB,CAACjC,OAAxD,EAAiEM,KAAjE,EAAwE4B,kBAAxE;QACD;MACF;IACF;;;;;;;;;;;;AACF;AAED;;;;;;;;;AAOA,SAASG,qBAAT,CAA+BjB,OAA/B,EAAwC3B,MAAxC,EAAgD6C,2CAAhD,EAA6FtC,OAA7F,EAAoG;;;;IAClG,KAAoB,wBAAM,CAACX,MAAP,KAAegB,cAAnC,EAAmC,QAAnC,EAAmCA,cAAnC,EAAqC;MAAhC,IAAMC,KAAK,WAAX;;MACH,IAAIA,KAAK,CAACC,IAAN,KAAe,aAAf,IAAgC,CAACD,KAAK,CAACwB,QAA3C,EAAqD;QACnD,IAAMS,gCAAgC,GAAGD,2CAA2C,CAAChC,KAAK,CAACM,SAAP,CAApF;;QACA,IAAI2B,gCAAJ,EAAsC;UACpCA,gCAAgC,CAACP,MAAjC,CAAwC1B,KAAK,CAACH,EAA9C;QACD;;QACD,IAAMqC,qBAAqB,GAAGjB,gCAAgC,CAACH,OAAD,EAAU3B,MAAV,EAAkBa,KAAlB,EAAyBN,OAAzB,CAA9D;;QACA,IAAIwC,qBAAJ,EAA2B;UACzBA,qBAAqB,CAACJ,IAAtB,CAA2BpC,OAAO,IAAIwC,qBAAqB,CAACxC,OAA5D,EAAqEM,KAArE;QACD;MACF;IACF;;;;;;;;;;;;AACF;AAED;;;;;;;AAKA,SAASmC,qCAAT,CAA+CC,0CAA/C,EAA2FC,2CAA3F,EAAsI;iCACzH/B,WAAS;IAClB,IAAMgC,+BAA+B,GAAGF,0CAA0C,CAAC9B,SAAD,CAAlF;IACA,IAAMiC,gCAAgC,GAAGF,2CAA2C,CAAC/B,SAAD,CAApF;IACAiC,gCAAgC,CAACC,OAAjC,CAAyC,2CAA+B;MAAI,sCAA+B,CAACd,MAAhC,CAAuCe,+BAAvC;IAAuE,CAAnJ;;;EAHF,KAAK,IAAMnC,SAAX,IAAwB+B,2CAAxB,EAAmE;YAAxD/B;EAIV;AACF;AAED;;;;;;;AAKA,SAASoC,eAAT,CAAyB1E,GAAzB,EAA8BmB,MAA9B,EAAoC;;;EAClC,IAAIwD,qBAAJ;;;IACA,KAAoB,wBAAM,CAAC5D,MAAP,KAAe6D,cAAnC,EAAmC,QAAnC,EAAmCA,cAAnC,EAAqC;MAAhC,IAAM5C,KAAK,WAAX;;MACH,IAAIA,KAAK,CAACC,IAAN,KAAe,WAAnB,EAAgC;QAC9B0C,qBAAqB,GAAGxD,MAAM,CAACqB,GAAP,CAAWR,KAAK,CAAC6C,uBAAjB,CAAxB;MACD;IACF;;;;;;;;;;;;;EACD,IAAIF,qBAAJ,EAA2B;IACzB3E,GAAG,CAAC8D,IAAJ,CAASa,qBAAT;IACA;EACD;;;IACD,KAAoB,wBAAM,CAAC5D,MAAP,KAAe+D,cAAnC,EAAmC,QAAnC,EAAmCA,cAAnC,EAAqC;MAAhC,IAAM9C,KAAK,WAAX;;MACH,IAAIA,KAAK,CAACC,IAAN,KAAe,gBAAf,IACCD,KAAK,CAAC+C,SADP,KAEE,cAAc/C,KAAd,GAAsBA,KAAK,CAACgD,QAA5B,GAAuC,IAFzC,CAAJ,EAEoD;QAClDhF,GAAG,CAAC8D,IAAJ,CAAS9B,KAAT;MACD;IACF;;;;;;;;;;;;AACF;AAED;;;;;;AAIA,SAAStB,aAAT,CAAuBoC,OAAvB,EAA8B;EAC5B,IAAMmC,OAAO,GAAGnC,OAAO,CAACnD,EAAR,CAAWuF,eAAX,GACb7D,MADa,CACN,uBAAW;IAAI,kBAAW,CAAC8D,gBAAZ,IAAgCC,WAAW,CAACD,gBAAZ,CAA6BE,KAA7B,CAAmC,MAAnC,CAAhC,IAA8ED,WAAW,CAACE,MAAZ,CAAmB1D,KAAjG;EAAsG,CAD/G,EAEbR,GAFa,CAET,uBAAW;IAAI,kBAAW,CAACkE,MAAZ;EAAkB,CAFxB,CAAhB;EAIA,IAAMC,SAAS,GAAGzC,OAAO,CAACnD,EAAR,CAAWuF,eAAX,GACf7D,MADe,CACR,uBAAW;IAAI,kBAAW,CAAC8D,gBAAZ,IAAgCC,WAAW,CAACD,gBAAZ,CAA6BE,KAA7B,CAAmC,MAAnC,CAAhC;EAA0E,CADjF,EAEfjE,GAFe,CAEX,uBAAW;IAAI,kBAAW,CAACoE,QAAZ;EAAoB,CAFxB,CAAlB;EAIA,OAAOhE,OAAO,CAACC,GAAR,CAAY,CACjBH,0BAA0B,CAAC2D,OAAD,CADT,EAEjB3D,0BAA0B,CAACiE,SAAD,CAFT,EAGjBzC,OAAO,CAACnD,EAAR,CAAWmC,QAAX,EAHiB,CAAZ,EAIJlB,IAJI,CAIC,UAAC6E,EAAD,EAA2C;QAA1CC;QAACC,aAAa;QAAEC,eAAe;QAAEC,QAAQ;;IAChD,IAAMC,gCAAgC,GAAGjD,mCAAmC,CAACC,OAAD,CAA5E;IACA,IAAMS,yCAAyC,GAAGL,oCAAoC,CAACJ,OAAD,CAAtF;IACA6C,aAAa,CAACnB,OAAd,CAAsB,UAACrD,MAAD,EAASO,OAAT,EAAgB;MAAK,0BAAmB,CAACoB,OAAD,EAAU3B,MAAV,EAAkBoC,yCAAlB,EAA6D7B,OAA7D,CAAnB;IAAwF,CAAnI;IACAyC,qCAAqC,CAAC2B,gCAAD,EAAmCvC,yCAAnC,CAArC;IAEA,IAAMwC,kCAAkC,GAAGhD,qCAAqC,CAACD,OAAD,CAAhF;IACA,IAAMkB,2CAA2C,GAAGX,sCAAsC,CAACP,OAAD,CAA1F;IACA8C,eAAe,CAACpB,OAAhB,CAAwB,UAACrD,MAAD,EAASO,OAAT,EAAgB;MAAK,4BAAqB,CAACoB,OAAD,EAAU3B,MAAV,EAAkB6C,2CAAlB,EAA+DtC,OAA/D,CAArB;IAA4F,CAAzI;IACAyC,qCAAqC,CAAC4B,kCAAD,EAAqC/B,2CAArC,CAArC;IAEAU,eAAe,CAAC5B,OAAO,CAAC9C,GAAT,EAAc6F,QAAd,CAAf;EACD,CAhBM,CAAP;AAiBD;AAED;;;;;;AAIA,SAASlF,YAAT,CAAsBmC,OAAtB,EAA6B;EAC3B,OAAOA,OAAO,CAACnD,EAAR,CAAWmC,QAAX,GAAsBlB,IAAtB,CAA2B,kBAAM;IACtC,IAAMkF,gCAAgC,GAAGjD,mCAAmC,CAACC,OAAD,CAA5E;IACA,IAAMS,yCAAyC,GAAGL,oCAAoC,CAACJ,OAAD,CAAtF;IACAQ,mBAAmB,CAACR,OAAD,EAAU3B,MAAV,EAAkBoC,yCAAlB,CAAnB;IACAY,qCAAqC,CAAC2B,gCAAD,EAAmCvC,yCAAnC,CAArC;IAEA,IAAMwC,kCAAkC,GAAGhD,qCAAqC,CAACD,OAAD,CAAhF;IACA,IAAMkB,2CAA2C,GAAGX,sCAAsC,CAACP,OAAD,CAA1F;IACAiB,qBAAqB,CAACjB,OAAD,EAAU3B,MAAV,EAAkB6C,2CAAlB,CAArB;IACAG,qCAAqC,CAAC4B,kCAAD,EAAqC/B,2CAArC,CAArC;IAEAU,eAAe,CAAC5B,OAAO,CAAC9C,GAAT,EAAcmB,MAAd,CAAf;EACD,CAZM,CAAP;AAaD;;AAED6E,MAAM,CAACC,OAAP,GAAiBzF,2BAAjB","names":["require","guessBrowser","IceReportFactory","PeerConnectionReport","ReceiverReportFactory","SenderReportFactory","pc","Object","defineProperties","enumerable","value","ice","audio","send","Map","recv","video","lastReport","writable","PeerConnectionReportFactory","updatePromise","updateFirefox","updateChrome","then","audioSenderReportFactories","_this","values","videoSenderReportFactories","audioReceiverReportFactories","videoReceiverReportFactories","report","map","filter","getSenderOrReceiverReports","sendersOrReceivers","Promise","all","trackId","senderOrReceiver","track","id","getStats","_c","stats","type","pairs","getOrCreateSenderOrReceiverReportFactory","SenderOrReceiverReportFactory","sendersOrReceiversByMediaType","mediaType","trackStats","get","trackIdentifier","has","senderOrReceiverFactory","set","getSenderReportFactoriesByMediaType","factory","getReceiverReportFactoriesByMediaType","getOrCreateSenderReportFactory","getOrCreateReceiverReportFactory","getSenderReportFactoryIdsByMediaType","Set","keys","getReceiverReportFactoryIdsByMediaType","updateSenderReports","senderReportFactoryIdsToDeleteByMediaType","isRemote","senderReportFactoryIdsToDelete","delete","senderReportFactory","remoteInboundStats","remoteId","next","updateReceiverReports","receiverReportFactoryIdsToDeleteByMediaType","receiverReportFactoryIdsToDelete","receiverReportFactory","deleteSenderOrReceiverReportFactories","senderOrReceiverReportFactoriesByMediaType","senderOrReceiverReportFactoryIdsByMediaType","senderOrReceiverReportFactories","senderOrReceiverReportFactoryIds","forEach","senderOrReceiverReportFactoryId","updateIceReport","selectedCandidatePair","_d","selectedCandidatePairId","_f","nominated","selected","senders","getTransceivers","currentDirection","transceiver","match","sender","receivers","receiver","_a","_b","senderReports","receiverReports","pcReport","senderReportFactoriesByMediaType","receiverReportFactoriesByMediaType","module","exports"],"sources":["/home/samliu/repos/ieee/tp-robot/node_modules/twilio-video/lib/stats/peerconnectionreportfactory.js"],"sourcesContent":["'use strict';\n\nconst { guessBrowser } = require('../webrtc/util');\n\nconst IceReportFactory = require('./icereportfactory');\nconst PeerConnectionReport = require('./peerconnectionreport');\nconst ReceiverReportFactory = require('./receiverreportfactory');\nconst SenderReportFactory = require('./senderreportfactory');\n\n/**\n * @typedef {string} TrackId\n */\n\n/**\n * @typedef {string} StatsId\n */\n\n/**\n * @interface SenderReportFactoriesByMediaType\n * @property {Map<StatsId, SenderReportFactory>} audio\n * @property {Map<StatsId, SenderReportFactory>} video\n */\n\n/**\n * @interface ReceiverReportFactoriesByMediaType\n * @property {Map<StatsId, ReceiverReportFactory>} audio\n * @property {Map<StatsId, ReceiverReportFactory>} video\n */\n\n/**\n * @interface SenderAndReceiverReportFactories\n * @property {Map<StatsId, SenderReportFactories>} send\n * @property {Map<StatsId, ReceiverReportFactories>} recv\n */\n\n/**\n * @interface {StatsIdsByMediaType}\n * @property {Set<StatsId>} audio\n * @property {Set<StatsId>} video\n */\n\n/**\n * @property {RTCPeerConnection} pc\n * @property {IceReportFactory} iceReportFactory\n * @property {SenderAndReceiverReportFactories} audio\n * @property {SenderAndReceiverReportFactories} video\n * @property {?PeerConnectionReport} lastReport\n */\nclass PeerConnectionReportFactory {\n  /**\n   * Construct a {@link PeerConnectionReportFactory}.\n   * @param {RTCPeerConnection} pc\n   */\n  constructor(pc) {\n    Object.defineProperties(this, {\n      pc: {\n        enumerable: true,\n        value: pc\n      },\n      ice: {\n        enumerable: true,\n        value: new IceReportFactory()\n      },\n      audio: {\n        enumerable: true,\n        value: {\n          send: new Map(),\n          recv: new Map()\n        }\n      },\n      video: {\n        enumerable: true,\n        value: {\n          send: new Map(),\n          recv: new Map()\n        }\n      },\n      lastReport: {\n        enumerable: true,\n        value: null,\n        writable: true\n      }\n    });\n  }\n\n  /**\n   * Create a {@link PeerConnectionReport}.\n   * @returns {Promise<PeerConnectionReport>}\n   */\n  next() {\n    const updatePromise = guessBrowser() === 'firefox'\n      ? updateFirefox(this)\n      : updateChrome(this);\n\n    return updatePromise.then(() => {\n      const audioSenderReportFactories = [...this.audio.send.values()];\n      const videoSenderReportFactories = [...this.video.send.values()];\n      const audioReceiverReportFactories = [...this.audio.recv.values()];\n      const videoReceiverReportFactories = [...this.video.recv.values()];\n\n      const report = new PeerConnectionReport(\n        this.ice.lastReport,\n        {\n          send: audioSenderReportFactories.map(factory => factory.lastReport).filter(report => report),\n          recv: audioReceiverReportFactories.map(factory => factory.lastReport).filter(report => report)\n        },\n        {\n          send: videoSenderReportFactories.map(factory => factory.lastReport).filter(report => report),\n          recv: videoReceiverReportFactories.map(factory => factory.lastReport).filter(report => report)\n        }\n      );\n\n      this.lastReport = report;\n\n      return report;\n    });\n  }\n}\n\n/**\n * Construct a Map from MediaStreamTrack Ids to RTCStatsReports.\n * @param {Array<RTCRtpSender>|Array<RTCRtpReceiver>} sendersOrReceivers - each\n *   RTCRtpSender should have a non-null track\n * @returns {Promise<Map<TrackId, RTCStats>>}\n */\nfunction getSenderOrReceiverReports(sendersOrReceivers) {\n  return Promise.all(sendersOrReceivers.map(senderOrReceiver => {\n    const trackId = senderOrReceiver.track.id;\n    return senderOrReceiver.getStats().then(report => {\n      // NOTE(mroberts): We have to rewrite Ids due to this bug:\n      //\n      //   https://bugzilla.mozilla.org/show_bug.cgi?id=1463430\n      //\n      for (const stats of report.values()) {\n        if (stats.type === 'inbound-rtp') {\n          stats.id = `${trackId}-${stats.id}`;\n        }\n      }\n      return [trackId, report];\n    });\n  })).then(pairs => new Map(pairs));\n}\n\n/**\n * @param {SenderReportFactory.constructor} SenderReportFactory\n * @param {SenderReportFactoriesByMediaType} sendersByMediaType\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?SenderReportFactory}\n *//**\n * @param {ReceiverReportFactory.constructor} ReceiverReportFactory\n * @param {ReceiverReportFactoriesByMediaType} receiversByMediaType\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?ReceiverReportFactory}\n */\nfunction getOrCreateSenderOrReceiverReportFactory(SenderOrReceiverReportFactory, sendersOrReceiversByMediaType, report, stats, trackId) {\n  const sendersOrReceivers = sendersOrReceiversByMediaType[stats.mediaType];\n  if (!trackId) {\n    const trackStats = report.get(stats.trackId);\n    if (trackStats) {\n      trackId = trackStats.trackIdentifier;\n    }\n  }\n  if (sendersOrReceivers && trackId) {\n    if (sendersOrReceivers.has(stats.id)) {\n      return sendersOrReceivers.get(stats.id);\n    }\n    const senderOrReceiverFactory = new SenderOrReceiverReportFactory(trackId, stats);\n    sendersOrReceivers.set(stats.id, senderOrReceiverFactory);\n  }\n  return null;\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {SenderReportFactoriesByMediaType}\n */\nfunction getSenderReportFactoriesByMediaType(factory) {\n  return { audio: factory.audio.send, video: factory.video.send };\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {ReceiverReportFactoriesByMediaType}\n */\nfunction getReceiverReportFactoriesByMediaType(factory) {\n  return { audio: factory.audio.recv, video: factory.video.recv };\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?SenderReportFactory}\n */\nfunction getOrCreateSenderReportFactory(factory, report, stats, trackId) {\n  return getOrCreateSenderOrReceiverReportFactory(SenderReportFactory, getSenderReportFactoriesByMediaType(factory), report, stats, trackId);\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?ReceiverReportFactory}\n */\nfunction getOrCreateReceiverReportFactory(factory, report, stats, trackId) {\n  return getOrCreateSenderOrReceiverReportFactory(ReceiverReportFactory, getReceiverReportFactoriesByMediaType(factory), report, stats, trackId);\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @retuns {StatsIdsByMediaType}\n */\nfunction getSenderReportFactoryIdsByMediaType(factory) {\n  return {\n    audio: new Set(factory.audio.send.keys()),\n    video: new Set(factory.video.send.keys())\n  };\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @retuns {StatsIdsByMediaType}\n */\nfunction getReceiverReportFactoryIdsByMediaType(factory) {\n  return {\n    audio: new Set(factory.audio.recv.keys()),\n    video: new Set(factory.video.recv.keys())\n  };\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {StatsIdsByMediaType} senderReportFactoryIdsToDeleteByMediaType\n * @param {TrackId} [trackId]\n * @returns {void}\n */\nfunction updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType, trackId) {\n  for (const stats of report.values()) {\n    if (stats.type === 'outbound-rtp' && !stats.isRemote) {\n      if (guessBrowser() !== 'firefox' && !stats.trackId) {\n        continue;\n      }\n      const senderReportFactoryIdsToDelete = senderReportFactoryIdsToDeleteByMediaType[stats.mediaType];\n      if (senderReportFactoryIdsToDelete) {\n        senderReportFactoryIdsToDelete.delete(stats.id);\n      }\n      const senderReportFactory = getOrCreateSenderReportFactory(factory, report, stats, trackId);\n      if (senderReportFactory) {\n        const remoteInboundStats = report.get(stats.remoteId);\n        senderReportFactory.next(trackId || senderReportFactory.trackId, stats, remoteInboundStats);\n      }\n    }\n  }\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {StatsIdsByMediaType} receiverReportFactoryIdsToDeleteByMediaType\n * @param {TrackId} [trackId]\n * @returns {void}\n */\nfunction updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType, trackId) {\n  for (const stats of report.values()) {\n    if (stats.type === 'inbound-rtp' && !stats.isRemote) {\n      const receiverReportFactoryIdsToDelete = receiverReportFactoryIdsToDeleteByMediaType[stats.mediaType];\n      if (receiverReportFactoryIdsToDelete) {\n        receiverReportFactoryIdsToDelete.delete(stats.id);\n      }\n      const receiverReportFactory = getOrCreateReceiverReportFactory(factory, report, stats, trackId);\n      if (receiverReportFactory) {\n        receiverReportFactory.next(trackId || receiverReportFactory.trackId, stats);\n      }\n    }\n  }\n}\n\n/**\n * @param {SenderReportFactoriesByMediaType|ReceiverReportFactoriesByMediaType} senderOrReceiverReportFactoriesByMediaType\n * @param {StatsIdsByMediaType} senderOrReceiverReportFactoryIdsByMediaType\n * @returns {void}\n */\nfunction deleteSenderOrReceiverReportFactories(senderOrReceiverReportFactoriesByMediaType, senderOrReceiverReportFactoryIdsByMediaType) {\n  for (const mediaType in senderOrReceiverReportFactoryIdsByMediaType) {\n    const senderOrReceiverReportFactories = senderOrReceiverReportFactoriesByMediaType[mediaType];\n    const senderOrReceiverReportFactoryIds = senderOrReceiverReportFactoryIdsByMediaType[mediaType];\n    senderOrReceiverReportFactoryIds.forEach(senderOrReceiverReportFactoryId => senderOrReceiverReportFactories.delete(senderOrReceiverReportFactoryId));\n  }\n}\n\n/**\n * @param {IceReportFactory} ice\n * @param {RTCStatsReport} report\n * @returns {void}\n */\nfunction updateIceReport(ice, report) {\n  let selectedCandidatePair;\n  for (const stats of report.values()) {\n    if (stats.type === 'transport') {\n      selectedCandidatePair = report.get(stats.selectedCandidatePairId);\n    }\n  }\n  if (selectedCandidatePair) {\n    ice.next(selectedCandidatePair);\n    return;\n  }\n  for (const stats of report.values()) {\n    if (stats.type === 'candidate-pair'\n      && stats.nominated\n      && ('selected' in stats ? stats.selected : true)) {\n      ice.next(stats);\n    }\n  }\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {Promise<PeerConnectionReport>}\n */\nfunction updateFirefox(factory) {\n  const senders = factory.pc.getTransceivers()\n    .filter(transceiver => transceiver.currentDirection && transceiver.currentDirection.match(/send/) && transceiver.sender.track)\n    .map(transceiver => transceiver.sender);\n\n  const receivers = factory.pc.getTransceivers()\n    .filter(transceiver => transceiver.currentDirection && transceiver.currentDirection.match(/recv/))\n    .map(transceiver => transceiver.receiver);\n\n  return Promise.all([\n    getSenderOrReceiverReports(senders),\n    getSenderOrReceiverReports(receivers),\n    factory.pc.getStats()\n  ]).then(([senderReports, receiverReports, pcReport]) => {\n    const senderReportFactoriesByMediaType = getSenderReportFactoriesByMediaType(factory);\n    const senderReportFactoryIdsToDeleteByMediaType = getSenderReportFactoryIdsByMediaType(factory);\n    senderReports.forEach((report, trackId) => updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType, trackId));\n    deleteSenderOrReceiverReportFactories(senderReportFactoriesByMediaType, senderReportFactoryIdsToDeleteByMediaType);\n\n    const receiverReportFactoriesByMediaType = getReceiverReportFactoriesByMediaType(factory);\n    const receiverReportFactoryIdsToDeleteByMediaType = getReceiverReportFactoryIdsByMediaType(factory);\n    receiverReports.forEach((report, trackId) => updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType, trackId));\n    deleteSenderOrReceiverReportFactories(receiverReportFactoriesByMediaType, receiverReportFactoryIdsToDeleteByMediaType);\n\n    updateIceReport(factory.ice, pcReport);\n  });\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {Promise<PeerConnectionReport>}\n */\nfunction updateChrome(factory) {\n  return factory.pc.getStats().then(report => {\n    const senderReportFactoriesByMediaType = getSenderReportFactoriesByMediaType(factory);\n    const senderReportFactoryIdsToDeleteByMediaType = getSenderReportFactoryIdsByMediaType(factory);\n    updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType);\n    deleteSenderOrReceiverReportFactories(senderReportFactoriesByMediaType, senderReportFactoryIdsToDeleteByMediaType);\n\n    const receiverReportFactoriesByMediaType = getReceiverReportFactoriesByMediaType(factory);\n    const receiverReportFactoryIdsToDeleteByMediaType = getReceiverReportFactoryIdsByMediaType(factory);\n    updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType);\n    deleteSenderOrReceiverReportFactories(receiverReportFactoriesByMediaType, receiverReportFactoryIdsToDeleteByMediaType);\n\n    updateIceReport(factory.ice, report);\n  });\n}\n\nmodule.exports = PeerConnectionReportFactory;\n"]},"metadata":{},"sourceType":"script"}