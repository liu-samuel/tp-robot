{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nvar EventEmitter = require('./eventemitter');\n\nvar RemoteAudioTrack = require('./media/track/remoteaudiotrack');\n\nvar RemoteAudioTrackPublication = require('./media/track/remoteaudiotrackpublication');\n\nvar RemoteDataTrack = require('./media/track/remotedatatrack');\n\nvar RemoteDataTrackPublication = require('./media/track/remotedatatrackpublication');\n\nvar RemoteVideoTrack = require('./media/track/remotevideotrack');\n\nvar RemoteVideoTrackPublication = require('./media/track/remotevideotrackpublication');\n\nvar util = require('./util');\n\nvar nInstances = 0;\n/**\n * {@link NetworkQualityLevel} is a value from 0â€“5, inclusive, representing the\n * quality of a network connection.\n * @typedef {number} NetworkQualityLevel\n */\n\n/**\n * @extends EventEmitter\n * @property {Map<Track.SID, AudioTrackPublication>} audioTracks -\n *    The {@link Participant}'s {@link AudioTrackPublication}s\n * @property {Map<Track.SID, DataTrackPublication>} dataTracks -\n *    The {@link Participant}'s {@link DataTrackPublication}s.\n * @property {Participant.Identity} identity - The identity of the {@link Participant}\n * @property {?NetworkQualityLevel} networkQualityLevel - The\n *    {@link Participant}'s current {@link NetworkQualityLevel}, if any\n * @property {?NetworkQualityStats} networkQualityStats - The\n *    {@link Participant}'s current {@link NetworkQualityStats}, if any\n * @property {Participant.SID} sid - The {@link Participant}'s SID\n * @property {string} state - \"connected\", \"disconnected\" or \"reconnecting\"\n * @property {Map<Track.SID, TrackPublication>} tracks -\n *    The {@link Participant}'s {@link TrackPublication}s\n * @property {Map<Track.SID, VideoTrackPublication>} videoTracks -\n *    The {@link Participant}'s {@link VideoTrackPublication}s\n * @emits Participant#disconnected\n * @emits Participant#networkQualityLevelChanged\n * @emits Participant#reconnected\n * @emits Participant#reconnecting\n * @emits Participant#trackDimensionsChanged\n * @emits Participant#trackStarted\n */\n\nvar Participant =\n/** @class */\nfunction (_super) {\n  __extends(Participant, _super);\n  /**\n   * Construct a {@link Participant}.\n   * @param {ParticipantSignaling} signaling\n   * @param {object} [options]\n   */\n\n\n  function Participant(signaling, options) {\n    var _this = _super.call(this) || this;\n\n    options = Object.assign({\n      RemoteAudioTrack: RemoteAudioTrack,\n      RemoteAudioTrackPublication: RemoteAudioTrackPublication,\n      RemoteDataTrack: RemoteDataTrack,\n      RemoteDataTrackPublication: RemoteDataTrackPublication,\n      RemoteVideoTrack: RemoteVideoTrack,\n      RemoteVideoTrackPublication: RemoteVideoTrackPublication,\n      tracks: []\n    }, options);\n    var indexed = indexTracksById(options.tracks);\n    var log = options.log.createLog('default', _this);\n    var audioTracks = new Map(indexed.audioTracks);\n    var dataTracks = new Map(indexed.dataTracks);\n    var tracks = new Map(indexed.tracks);\n    var videoTracks = new Map(indexed.videoTracks);\n    Object.defineProperties(_this, {\n      _RemoteAudioTrack: {\n        value: options.RemoteAudioTrack\n      },\n      _RemoteAudioTrackPublication: {\n        value: options.RemoteAudioTrackPublication\n      },\n      _RemoteDataTrack: {\n        value: options.RemoteDataTrack\n      },\n      _RemoteDataTrackPublication: {\n        value: options.RemoteDataTrackPublication\n      },\n      _RemoteVideoTrack: {\n        value: options.RemoteVideoTrack\n      },\n      _RemoteVideoTrackPublication: {\n        value: options.RemoteVideoTrackPublication\n      },\n      _audioTracks: {\n        value: audioTracks\n      },\n      _dataTracks: {\n        value: dataTracks\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _clientTrackSwitchOffControl: {\n        value: options.clientTrackSwitchOffControl\n      },\n      _contentPreferencesMode: {\n        value: options.contentPreferencesMode\n      },\n      _log: {\n        value: log\n      },\n      _signaling: {\n        value: signaling\n      },\n      _tracks: {\n        value: tracks\n      },\n      _trackEventReemitters: {\n        value: new Map()\n      },\n      _trackPublicationEventReemitters: {\n        value: new Map()\n      },\n      _trackSignalingUpdatedEventCallbacks: {\n        value: new Map()\n      },\n      _videoTracks: {\n        value: videoTracks\n      },\n      audioTracks: {\n        enumerable: true,\n        value: new Map()\n      },\n      dataTracks: {\n        enumerable: true,\n        value: new Map()\n      },\n      identity: {\n        enumerable: true,\n        get: function get() {\n          return signaling.identity;\n        }\n      },\n      networkQualityLevel: {\n        enumerable: true,\n        get: function get() {\n          return signaling.networkQualityLevel;\n        }\n      },\n      networkQualityStats: {\n        enumerable: true,\n        get: function get() {\n          return signaling.networkQualityStats;\n        }\n      },\n      sid: {\n        enumerable: true,\n        get: function get() {\n          return signaling.sid;\n        }\n      },\n      state: {\n        enumerable: true,\n        get: function get() {\n          return signaling.state;\n        }\n      },\n      tracks: {\n        enumerable: true,\n        value: new Map()\n      },\n      videoTracks: {\n        enumerable: true,\n        value: new Map()\n      }\n    });\n\n    _this._tracks.forEach(reemitTrackEvents.bind(null, _this));\n\n    signaling.on('networkQualityLevelChanged', function () {\n      return _this.emit('networkQualityLevelChanged', _this.networkQualityLevel, _this.networkQualityStats && (_this.networkQualityStats.audio || _this.networkQualityStats.video) ? _this.networkQualityStats : null);\n    });\n    reemitSignalingStateChangedEvents(_this, signaling);\n    log.info(\"Created a new Participant\" + (_this.identity ? \": \" + _this.identity : ''));\n    return _this;\n  }\n  /**\n   * Get the {@link RemoteTrack} events to re-emit.\n   * @private\n   * @returns {Array<Array<string>>} events\n   */\n\n\n  Participant.prototype._getTrackEvents = function () {\n    return [['dimensionsChanged', 'trackDimensionsChanged'], ['message', 'trackMessage'], ['started', 'trackStarted']];\n  };\n  /**\n   * @private\n   */\n\n\n  Participant.prototype._getTrackPublicationEvents = function () {\n    return [];\n  };\n\n  Participant.prototype.toString = function () {\n    return \"[Participant #\" + this._instanceId + \": \" + this.sid + \"]\";\n  };\n  /**\n   * @private\n   * @param {RemoteTrack} track\n   * @param {Track.ID} id\n   * @returns {?RemoteTrack}\n   */\n\n\n  Participant.prototype._addTrack = function (track, id) {\n    var log = this._log;\n\n    if (this._tracks.has(id)) {\n      return null;\n    }\n\n    this._tracks.set(id, track);\n\n    var tracksByKind = {\n      audio: this._audioTracks,\n      video: this._videoTracks,\n      data: this._dataTracks\n    }[track.kind];\n    tracksByKind.set(id, track);\n    reemitTrackEvents(this, track, id);\n    log.info(\"Added a new \" + util.trackClass(track) + \":\", id);\n    log.debug(util.trackClass(track) + \":\", track);\n    return track;\n  };\n  /**\n   * @private\n   * @param {RemoteTrackPublication} publication\n   * @returns {?RemoteTrackPublication}\n   */\n\n\n  Participant.prototype._addTrackPublication = function (publication) {\n    var log = this._log;\n\n    if (this.tracks.has(publication.trackSid)) {\n      return null;\n    }\n\n    this.tracks.set(publication.trackSid, publication);\n    var trackPublicationsByKind = {\n      audio: this.audioTracks,\n      data: this.dataTracks,\n      video: this.videoTracks\n    }[publication.kind];\n    trackPublicationsByKind.set(publication.trackSid, publication);\n    reemitTrackPublicationEvents(this, publication);\n    log.info(\"Added a new \" + util.trackPublicationClass(publication) + \":\", publication.trackSid);\n    log.debug(util.trackPublicationClass(publication) + \":\", publication);\n    return publication;\n  };\n  /**\n   * @private\n   */\n\n\n  Participant.prototype._handleTrackSignalingEvents = function () {\n    var _a = this,\n        log = _a._log,\n        clientTrackSwitchOffControl = _a._clientTrackSwitchOffControl,\n        contentPreferencesMode = _a._contentPreferencesMode;\n\n    var self = this;\n\n    if (this.state === 'disconnected') {\n      return;\n    }\n\n    var RemoteAudioTrack = this._RemoteAudioTrack;\n    var RemoteAudioTrackPublication = this._RemoteAudioTrackPublication;\n    var RemoteVideoTrack = this._RemoteVideoTrack;\n    var RemoteVideoTrackPublication = this._RemoteVideoTrackPublication;\n    var RemoteDataTrack = this._RemoteDataTrack;\n    var RemoteDataTrackPublication = this._RemoteDataTrackPublication;\n    var participantSignaling = this._signaling;\n\n    function trackSignalingAdded(signaling) {\n      var RemoteTrackPublication = {\n        audio: RemoteAudioTrackPublication,\n        data: RemoteDataTrackPublication,\n        video: RemoteVideoTrackPublication\n      }[signaling.kind];\n      var publication = new RemoteTrackPublication(signaling, {\n        log: log\n      });\n\n      self._addTrackPublication(publication);\n\n      var isSubscribed = signaling.isSubscribed;\n\n      if (isSubscribed) {\n        trackSignalingSubscribed(signaling);\n      }\n\n      self._trackSignalingUpdatedEventCallbacks.set(signaling.sid, function () {\n        if (isSubscribed !== signaling.isSubscribed) {\n          isSubscribed = signaling.isSubscribed;\n\n          if (isSubscribed) {\n            trackSignalingSubscribed(signaling);\n            return;\n          }\n\n          trackSignalingUnsubscribed(signaling);\n        }\n      });\n\n      signaling.on('updated', self._trackSignalingUpdatedEventCallbacks.get(signaling.sid));\n    }\n\n    function trackSignalingRemoved(signaling) {\n      if (signaling.isSubscribed) {\n        signaling.setTrackTransceiver(null);\n      }\n\n      var updated = self._trackSignalingUpdatedEventCallbacks.get(signaling.sid);\n\n      if (updated) {\n        signaling.removeListener('updated', updated);\n\n        self._trackSignalingUpdatedEventCallbacks.delete(signaling.sid);\n      }\n\n      var publication = self.tracks.get(signaling.sid);\n\n      if (publication) {\n        self._removeTrackPublication(publication);\n      }\n    }\n\n    function trackSignalingSubscribed(signaling) {\n      var isEnabled = signaling.isEnabled,\n          name = signaling.name,\n          kind = signaling.kind,\n          sid = signaling.sid,\n          trackTransceiver = signaling.trackTransceiver,\n          isSwitchedOff = signaling.isSwitchedOff;\n      var RemoteTrack = {\n        audio: RemoteAudioTrack,\n        video: RemoteVideoTrack,\n        data: RemoteDataTrack\n      }[kind];\n      var publication = self.tracks.get(sid); // NOTE(mroberts): It should never be the case that the TrackSignaling and\n      // MediaStreamTrack or DataTrackReceiver kinds disagree; however, just in\n      // case, we handle it here.\n\n      if (!RemoteTrack || kind !== trackTransceiver.kind) {\n        return;\n      }\n\n      var options = {\n        log: log,\n        name: name,\n        clientTrackSwitchOffControl: clientTrackSwitchOffControl,\n        contentPreferencesMode: contentPreferencesMode\n      };\n\n      var setPriority = function setPriority(newPriority) {\n        return participantSignaling.updateSubscriberTrackPriority(sid, newPriority);\n      };\n\n      var setRenderHint = function setRenderHint(renderHint) {\n        if (signaling.isSubscribed) {\n          participantSignaling.updateTrackRenderHint(sid, renderHint);\n        }\n      };\n\n      var track = kind === 'data' ? new RemoteTrack(sid, trackTransceiver, options) : new RemoteTrack(sid, trackTransceiver, isEnabled, isSwitchedOff, setPriority, setRenderHint, options);\n\n      self._addTrack(track, publication, trackTransceiver.id);\n    }\n\n    function trackSignalingUnsubscribed(signaling) {\n      var _a = __read(Array.from(self._tracks.entries()).find(function (_a) {\n        var _b = __read(_a, 2),\n            track = _b[1];\n\n        return track.sid === signaling.sid;\n      }), 2),\n          id = _a[0],\n          track = _a[1];\n\n      var publication = self.tracks.get(signaling.sid);\n\n      if (track) {\n        self._removeTrack(track, publication, id);\n      }\n    }\n\n    participantSignaling.on('trackAdded', trackSignalingAdded);\n    participantSignaling.on('trackRemoved', trackSignalingRemoved);\n    participantSignaling.tracks.forEach(trackSignalingAdded);\n    participantSignaling.on('stateChanged', function stateChanged(state) {\n      if (state === 'disconnected') {\n        log.debug('Removing event listeners');\n        participantSignaling.removeListener('stateChanged', stateChanged);\n        participantSignaling.removeListener('trackAdded', trackSignalingAdded);\n        participantSignaling.removeListener('trackRemoved', trackSignalingRemoved);\n      } else if (state === 'connected') {\n        // NOTE(mmalavalli): Any transition to \"connected\" here is a result of\n        // successful signaling reconnection, and not a first-time establishment\n        // of the signaling connection.\n        log.info('reconnected'); // NOTE(mpatwardhan): `stateChanged` can get emitted with StateMachine locked.\n        // Do not signal  public events synchronously with lock held.\n\n        setTimeout(function () {\n          return self.emit('reconnected');\n        }, 0);\n      }\n    });\n  };\n  /**\n   * @private\n   * @param {RemoteTrack} track\n   * @param {Track.ID} id\n   * @returns {?RemoteTrack}\n   */\n\n\n  Participant.prototype._removeTrack = function (track, id) {\n    if (!this._tracks.has(id)) {\n      return null;\n    }\n\n    this._tracks.delete(id);\n\n    var tracksByKind = {\n      audio: this._audioTracks,\n      video: this._videoTracks,\n      data: this._dataTracks\n    }[track.kind];\n    tracksByKind.delete(id);\n    var reemitters = this._trackEventReemitters.get(id) || new Map();\n    reemitters.forEach(function (reemitter, event) {\n      track.removeListener(event, reemitter);\n    });\n    var log = this._log;\n    log.info(\"Removed a \" + util.trackClass(track) + \":\", id);\n    log.debug(util.trackClass(track) + \":\", track);\n    return track;\n  };\n  /**\n   * @private\n   * @param {RemoteTrackPublication} publication\n   * @returns {?RemoteTrackPublication}\n   */\n\n\n  Participant.prototype._removeTrackPublication = function (publication) {\n    publication = this.tracks.get(publication.trackSid);\n\n    if (!publication) {\n      return null;\n    }\n\n    this.tracks.delete(publication.trackSid);\n    var trackPublicationsByKind = {\n      audio: this.audioTracks,\n      data: this.dataTracks,\n      video: this.videoTracks\n    }[publication.kind];\n    trackPublicationsByKind.delete(publication.trackSid);\n    var reemitters = this._trackPublicationEventReemitters.get(publication.trackSid) || new Map();\n    reemitters.forEach(function (reemitter, event) {\n      publication.removeListener(event, reemitter);\n    });\n    var log = this._log;\n    log.info(\"Removed a \" + util.trackPublicationClass(publication) + \":\", publication.trackSid);\n    log.debug(util.trackPublicationClass(publication) + \":\", publication);\n    return publication;\n  };\n\n  Participant.prototype.toJSON = function () {\n    return util.valueToJSON(this);\n  };\n\n  return Participant;\n}(EventEmitter);\n/**\n * A {@link Participant.SID} is a 34-character string starting with \"PA\"\n * that uniquely identifies a {@link Participant}.\n * @type string\n * @typedef Participant.SID\n */\n\n/**\n * A {@link Participant.Identity} is a string that identifies a\n * {@link Participant}. You can think of it like a name.\n * @typedef {string} Participant.Identity\n */\n\n/**\n * The {@link Participant} has disconnected.\n * @param {Participant} participant - The {@link Participant} that disconnected.\n * @event Participant#disconnected\n */\n\n/**\n * The {@link Participant}'s {@link NetworkQualityLevel} changed.\n * @param {NetworkQualityLevel} networkQualityLevel - The new\n *   {@link NetworkQualityLevel}\n * @param {?NetworkQualityStats} networkQualityStats - The {@link NetworkQualityStats}\n *   based on which {@link NetworkQualityLevel} is calculated, if any\n * @event Participant#networkQualityLevelChanged\n */\n\n/**\n * The {@link Participant} has reconnected to the {@link Room} after a signaling connection disruption.\n * @event Participant#reconnected\n */\n\n/**\n * The {@link Participant} is reconnecting to the {@link Room} after a signaling connection disruption.\n * @event Participant#reconnecting\n */\n\n/**\n * One of the {@link Participant}'s {@link VideoTrack}'s dimensions changed.\n * @param {VideoTrack} track - The {@link VideoTrack} whose dimensions changed\n * @event Participant#trackDimensionsChanged\n */\n\n/**\n * One of the {@link Participant}'s {@link Track}s started.\n * @param {Track} track - The {@link Track} that started\n * @event Participant#trackStarted\n */\n\n/**\n * Indexed {@link Track}s by {@link Track.ID}.\n * @typedef {object} IndexedTracks\n * @property {Array<{0: Track.ID, 1: AudioTrack}>} audioTracks - Indexed\n *   {@link AudioTrack}s\n * @property {Array<{0: Track.ID, 1: DataTrack}>} dataTracks - Indexed\n *   {@link DataTrack}s\n * @property {Array<{0: Track.ID, 1: Track}>} tracks - Indexed {@link Track}s\n * @property {Array<{0: Track.ID, 1: VideoTrack}>} videoTracks - Indexed\n *   {@link VideoTrack}s\n * @private\n */\n\n/**\n * Index tracks by {@link Track.ID}.\n * @param {Array<Track>} tracks\n * @returns {IndexedTracks}\n * @private\n */\n\n\nfunction indexTracksById(tracks) {\n  var indexedTracks = tracks.map(function (track) {\n    return [track.id, track];\n  });\n  var indexedAudioTracks = indexedTracks.filter(function (keyValue) {\n    return keyValue[1].kind === 'audio';\n  });\n  var indexedVideoTracks = indexedTracks.filter(function (keyValue) {\n    return keyValue[1].kind === 'video';\n  });\n  var indexedDataTracks = indexedTracks.filter(function (keyValue) {\n    return keyValue[1].kind === 'data';\n  });\n  return {\n    audioTracks: indexedAudioTracks,\n    dataTracks: indexedDataTracks,\n    tracks: indexedTracks,\n    videoTracks: indexedVideoTracks\n  };\n}\n/**\n * Re-emit {@link ParticipantSignaling} 'stateChanged' events.\n * @param {Participant} participant\n * @param {ParticipantSignaling} signaling\n * @private\n */\n\n\nfunction reemitSignalingStateChangedEvents(participant, signaling) {\n  var log = participant._log;\n\n  if (participant.state === 'disconnected') {\n    return;\n  } // Reemit state transition events from the ParticipantSignaling.\n\n\n  signaling.on('stateChanged', function stateChanged(state) {\n    log.debug('Transitioned to state:', state);\n    participant.emit(state, participant);\n\n    if (state === 'disconnected') {\n      log.debug('Removing Track event reemitters');\n      signaling.removeListener('stateChanged', stateChanged);\n\n      participant._tracks.forEach(function (track) {\n        var reemitters = participant._trackEventReemitters.get(track.id);\n\n        if (track && reemitters) {\n          reemitters.forEach(function (reemitter, event) {\n            track.removeListener(event, reemitter);\n          });\n        }\n      }); // eslint-disable-next-line no-warning-comments\n      // TODO(joma): Removing this introduced unit test failures in the RemoteParticipant.\n      // Investigate further before removing.\n\n\n      signaling.tracks.forEach(function (trackSignaling) {\n        var track = participant._tracks.get(trackSignaling.id);\n\n        var reemitters = participant._trackEventReemitters.get(trackSignaling.id);\n\n        if (track && reemitters) {\n          reemitters.forEach(function (reemitter, event) {\n            track.removeListener(event, reemitter);\n          });\n        }\n      });\n\n      participant._trackEventReemitters.clear();\n\n      participant.tracks.forEach(function (publication) {\n        participant._trackPublicationEventReemitters.get(publication.trackSid).forEach(function (reemitter, event) {\n          publication.removeListener(event, reemitter);\n        });\n      });\n\n      participant._trackPublicationEventReemitters.clear();\n    }\n  });\n}\n/**\n * Re-emit {@link Track} events.\n * @param {Participant} participant\n * @param {Track} track\n * @param {Track.ID} id\n * @private\n */\n\n\nfunction reemitTrackEvents(participant, track, id) {\n  var trackEventReemitters = new Map();\n\n  if (participant.state === 'disconnected') {\n    return;\n  }\n\n  participant._getTrackEvents().forEach(function (eventPair) {\n    var trackEvent = eventPair[0];\n    var participantEvent = eventPair[1];\n    trackEventReemitters.set(trackEvent, function () {\n      var args = [participantEvent].concat([].slice.call(arguments));\n      return participant.emit.apply(participant, __spreadArray([], __read(args)));\n    });\n    track.on(trackEvent, trackEventReemitters.get(trackEvent));\n  });\n\n  participant._trackEventReemitters.set(id, trackEventReemitters);\n}\n/**\n * Re-emit {@link TrackPublication} events.\n * @private\n * @param {Participant} participant\n * @param {TrackPublication} publication\n */\n\n\nfunction reemitTrackPublicationEvents(participant, publication) {\n  var publicationEventReemitters = new Map();\n\n  if (participant.state === 'disconnected') {\n    return;\n  }\n\n  participant._getTrackPublicationEvents().forEach(function (_a) {\n    var _b = __read(_a, 2),\n        publicationEvent = _b[0],\n        participantEvent = _b[1];\n\n    publicationEventReemitters.set(publicationEvent, function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      participant.emit.apply(participant, __spreadArray(__spreadArray([participantEvent], __read(args)), [publication]));\n    });\n    publication.on(publicationEvent, publicationEventReemitters.get(publicationEvent));\n  });\n\n  participant._trackPublicationEventReemitters.set(publication.trackSid, publicationEventReemitters);\n}\n\nmodule.exports = Participant;","map":{"version":3,"mappings":"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","names":["EventEmitter","require","RemoteAudioTrack","RemoteAudioTrackPublication","RemoteDataTrack","RemoteDataTrackPublication","RemoteVideoTrack","RemoteVideoTrackPublication","util","nInstances","__extends","signaling","options","_super","Object","assign","tracks","indexed","indexTracksById","log","createLog","_this","audioTracks","Map","dataTracks","videoTracks","defineProperties","_RemoteAudioTrack","value","_RemoteAudioTrackPublication","_RemoteDataTrack","_RemoteDataTrackPublication","_RemoteVideoTrack","_RemoteVideoTrackPublication","_audioTracks","_dataTracks","_instanceId","_clientTrackSwitchOffControl","clientTrackSwitchOffControl","_contentPreferencesMode","contentPreferencesMode","_log","_signaling","_tracks","_trackEventReemitters","_trackPublicationEventReemitters","_trackSignalingUpdatedEventCallbacks","_videoTracks","enumerable","identity","get","networkQualityLevel","networkQualityStats","sid","state","forEach","reemitTrackEvents","bind","on","emit","audio","video","reemitSignalingStateChangedEvents","info","Participant","track","id","has","set","tracksByKind","data","kind","trackClass","debug","publication","trackSid","trackPublicationsByKind","reemitTrackPublicationEvents","trackPublicationClass","self","participantSignaling","trackSignalingAdded","RemoteTrackPublication","_addTrackPublication","isSubscribed","trackSignalingSubscribed","trackSignalingUnsubscribed","trackSignalingRemoved","setTrackTransceiver","updated","removeListener","delete","_removeTrackPublication","name","trackTransceiver","isSwitchedOff","RemoteTrack","setPriority","updateSubscriberTrackPriority","newPriority","setRenderHint","updateTrackRenderHint","renderHint","isEnabled","_addTrack","Array","from","entries","find","_a","_b","_removeTrack","stateChanged","setTimeout","reemitters","reemitter","event","valueToJSON","indexedTracks","map","indexedAudioTracks","filter","indexedVideoTracks","indexedDataTracks","participant","trackSignaling","clear","trackEventReemitters","_getTrackEvents","trackEvent","eventPair","participantEvent","args","concat","slice","call","arguments","apply","__spreadArray","publicationEventReemitters","_getTrackPublicationEvents","publicationEvent","__read","module","exports"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/participant.js"],"sourcesContent":["'use strict';\n\nconst EventEmitter = require('./eventemitter');\nconst RemoteAudioTrack = require('./media/track/remoteaudiotrack');\nconst RemoteAudioTrackPublication = require('./media/track/remoteaudiotrackpublication');\nconst RemoteDataTrack = require('./media/track/remotedatatrack');\nconst RemoteDataTrackPublication = require('./media/track/remotedatatrackpublication');\nconst RemoteVideoTrack = require('./media/track/remotevideotrack');\nconst RemoteVideoTrackPublication = require('./media/track/remotevideotrackpublication');\nconst util = require('./util');\n\nlet nInstances = 0;\n\n/**\n * {@link NetworkQualityLevel} is a value from 0â€“5, inclusive, representing the\n * quality of a network connection.\n * @typedef {number} NetworkQualityLevel\n */\n\n/**\n * @extends EventEmitter\n * @property {Map<Track.SID, AudioTrackPublication>} audioTracks -\n *    The {@link Participant}'s {@link AudioTrackPublication}s\n * @property {Map<Track.SID, DataTrackPublication>} dataTracks -\n *    The {@link Participant}'s {@link DataTrackPublication}s.\n * @property {Participant.Identity} identity - The identity of the {@link Participant}\n * @property {?NetworkQualityLevel} networkQualityLevel - The\n *    {@link Participant}'s current {@link NetworkQualityLevel}, if any\n * @property {?NetworkQualityStats} networkQualityStats - The\n *    {@link Participant}'s current {@link NetworkQualityStats}, if any\n * @property {Participant.SID} sid - The {@link Participant}'s SID\n * @property {string} state - \"connected\", \"disconnected\" or \"reconnecting\"\n * @property {Map<Track.SID, TrackPublication>} tracks -\n *    The {@link Participant}'s {@link TrackPublication}s\n * @property {Map<Track.SID, VideoTrackPublication>} videoTracks -\n *    The {@link Participant}'s {@link VideoTrackPublication}s\n * @emits Participant#disconnected\n * @emits Participant#networkQualityLevelChanged\n * @emits Participant#reconnected\n * @emits Participant#reconnecting\n * @emits Participant#trackDimensionsChanged\n * @emits Participant#trackStarted\n */\nclass Participant extends EventEmitter {\n  /**\n   * Construct a {@link Participant}.\n   * @param {ParticipantSignaling} signaling\n   * @param {object} [options]\n   */\n  constructor(signaling, options) {\n    super();\n\n    options = Object.assign({\n      RemoteAudioTrack,\n      RemoteAudioTrackPublication,\n      RemoteDataTrack,\n      RemoteDataTrackPublication,\n      RemoteVideoTrack,\n      RemoteVideoTrackPublication,\n      tracks: []\n    }, options);\n\n    const indexed = indexTracksById(options.tracks);\n    const log = options.log.createLog('default', this);\n    const audioTracks = new Map(indexed.audioTracks);\n    const dataTracks = new Map(indexed.dataTracks);\n    const tracks = new Map(indexed.tracks);\n    const videoTracks = new Map(indexed.videoTracks);\n\n    Object.defineProperties(this, {\n      _RemoteAudioTrack: {\n        value: options.RemoteAudioTrack\n      },\n      _RemoteAudioTrackPublication: {\n        value: options.RemoteAudioTrackPublication\n      },\n      _RemoteDataTrack: {\n        value: options.RemoteDataTrack\n      },\n      _RemoteDataTrackPublication: {\n        value: options.RemoteDataTrackPublication\n      },\n      _RemoteVideoTrack: {\n        value: options.RemoteVideoTrack\n      },\n      _RemoteVideoTrackPublication: {\n        value: options.RemoteVideoTrackPublication\n      },\n      _audioTracks: {\n        value: audioTracks\n      },\n      _dataTracks: {\n        value: dataTracks\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _clientTrackSwitchOffControl: {\n        value: options.clientTrackSwitchOffControl,\n      },\n      _contentPreferencesMode: {\n        value: options.contentPreferencesMode,\n      },\n      _log: {\n        value: log\n      },\n      _signaling: {\n        value: signaling\n      },\n      _tracks: {\n        value: tracks\n      },\n      _trackEventReemitters: {\n        value: new Map()\n      },\n      _trackPublicationEventReemitters: {\n        value: new Map()\n      },\n      _trackSignalingUpdatedEventCallbacks: {\n        value: new Map()\n      },\n      _videoTracks: {\n        value: videoTracks\n      },\n      audioTracks: {\n        enumerable: true,\n        value: new Map()\n      },\n      dataTracks: {\n        enumerable: true,\n        value: new Map()\n      },\n      identity: {\n        enumerable: true,\n        get() {\n          return signaling.identity;\n        }\n      },\n      networkQualityLevel: {\n        enumerable: true,\n        get() {\n          return signaling.networkQualityLevel;\n        }\n      },\n      networkQualityStats: {\n        enumerable: true,\n        get() {\n          return signaling.networkQualityStats;\n        }\n      },\n      sid: {\n        enumerable: true,\n        get() {\n          return signaling.sid;\n        }\n      },\n      state: {\n        enumerable: true,\n        get() {\n          return signaling.state;\n        }\n      },\n      tracks: {\n        enumerable: true,\n        value: new Map()\n      },\n      videoTracks: {\n        enumerable: true,\n        value: new Map()\n      }\n    });\n\n    this._tracks.forEach(reemitTrackEvents.bind(null, this));\n    signaling.on('networkQualityLevelChanged', () =>\n      this.emit('networkQualityLevelChanged', this.networkQualityLevel,\n        this.networkQualityStats &&\n        (this.networkQualityStats.audio || this.networkQualityStats.video)\n          ? this.networkQualityStats\n          : null));\n    reemitSignalingStateChangedEvents(this, signaling);\n    log.info(`Created a new Participant${this.identity ? `: ${this.identity}` : ''}`);\n  }\n\n  /**\n   * Get the {@link RemoteTrack} events to re-emit.\n   * @private\n   * @returns {Array<Array<string>>} events\n   */\n  _getTrackEvents() {\n    return [\n      ['dimensionsChanged', 'trackDimensionsChanged'],\n      ['message', 'trackMessage'],\n      ['started', 'trackStarted']\n    ];\n  }\n\n  /**\n   * @private\n   */\n  _getTrackPublicationEvents() {\n    return [];\n  }\n\n  toString() {\n    return `[Participant #${this._instanceId}: ${this.sid}]`;\n  }\n\n  /**\n   * @private\n   * @param {RemoteTrack} track\n   * @param {Track.ID} id\n   * @returns {?RemoteTrack}\n   */\n  _addTrack(track, id) {\n    const log = this._log;\n    if (this._tracks.has(id)) {\n      return null;\n    }\n    this._tracks.set(id, track);\n\n    const tracksByKind = {\n      audio: this._audioTracks,\n      video: this._videoTracks,\n      data: this._dataTracks\n    }[track.kind];\n    tracksByKind.set(id, track);\n    reemitTrackEvents(this, track, id);\n\n    log.info(`Added a new ${util.trackClass(track)}:`, id);\n    log.debug(`${util.trackClass(track)}:`, track);\n\n    return track;\n  }\n\n\n  /**\n   * @private\n   * @param {RemoteTrackPublication} publication\n   * @returns {?RemoteTrackPublication}\n   */\n  _addTrackPublication(publication) {\n    const log = this._log;\n    if (this.tracks.has(publication.trackSid)) {\n      return null;\n    }\n    this.tracks.set(publication.trackSid, publication);\n\n    const trackPublicationsByKind = {\n      audio: this.audioTracks,\n      data: this.dataTracks,\n      video: this.videoTracks\n    }[publication.kind];\n    trackPublicationsByKind.set(publication.trackSid, publication);\n    reemitTrackPublicationEvents(this, publication);\n\n    log.info(`Added a new ${util.trackPublicationClass(publication)}:`, publication.trackSid);\n    log.debug(`${util.trackPublicationClass(publication)}:`, publication);\n    return publication;\n  }\n\n  /**\n   * @private\n   */\n  _handleTrackSignalingEvents() {\n    const { _log: log, _clientTrackSwitchOffControl: clientTrackSwitchOffControl, _contentPreferencesMode: contentPreferencesMode } = this;\n    const self = this;\n\n    if (this.state === 'disconnected') {\n      return;\n    }\n\n    const RemoteAudioTrack = this._RemoteAudioTrack;\n    const RemoteAudioTrackPublication = this._RemoteAudioTrackPublication;\n    const RemoteVideoTrack = this._RemoteVideoTrack;\n    const RemoteVideoTrackPublication = this._RemoteVideoTrackPublication;\n    const RemoteDataTrack = this._RemoteDataTrack;\n    const RemoteDataTrackPublication = this._RemoteDataTrackPublication;\n    const participantSignaling = this._signaling;\n\n    function trackSignalingAdded(signaling) {\n      const RemoteTrackPublication = {\n        audio: RemoteAudioTrackPublication,\n        data: RemoteDataTrackPublication,\n        video: RemoteVideoTrackPublication\n      }[signaling.kind];\n\n      const publication = new RemoteTrackPublication(signaling, { log });\n      self._addTrackPublication(publication);\n\n      let isSubscribed = signaling.isSubscribed;\n      if (isSubscribed) {\n        trackSignalingSubscribed(signaling);\n      }\n\n      self._trackSignalingUpdatedEventCallbacks.set(signaling.sid, () => {\n        if (isSubscribed !== signaling.isSubscribed) {\n          isSubscribed = signaling.isSubscribed;\n          if (isSubscribed) {\n            trackSignalingSubscribed(signaling);\n            return;\n          }\n          trackSignalingUnsubscribed(signaling);\n        }\n      });\n      signaling.on('updated', self._trackSignalingUpdatedEventCallbacks.get(signaling.sid));\n    }\n\n    function trackSignalingRemoved(signaling) {\n      if (signaling.isSubscribed) {\n        signaling.setTrackTransceiver(null);\n      }\n      const updated = self._trackSignalingUpdatedEventCallbacks.get(signaling.sid);\n      if (updated) {\n        signaling.removeListener('updated', updated);\n        self._trackSignalingUpdatedEventCallbacks.delete(signaling.sid);\n      }\n      const publication = self.tracks.get(signaling.sid);\n      if (publication) {\n        self._removeTrackPublication(publication);\n      }\n    }\n\n    function trackSignalingSubscribed(signaling) {\n      const { isEnabled, name, kind, sid, trackTransceiver, isSwitchedOff } = signaling;\n      const RemoteTrack = {\n        audio: RemoteAudioTrack,\n        video: RemoteVideoTrack,\n        data: RemoteDataTrack\n      }[kind];\n\n      const publication = self.tracks.get(sid);\n\n      // NOTE(mroberts): It should never be the case that the TrackSignaling and\n      // MediaStreamTrack or DataTrackReceiver kinds disagree; however, just in\n      // case, we handle it here.\n      if (!RemoteTrack || kind !== trackTransceiver.kind) {\n        return;\n      }\n\n      const options = { log, name, clientTrackSwitchOffControl, contentPreferencesMode };\n      const setPriority = newPriority => participantSignaling.updateSubscriberTrackPriority(sid, newPriority);\n      const setRenderHint = renderHint => {\n        if (signaling.isSubscribed) {\n          participantSignaling.updateTrackRenderHint(sid, renderHint);\n        }\n      };\n      const track = kind === 'data'\n        ? new RemoteTrack(sid, trackTransceiver, options)\n        : new RemoteTrack(sid, trackTransceiver, isEnabled, isSwitchedOff, setPriority, setRenderHint, options);\n\n      self._addTrack(track, publication, trackTransceiver.id);\n    }\n\n    function trackSignalingUnsubscribed(signaling) {\n      const [id, track] = Array.from(self._tracks.entries()).find(([, track]) => track.sid === signaling.sid);\n      const publication = self.tracks.get(signaling.sid);\n      if (track) {\n        self._removeTrack(track, publication, id);\n      }\n    }\n\n    participantSignaling.on('trackAdded', trackSignalingAdded);\n    participantSignaling.on('trackRemoved', trackSignalingRemoved);\n\n    participantSignaling.tracks.forEach(trackSignalingAdded);\n\n    participantSignaling.on('stateChanged', function stateChanged(state) {\n      if (state === 'disconnected') {\n        log.debug('Removing event listeners');\n        participantSignaling.removeListener('stateChanged', stateChanged);\n        participantSignaling.removeListener('trackAdded', trackSignalingAdded);\n        participantSignaling.removeListener('trackRemoved', trackSignalingRemoved);\n      } else if (state === 'connected') {\n        // NOTE(mmalavalli): Any transition to \"connected\" here is a result of\n        // successful signaling reconnection, and not a first-time establishment\n        // of the signaling connection.\n        log.info('reconnected');\n\n        // NOTE(mpatwardhan): `stateChanged` can get emitted with StateMachine locked.\n        // Do not signal  public events synchronously with lock held.\n        setTimeout(() => self.emit('reconnected'), 0);\n\n      }\n    });\n  }\n\n  /**\n   * @private\n   * @param {RemoteTrack} track\n   * @param {Track.ID} id\n   * @returns {?RemoteTrack}\n   */\n  _removeTrack(track, id) {\n    if (!this._tracks.has(id)) {\n      return null;\n    }\n    this._tracks.delete(id);\n\n    const tracksByKind = {\n      audio: this._audioTracks,\n      video: this._videoTracks,\n      data: this._dataTracks\n    }[track.kind];\n    tracksByKind.delete(id);\n\n    const reemitters = this._trackEventReemitters.get(id) || new Map();\n    reemitters.forEach((reemitter, event) => {\n      track.removeListener(event, reemitter);\n    });\n\n    const log = this._log;\n    log.info(`Removed a ${util.trackClass(track)}:`, id);\n    log.debug(`${util.trackClass(track)}:`, track);\n    return track;\n  }\n\n  /**\n   * @private\n   * @param {RemoteTrackPublication} publication\n   * @returns {?RemoteTrackPublication}\n   */\n  _removeTrackPublication(publication) {\n    publication = this.tracks.get(publication.trackSid);\n    if (!publication) {\n      return null;\n    }\n    this.tracks.delete(publication.trackSid);\n\n    const trackPublicationsByKind = {\n      audio: this.audioTracks,\n      data: this.dataTracks,\n      video: this.videoTracks\n    }[publication.kind];\n    trackPublicationsByKind.delete(publication.trackSid);\n\n    const reemitters = this._trackPublicationEventReemitters.get(publication.trackSid) || new Map();\n    reemitters.forEach((reemitter, event) => {\n      publication.removeListener(event, reemitter);\n    });\n\n    const log = this._log;\n    log.info(`Removed a ${util.trackPublicationClass(publication)}:`, publication.trackSid);\n    log.debug(`${util.trackPublicationClass(publication)}:`, publication);\n    return publication;\n  }\n\n  toJSON() {\n    return util.valueToJSON(this);\n  }\n}\n\n/**\n * A {@link Participant.SID} is a 34-character string starting with \"PA\"\n * that uniquely identifies a {@link Participant}.\n * @type string\n * @typedef Participant.SID\n */\n\n/**\n * A {@link Participant.Identity} is a string that identifies a\n * {@link Participant}. You can think of it like a name.\n * @typedef {string} Participant.Identity\n */\n\n/**\n * The {@link Participant} has disconnected.\n * @param {Participant} participant - The {@link Participant} that disconnected.\n * @event Participant#disconnected\n */\n\n/**\n * The {@link Participant}'s {@link NetworkQualityLevel} changed.\n * @param {NetworkQualityLevel} networkQualityLevel - The new\n *   {@link NetworkQualityLevel}\n * @param {?NetworkQualityStats} networkQualityStats - The {@link NetworkQualityStats}\n *   based on which {@link NetworkQualityLevel} is calculated, if any\n * @event Participant#networkQualityLevelChanged\n */\n\n/**\n * The {@link Participant} has reconnected to the {@link Room} after a signaling connection disruption.\n * @event Participant#reconnected\n */\n\n/**\n * The {@link Participant} is reconnecting to the {@link Room} after a signaling connection disruption.\n * @event Participant#reconnecting\n */\n\n/**\n * One of the {@link Participant}'s {@link VideoTrack}'s dimensions changed.\n * @param {VideoTrack} track - The {@link VideoTrack} whose dimensions changed\n * @event Participant#trackDimensionsChanged\n */\n\n/**\n * One of the {@link Participant}'s {@link Track}s started.\n * @param {Track} track - The {@link Track} that started\n * @event Participant#trackStarted\n */\n\n/**\n * Indexed {@link Track}s by {@link Track.ID}.\n * @typedef {object} IndexedTracks\n * @property {Array<{0: Track.ID, 1: AudioTrack}>} audioTracks - Indexed\n *   {@link AudioTrack}s\n * @property {Array<{0: Track.ID, 1: DataTrack}>} dataTracks - Indexed\n *   {@link DataTrack}s\n * @property {Array<{0: Track.ID, 1: Track}>} tracks - Indexed {@link Track}s\n * @property {Array<{0: Track.ID, 1: VideoTrack}>} videoTracks - Indexed\n *   {@link VideoTrack}s\n * @private\n */\n\n/**\n * Index tracks by {@link Track.ID}.\n * @param {Array<Track>} tracks\n * @returns {IndexedTracks}\n * @private\n */\nfunction indexTracksById(tracks) {\n  const indexedTracks = tracks.map(track => [track.id, track]);\n  const indexedAudioTracks = indexedTracks.filter(keyValue => keyValue[1].kind === 'audio');\n  const indexedVideoTracks = indexedTracks.filter(keyValue => keyValue[1].kind === 'video');\n  const indexedDataTracks = indexedTracks.filter(keyValue => keyValue[1].kind === 'data');\n\n  return {\n    audioTracks: indexedAudioTracks,\n    dataTracks: indexedDataTracks,\n    tracks: indexedTracks,\n    videoTracks: indexedVideoTracks\n  };\n}\n\n/**\n * Re-emit {@link ParticipantSignaling} 'stateChanged' events.\n * @param {Participant} participant\n * @param {ParticipantSignaling} signaling\n * @private\n */\nfunction reemitSignalingStateChangedEvents(participant, signaling) {\n  const log = participant._log;\n\n  if (participant.state === 'disconnected') {\n    return;\n  }\n\n  // Reemit state transition events from the ParticipantSignaling.\n  signaling.on('stateChanged', function stateChanged(state) {\n    log.debug('Transitioned to state:', state);\n    participant.emit(state, participant);\n    if (state === 'disconnected') {\n      log.debug('Removing Track event reemitters');\n      signaling.removeListener('stateChanged', stateChanged);\n\n      participant._tracks.forEach(track => {\n        const reemitters = participant._trackEventReemitters.get(track.id);\n        if (track && reemitters) {\n          reemitters.forEach((reemitter, event) => {\n            track.removeListener(event, reemitter);\n          });\n        }\n      });\n\n      // eslint-disable-next-line no-warning-comments\n      // TODO(joma): Removing this introduced unit test failures in the RemoteParticipant.\n      // Investigate further before removing.\n      signaling.tracks.forEach(trackSignaling => {\n        const track = participant._tracks.get(trackSignaling.id);\n        const reemitters = participant._trackEventReemitters.get(trackSignaling.id);\n        if (track && reemitters) {\n          reemitters.forEach((reemitter, event) => {\n            track.removeListener(event, reemitter);\n          });\n        }\n      });\n\n      participant._trackEventReemitters.clear();\n\n      participant.tracks.forEach(publication => {\n        participant._trackPublicationEventReemitters.get(publication.trackSid)\n          .forEach((reemitter, event) => {\n            publication.removeListener(event, reemitter);\n          });\n      });\n      participant._trackPublicationEventReemitters.clear();\n    }\n  });\n}\n\n/**\n * Re-emit {@link Track} events.\n * @param {Participant} participant\n * @param {Track} track\n * @param {Track.ID} id\n * @private\n */\nfunction reemitTrackEvents(participant, track, id) {\n  const trackEventReemitters = new Map();\n\n  if (participant.state === 'disconnected') {\n    return;\n  }\n\n  participant._getTrackEvents().forEach(eventPair => {\n    const trackEvent = eventPair[0];\n    const participantEvent = eventPair[1];\n\n    trackEventReemitters.set(trackEvent, function() {\n      const args = [participantEvent].concat([].slice.call(arguments));\n      return participant.emit(...args);\n    });\n\n    track.on(trackEvent, trackEventReemitters.get(trackEvent));\n  });\n\n  participant._trackEventReemitters.set(id, trackEventReemitters);\n}\n\n/**\n * Re-emit {@link TrackPublication} events.\n * @private\n * @param {Participant} participant\n * @param {TrackPublication} publication\n */\nfunction reemitTrackPublicationEvents(participant, publication) {\n  const publicationEventReemitters = new Map();\n\n  if (participant.state === 'disconnected') {\n    return;\n  }\n\n  participant._getTrackPublicationEvents().forEach(([publicationEvent, participantEvent]) => {\n    publicationEventReemitters.set(publicationEvent, (...args) => {\n      participant.emit(participantEvent, ...args, publication);\n    });\n    publication.on(publicationEvent, publicationEventReemitters.get(publicationEvent));\n  });\n\n  participant._trackPublicationEventReemitters.set(publication.trackSid, publicationEventReemitters);\n}\n\nmodule.exports = Participant;\n"]},"metadata":{},"sourceType":"script"}