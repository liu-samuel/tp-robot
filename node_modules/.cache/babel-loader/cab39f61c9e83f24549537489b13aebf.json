{"ast":null,"code":"/* globals chrome, navigator */\n'use strict';\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n/**\n * Check whether the current browser is an Android device.\n * @returns {boolean}\n */\n\n\nfunction isAndroid() {\n  return /Android/.test(navigator.userAgent);\n}\n/**\n * Check whether the current browser is an iOS device.\n * @returns {boolean}\n */\n\n\nfunction isIOS() {\n  return /iPad|iPhone|iPod/.test(navigator.userAgent);\n}\n/**\n * Detects whether or not a device is an Apple touch screen device.\n * @returns {boolean}\n */\n\n\nfunction hasTouchScreen() {\n  return navigator && navigator.maxTouchPoints && navigator.maxTouchPoints > 2;\n}\n/**\n * Detects whether or not a device is an iPad\n * @returns {boolean}\n */\n\n\nfunction isIpad() {\n  return hasTouchScreen() && window.screen.width >= 744 && (/Macintosh/i.test(navigator.userAgent) || /iPad/.test(navigator.userAgent) || /iPad/.test(navigator.platform));\n}\n/**\n * Detects whether or not a device is an iPhone\n * @returns {boolean}\n */\n\n\nfunction isIphone() {\n  return hasTouchScreen() && window.screen.width <= 476 && (/Macintosh/i.test(navigator.userAgent) || /iPhone/.test(navigator.userAgent) || /iPhone/.test(navigator.platform));\n}\n/**\n * Check whether the current browser is a mobile browser\n * @returns {boolean}\n */\n\n\nfunction isMobile() {\n  return /Mobi/.test(navigator.userAgent);\n}\n/**\n * Check whether the current browser is non-Chromium Edge.\n * @param {string} browser\n * @returns {boolean}\n */\n\n\nfunction isNonChromiumEdge(browser) {\n  return browser === 'chrome' && /Edge/.test(navigator.userAgent) && (typeof chrome === 'undefined' || typeof chrome.runtime === 'undefined');\n}\n/**\n * Get the name of the rebranded Chromium browser, if any. Re-branded Chrome's user\n * agent has the following format:\n * <source>/<version> (<os>) <engine>/<version> (<engine_name>) Chrome/<version> [Mobile] Safari/<version>\n * @param browser\n * @returns {?string} Name of the rebranded Chrome browser, or null if the browser\n *   is either not Chrome or vanilla Chrome.\n */\n\n\nfunction rebrandedChromeBrowser(browser) {\n  // If the browser is not Chrome based, then it is not a rebranded Chrome browser.\n  if (browser !== 'chrome') {\n    return null;\n  } // Latest desktop Brave browser has a \"brave\" property in navigator.\n\n\n  if ('brave' in navigator) {\n    return 'brave';\n  } // Remove the \"(.+)\" entries from the user agent thereby retaining only the\n  // <name>[/<version>] entries.\n\n\n  var parenthesizedSubstrings = getParenthesizedSubstrings(navigator.userAgent);\n  var nameAndVersions = parenthesizedSubstrings.reduce(function (userAgent, substring) {\n    return userAgent.replace(substring, '');\n  }, navigator.userAgent); // Extract the potential browser <name>s by ignoring the first two names, which\n  // point to <source> and <engine>.\n\n  var matches = nameAndVersions.match(/[^\\s]+/g) || [];\n\n  var _a = __read(matches.map(function (nameAndVersion) {\n    return nameAndVersion.split('/')[0].toLowerCase();\n  })),\n      browserNames = _a.slice(2); // Extract the <name> that is not expected to be present in the vanilla Chrome\n  // browser, which indicates the rebranded name (ex: \"edg[e]\", \"electron\"). If null,\n  // then this is a vanilla Chrome browser.\n\n\n  return browserNames.find(function (name) {\n    return !['chrome', 'mobile', 'safari'].includes(name);\n  }) || null;\n}\n/**\n * Get the name of the mobile webkit based browser, if any.\n * @param browser\n * @returns {?string} Name of the mobile webkit based browser, or null if the browser\n *   is either not webkit based or mobile safari.\n */\n\n\nfunction mobileWebKitBrowser(browser) {\n  if (browser !== 'safari') {\n    return null;\n  }\n\n  if ('brave' in navigator) {\n    return 'brave';\n  }\n\n  return ['edge', 'edg'].find(function (name) {\n    return navigator.userAgent.toLowerCase().includes(name);\n  }) || null;\n}\n/**\n * Get the top level parenthesized substrings within a given string. Unmatched\n * parentheses are ignored.\n * Ex: \"abc) (def) gh(ij) (kl (mn)o) (pqr\" => [\"(def)\", \"(ij)\", \"(kl (mn)o)\"]\n * @param {string} string\n * @returns {string[]}\n */\n\n\nfunction getParenthesizedSubstrings(string) {\n  var openParenthesisPositions = [];\n  var substrings = [];\n\n  for (var i = 0; i < string.length; i++) {\n    if (string[i] === '(') {\n      openParenthesisPositions.push(i);\n    } else if (string[i] === ')' && openParenthesisPositions.length > 0) {\n      var openParenthesisPosition = openParenthesisPositions.pop();\n\n      if (openParenthesisPositions.length === 0) {\n        substrings.push(string.substring(openParenthesisPosition, i + 1));\n      }\n    }\n  }\n\n  return substrings;\n}\n\nmodule.exports = {\n  isAndroid: isAndroid,\n  isIOS: isIOS,\n  isIpad: isIpad,\n  isIphone: isIphone,\n  isMobile: isMobile,\n  isNonChromiumEdge: isNonChromiumEdge,\n  mobileWebKitBrowser: mobileWebKitBrowser,\n  rebrandedChromeBrowser: rebrandedChromeBrowser\n};","map":{"version":3,"mappings":"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","names":["isAndroid","test","navigator","userAgent","isIOS","hasTouchScreen","maxTouchPoints","isIpad","window","screen","width","platform","isIphone","isMobile","isNonChromiumEdge","browser","chrome","runtime","rebrandedChromeBrowser","parenthesizedSubstrings","getParenthesizedSubstrings","nameAndVersions","reduce","substring","replace","matches","match","map","nameAndVersion","split","toLowerCase","browserNames","find","includes","name","mobileWebKitBrowser","string","openParenthesisPositions","substrings","i","length","push","openParenthesisPosition","pop","module","exports"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/util/browserdetection.js"],"sourcesContent":["/* globals chrome, navigator */\n'use strict';\n\n/**\n * Check whether the current browser is an Android device.\n * @returns {boolean}\n */\nfunction isAndroid() {\n  return /Android/.test(navigator.userAgent);\n}\n\n/**\n * Check whether the current browser is an iOS device.\n * @returns {boolean}\n */\nfunction isIOS() {\n  return /iPad|iPhone|iPod/.test(navigator.userAgent);\n}\n\n/**\n * Detects whether or not a device is an Apple touch screen device.\n * @returns {boolean}\n */\nfunction hasTouchScreen() {\n  return navigator && navigator.maxTouchPoints &&\n  navigator.maxTouchPoints > 2;\n}\n\n/**\n * Detects whether or not a device is an iPad\n * @returns {boolean}\n */\nfunction isIpad() {\n  return hasTouchScreen() && window.screen.width >=  744 &&\n  (/Macintosh/i.test(navigator.userAgent) || /iPad/.test(navigator.userAgent) || /iPad/.test(navigator.platform));\n}\n\n/**\n * Detects whether or not a device is an iPhone\n * @returns {boolean}\n */\nfunction isIphone() {\n  return hasTouchScreen() && window.screen.width <=  476 &&\n  (/Macintosh/i.test(navigator.userAgent) || /iPhone/.test(navigator.userAgent) || /iPhone/.test(navigator.platform));\n}\n\n/**\n * Check whether the current browser is a mobile browser\n * @returns {boolean}\n */\nfunction isMobile() {\n  return /Mobi/.test(navigator.userAgent);\n}\n\n/**\n * Check whether the current browser is non-Chromium Edge.\n * @param {string} browser\n * @returns {boolean}\n */\nfunction isNonChromiumEdge(browser) {\n  return browser === 'chrome' && /Edge/.test(navigator.userAgent) && (\n    typeof chrome === 'undefined' || typeof chrome.runtime === 'undefined'\n  );\n}\n\n/**\n * Get the name of the rebranded Chromium browser, if any. Re-branded Chrome's user\n * agent has the following format:\n * <source>/<version> (<os>) <engine>/<version> (<engine_name>) Chrome/<version> [Mobile] Safari/<version>\n * @param browser\n * @returns {?string} Name of the rebranded Chrome browser, or null if the browser\n *   is either not Chrome or vanilla Chrome.\n */\nfunction rebrandedChromeBrowser(browser) {\n  // If the browser is not Chrome based, then it is not a rebranded Chrome browser.\n  if (browser !== 'chrome') {\n    return null;\n  }\n\n  // Latest desktop Brave browser has a \"brave\" property in navigator.\n  if ('brave' in navigator) {\n    return 'brave';\n  }\n\n  // Remove the \"(.+)\" entries from the user agent thereby retaining only the\n  // <name>[/<version>] entries.\n  const parenthesizedSubstrings = getParenthesizedSubstrings(navigator.userAgent);\n  const nameAndVersions = parenthesizedSubstrings.reduce(\n    (userAgent, substring) => userAgent.replace(substring, ''),\n    navigator.userAgent\n  );\n\n  // Extract the potential browser <name>s by ignoring the first two names, which\n  // point to <source> and <engine>.\n  const matches = nameAndVersions.match(/[^\\s]+/g) || [];\n  const [/* source */, /* engine */, ...browserNames] = matches.map(nameAndVersion => {\n    return nameAndVersion.split('/')[0].toLowerCase();\n  });\n\n  // Extract the <name> that is not expected to be present in the vanilla Chrome\n  // browser, which indicates the rebranded name (ex: \"edg[e]\", \"electron\"). If null,\n  // then this is a vanilla Chrome browser.\n  return browserNames.find(name => {\n    return !['chrome', 'mobile', 'safari'].includes(name);\n  }) || null;\n}\n\n/**\n * Get the name of the mobile webkit based browser, if any.\n * @param browser\n * @returns {?string} Name of the mobile webkit based browser, or null if the browser\n *   is either not webkit based or mobile safari.\n */\nfunction mobileWebKitBrowser(browser) {\n  if (browser !== 'safari') {\n    return null;\n  }\n  if ('brave' in navigator) {\n    return 'brave';\n  }\n\n  return ['edge', 'edg'].find(name => {\n    return navigator.userAgent.toLowerCase().includes(name);\n  }) || null;\n}\n\n/**\n * Get the top level parenthesized substrings within a given string. Unmatched\n * parentheses are ignored.\n * Ex: \"abc) (def) gh(ij) (kl (mn)o) (pqr\" => [\"(def)\", \"(ij)\", \"(kl (mn)o)\"]\n * @param {string} string\n * @returns {string[]}\n */\nfunction getParenthesizedSubstrings(string) {\n  const openParenthesisPositions = [];\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '(') {\n      openParenthesisPositions.push(i);\n    } else if (string[i] === ')' && openParenthesisPositions.length > 0) {\n      const openParenthesisPosition = openParenthesisPositions.pop();\n      if (openParenthesisPositions.length === 0) {\n        substrings.push(string.substring(openParenthesisPosition, i + 1));\n      }\n    }\n  }\n  return substrings;\n}\n\nmodule.exports = {\n  isAndroid,\n  isIOS,\n  isIpad,\n  isIphone,\n  isMobile,\n  isNonChromiumEdge,\n  mobileWebKitBrowser,\n  rebrandedChromeBrowser\n};\n"]},"metadata":{},"sourceType":"script"}