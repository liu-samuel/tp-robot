{"ast":null,"code":"/* eslint callback-return:0 */\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar EventEmitter = require('events');\n\nvar nInstances = 0;\n\nvar MediaSignaling =\n/** @class */\nfunction (_super) {\n  __extends(MediaSignaling, _super);\n  /**\n   * Construct a {@link MediaSignaling}.\n   * @param {Promise<DataTrackReceiver>} getReceive\n   * @param {string} channel\n   */\n\n\n  function MediaSignaling(getReceiver, channel, options) {\n    var _this = _super.call(this) || this;\n\n    Object.defineProperties(_this, {\n      _instanceId: {\n        value: nInstances++\n      },\n      channel: {\n        value: channel\n      },\n      _log: {\n        value: options.log.createLog('default', _this)\n      },\n      _getReceiver: {\n        value: getReceiver\n      },\n      _receiverPromise: {\n        value: null,\n        writable: true\n      },\n      _transport: {\n        value: null,\n        writable: true\n      }\n    });\n    return _this;\n  }\n\n  Object.defineProperty(MediaSignaling.prototype, \"isSetup\", {\n    get: function get() {\n      return !!this._receiverPromise;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MediaSignaling.prototype.toString = function () {\n    return \"[MediaSignaling #\" + this._instanceId + \":\" + this.channel + \"]\";\n  };\n\n  MediaSignaling.prototype.setup = function (id) {\n    var _this = this;\n\n    this._teardown();\n\n    this._log.info('setting up msp transport for id:', id);\n\n    var receiverPromise = this._getReceiver(id).then(function (receiver) {\n      if (receiver.kind !== 'data') {\n        _this._log.error('Expected a DataTrackReceiver');\n      }\n\n      if (_this._receiverPromise !== receiverPromise) {\n        return;\n      }\n\n      try {\n        _this._transport = receiver.toDataTransport();\n\n        _this.emit('ready', _this._transport);\n      } catch (ex) {\n        _this._log.error(\"Failed to toDataTransport: \" + ex.message);\n      }\n\n      receiver.once('close', function () {\n        return _this._teardown();\n      });\n    });\n\n    this._receiverPromise = receiverPromise;\n  };\n\n  MediaSignaling.prototype._teardown = function () {\n    if (this._transport) {\n      this._log.info('Tearing down');\n\n      this._transport = null;\n      this._receiverPromise = null;\n      this.emit('teardown');\n    }\n  };\n\n  return MediaSignaling;\n}(EventEmitter);\n\nmodule.exports = MediaSignaling;","map":{"version":3,"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAA5B;;AAEA,IAAIC,UAAU,GAAG,CAAjB;;AACA;AAAA;AAAA;EAA6BC;EAC3B;;;;;;;EAKA,wBAAYC,WAAZ,EAAyBC,OAAzB,EAAkCC,OAAlC,EAAyC;IAAzC,YACEC,qBAAO,IADT;;IAEEC,MAAM,CAACC,gBAAP,CAAwBC,KAAxB,EAA8B;MAC5BC,WAAW,EAAE;QACXC,KAAK,EAAEV,UAAU;MADN,CADe;MAI5BG,OAAO,EAAE;QACPO,KAAK,EAAEP;MADA,CAJmB;MAO5BQ,IAAI,EAAE;QACJD,KAAK,EAAEN,OAAO,CAACQ,GAAR,CAAYC,SAAZ,CAAsB,SAAtB,EAAiCL,KAAjC;MADH,CAPsB;MAU5BM,YAAY,EAAE;QACZJ,KAAK,EAAER;MADK,CAVc;MAa5Ba,gBAAgB,EAAE;QAChBL,KAAK,EAAE,IADS;QAEhBM,QAAQ,EAAE;MAFM,CAbU;MAiB5BC,UAAU,EAAE;QACVP,KAAK,EAAE,IADG;QAEVM,QAAQ,EAAE;MAFA;IAjBgB,CAA9B;;EAsBD;;EAEDV,sBAAIY,wBAAJ,EAAI,SAAJ,EAAW;SAAX;MACE,OAAO,CAAC,CAAC,KAAKH,gBAAd;IACD,CAFU;qBAAA;;EAAA,CAAX;;EAIAG;IACE,OAAO,sBAAoB,KAAKT,WAAzB,GAAoC,GAApC,GAAwC,KAAKN,OAA7C,GAAoD,GAA3D;EACD,CAFD;;EAIAe,2CAAMC,EAAN,EAAQ;IAAR;;IACE,KAAKC,SAAL;;IACA,KAAKT,IAAL,CAAUU,IAAV,CAAe,kCAAf,EAAmDF,EAAnD;;IACA,IAAMG,eAAe,GAAG,KAAKR,YAAL,CAAkBK,EAAlB,EAAsBI,IAAtB,CAA2B,oBAAQ;MACzD,IAAIC,QAAQ,CAACC,IAAT,KAAkB,MAAtB,EAA8B;QAC5BjB,KAAI,CAACG,IAAL,CAAUe,KAAV,CAAgB,8BAAhB;MACD;;MAAC,IAAIlB,KAAI,CAACO,gBAAL,KAA0BO,eAA9B,EAA+C;QAC/C;MACD;;MAED,IAAI;QACFd,KAAI,CAACS,UAAL,GAAkBO,QAAQ,CAACG,eAAT,EAAlB;;QACAnB,KAAI,CAACoB,IAAL,CAAU,OAAV,EAAmBpB,KAAI,CAACS,UAAxB;MACD,CAHD,CAGE,OAAOY,EAAP,EAAW;QACXrB,KAAI,CAACG,IAAL,CAAUe,KAAV,CAAgB,gCAA8BG,EAAE,CAACC,OAAjD;MACD;;MACDN,QAAQ,CAACO,IAAT,CAAc,OAAd,EAAuB;QAAM,YAAI,CAACX,SAAL;MAAgB,CAA7C;IACD,CAduB,CAAxB;;IAeA,KAAKL,gBAAL,GAAwBO,eAAxB;EACD,CAnBD;;EAqBAJ;IACE,IAAI,KAAKD,UAAT,EAAqB;MACnB,KAAKN,IAAL,CAAUU,IAAV,CAAe,cAAf;;MACA,KAAKJ,UAAL,GAAkB,IAAlB;MACA,KAAKF,gBAAL,GAAwB,IAAxB;MACA,KAAKa,IAAL,CAAU,UAAV;IACD;EACF,CAPD;;EAQF;AAAC,CArED,CAA6B9B,YAA7B;;AAuEAkC,MAAM,CAACC,OAAP,GAAiBf,cAAjB","names":["EventEmitter","require","nInstances","__extends","getReceiver","channel","options","_super","Object","defineProperties","_this","_instanceId","value","_log","log","createLog","_getReceiver","_receiverPromise","writable","_transport","MediaSignaling","id","_teardown","info","receiverPromise","then","receiver","kind","error","toDataTransport","emit","ex","message","once","module","exports"],"sources":["/home/samliu/repos/ieee/tp-robot/node_modules/twilio-video/lib/signaling/v2/mediasignaling.js"],"sourcesContent":["/* eslint callback-return:0 */\n'use strict';\n\nconst EventEmitter = require('events');\n\nlet nInstances = 0;\nclass MediaSignaling extends EventEmitter {\n  /**\n   * Construct a {@link MediaSignaling}.\n   * @param {Promise<DataTrackReceiver>} getReceive\n   * @param {string} channel\n   */\n  constructor(getReceiver, channel, options) {\n    super();\n    Object.defineProperties(this, {\n      _instanceId: {\n        value: nInstances++\n      },\n      channel: {\n        value: channel,\n      },\n      _log: {\n        value: options.log.createLog('default', this)\n      },\n      _getReceiver: {\n        value: getReceiver\n      },\n      _receiverPromise: {\n        value: null,\n        writable: true,\n      },\n      _transport: {\n        value: null,\n        writable: true\n      }\n    });\n  }\n\n  get isSetup() {\n    return !!this._receiverPromise;\n  }\n\n  toString() {\n    return `[MediaSignaling #${this._instanceId}:${this.channel}]`;\n  }\n\n  setup(id) {\n    this._teardown();\n    this._log.info('setting up msp transport for id:', id);\n    const receiverPromise = this._getReceiver(id).then(receiver => {\n      if (receiver.kind !== 'data') {\n        this._log.error('Expected a DataTrackReceiver');\n      } if (this._receiverPromise !== receiverPromise) {\n        return;\n      }\n\n      try {\n        this._transport = receiver.toDataTransport();\n        this.emit('ready', this._transport);\n      } catch (ex) {\n        this._log.error(`Failed to toDataTransport: ${ex.message}`);\n      }\n      receiver.once('close', () => this._teardown());\n    });\n    this._receiverPromise = receiverPromise;\n  }\n\n  _teardown() {\n    if (this._transport) {\n      this._log.info('Tearing down');\n      this._transport = null;\n      this._receiverPromise = null;\n      this.emit('teardown');\n    }\n  }\n}\n\nmodule.exports = MediaSignaling;\n"]},"metadata":{},"sourceType":"script"}