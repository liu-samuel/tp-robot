{"ast":null,"code":"'use strict';\n\nvar flatMap = require('./util').flatMap;\n\nvar guessBrowser = require('./util').guessBrowser;\n\nvar guessBrowserVersion = require('./util').guessBrowserVersion;\n\nvar getSdpFormat = require('./util/sdp').getSdpFormat;\n\nvar guess = guessBrowser();\nvar guessVersion = guessBrowserVersion();\nvar isChrome = guess === 'chrome';\nvar isFirefox = guess === 'firefox';\nvar isSafari = guess === 'safari';\nvar chromeMajorVersion = isChrome ? guessVersion.major : null;\nvar CHROME_LEGACY_MAX_AUDIO_LEVEL = 32767;\n/**\n * Get the standardized {@link RTCPeerConnection} statistics.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedStatsResponse>}\n */\n\nfunction getStats(peerConnection, options) {\n  if (!(peerConnection && typeof peerConnection.getStats === 'function')) {\n    return Promise.reject(new Error('Given PeerConnection does not support getStats'));\n  }\n\n  return _getStats(peerConnection, options);\n}\n/**\n * getStats() implementation.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedStatsResponse>}\n */\n\n\nfunction _getStats(peerConnection, options) {\n  var localAudioTracks = getTracks(peerConnection, 'audio', 'local');\n  var localVideoTracks = getTracks(peerConnection, 'video', 'local');\n  var remoteAudioTracks = getTracks(peerConnection, 'audio');\n  var remoteVideoTracks = getTracks(peerConnection, 'video');\n  var statsResponse = {\n    activeIceCandidatePair: null,\n    localAudioTrackStats: [],\n    localVideoTrackStats: [],\n    remoteAudioTrackStats: [],\n    remoteVideoTrackStats: []\n  };\n  var trackStatsPromises = flatMap([[localAudioTracks, 'localAudioTrackStats', false], [localVideoTracks, 'localVideoTrackStats', false], [remoteAudioTracks, 'remoteAudioTrackStats', true], [remoteVideoTracks, 'remoteVideoTrackStats', true]], function (triple) {\n    var tracks = triple[0];\n    var statsArrayName = triple[1];\n    var isRemote = triple[2];\n    return tracks.map(function (track) {\n      return getTrackStats(peerConnection, track, Object.assign({\n        isRemote: isRemote\n      }, options)).then(function (trackStatsArray) {\n        trackStatsArray.forEach(function (trackStats) {\n          trackStats.trackId = track.id;\n          statsResponse[statsArrayName].push(trackStats);\n        });\n      });\n    });\n  });\n  return Promise.all(trackStatsPromises).then(function () {\n    return getActiveIceCandidatePairStats(peerConnection, options);\n  }).then(function (activeIceCandidatePairStatsReport) {\n    statsResponse.activeIceCandidatePair = activeIceCandidatePairStatsReport;\n    return statsResponse;\n  });\n}\n/**\n * Generate the {@link StandardizedActiveIceCandidatePairStatsReport} for the\n * {@link RTCPeerConnection}.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options]\n * @returns {Promise<StandardizedActiveIceCandidatePairStatsReport>}\n */\n\n\nfunction getActiveIceCandidatePairStats(peerConnection, options) {\n  options = options || {};\n\n  if (typeof options.testForChrome !== 'undefined' || isChrome || typeof options.testForSafari !== 'undefined' || isSafari) {\n    return peerConnection.getStats().then(standardizeChromeOrSafariActiveIceCandidatePairStats);\n  }\n\n  if (typeof options.testForFirefox !== 'undefined' || isFirefox) {\n    return peerConnection.getStats().then(standardizeFirefoxActiveIceCandidatePairStats);\n  }\n\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n/**\n * Standardize the active RTCIceCandidate pair's statistics in Chrome or Safari.\n * @param {RTCStatsReport} stats\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\n */\n\n\nfunction standardizeChromeOrSafariActiveIceCandidatePairStats(stats) {\n  var activeCandidatePairStats = Array.from(stats.values()).find(function (stat) {\n    return stat.type === 'candidate-pair' && stat.nominated;\n  });\n\n  if (!activeCandidatePairStats) {\n    return null;\n  }\n\n  var activeLocalCandidateStats = stats.get(activeCandidatePairStats.localCandidateId);\n  var activeRemoteCandidateStats = stats.get(activeCandidatePairStats.remoteCandidateId);\n  var standardizedCandidateStatsKeys = [{\n    key: 'candidateType',\n    type: 'string'\n  }, {\n    key: 'ip',\n    type: 'string'\n  }, {\n    key: 'port',\n    type: 'number'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'protocol',\n    type: 'string'\n  }, {\n    key: 'url',\n    type: 'string'\n  }];\n  var standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([{\n    key: 'deleted',\n    type: 'boolean'\n  }, {\n    key: 'relayProtocol',\n    type: 'string'\n  }]);\n  var standatdizedLocalCandidateStatsReport = activeLocalCandidateStats ? standardizedLocalCandidateStatsKeys.reduce(function (report, keyInfo) {\n    report[keyInfo.key] = typeof activeLocalCandidateStats[keyInfo.key] === keyInfo.type ? activeLocalCandidateStats[keyInfo.key] : keyInfo.key === 'deleted' ? false : null;\n    return report;\n  }, {}) : null;\n  var standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats ? standardizedCandidateStatsKeys.reduce(function (report, keyInfo) {\n    report[keyInfo.key] = typeof activeRemoteCandidateStats[keyInfo.key] === keyInfo.type ? activeRemoteCandidateStats[keyInfo.key] : null;\n    return report;\n  }, {}) : null;\n  return [{\n    key: 'availableIncomingBitrate',\n    type: 'number'\n  }, {\n    key: 'availableOutgoingBitrate',\n    type: 'number'\n  }, {\n    key: 'bytesReceived',\n    type: 'number'\n  }, {\n    key: 'bytesSent',\n    type: 'number'\n  }, {\n    key: 'consentRequestsSent',\n    type: 'number'\n  }, {\n    key: 'currentRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'lastPacketReceivedTimestamp',\n    type: 'number'\n  }, {\n    key: 'lastPacketSentTimestamp',\n    type: 'number'\n  }, {\n    key: 'nominated',\n    type: 'boolean'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'readable',\n    type: 'boolean'\n  }, {\n    key: 'requestsReceived',\n    type: 'number'\n  }, {\n    key: 'requestsSent',\n    type: 'number'\n  }, {\n    key: 'responsesReceived',\n    type: 'number'\n  }, {\n    key: 'responsesSent',\n    type: 'number'\n  }, {\n    key: 'retransmissionsReceived',\n    type: 'number'\n  }, {\n    key: 'retransmissionsSent',\n    type: 'number'\n  }, {\n    key: 'state',\n    type: 'string',\n    fixup: function fixup(state) {\n      return state === 'inprogress' ? 'in-progress' : state;\n    }\n  }, {\n    key: 'totalRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'transportId',\n    type: 'string'\n  }, {\n    key: 'writable',\n    type: 'boolean'\n  }].reduce(function (report, keyInfo) {\n    report[keyInfo.key] = typeof activeCandidatePairStats[keyInfo.key] === keyInfo.type ? keyInfo.fixup ? keyInfo.fixup(activeCandidatePairStats[keyInfo.key]) : activeCandidatePairStats[keyInfo.key] : null;\n    return report;\n  }, {\n    localCandidate: standatdizedLocalCandidateStatsReport,\n    remoteCandidate: standardizedRemoteCandidateStatsReport\n  });\n}\n/**\n * Standardize the active RTCIceCandidate pair's statistics in Firefox.\n * @param {RTCStatsReport} stats\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\n */\n\n\nfunction standardizeFirefoxActiveIceCandidatePairStats(stats) {\n  var activeCandidatePairStats = Array.from(stats.values()).find(function (stat) {\n    return stat.type === 'candidate-pair' && stat.nominated;\n  });\n\n  if (!activeCandidatePairStats) {\n    return null;\n  }\n\n  var activeLocalCandidateStats = stats.get(activeCandidatePairStats.localCandidateId);\n  var activeRemoteCandidateStats = stats.get(activeCandidatePairStats.remoteCandidateId);\n  var standardizedCandidateStatsKeys = [{\n    key: 'candidateType',\n    type: 'string'\n  }, {\n    key: 'ip',\n    ffKeys: ['address', 'ipAddress'],\n    type: 'string'\n  }, {\n    key: 'port',\n    ffKeys: ['portNumber'],\n    type: 'number'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'protocol',\n    ffKeys: ['transport'],\n    type: 'string'\n  }, {\n    key: 'url',\n    type: 'string'\n  }];\n  var standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([{\n    key: 'deleted',\n    type: 'boolean'\n  }, {\n    key: 'relayProtocol',\n    type: 'string'\n  }]);\n  var candidateTypes = {\n    host: 'host',\n    peerreflexive: 'prflx',\n    relayed: 'relay',\n    serverreflexive: 'srflx'\n  };\n  var standatdizedLocalCandidateStatsReport = activeLocalCandidateStats ? standardizedLocalCandidateStatsKeys.reduce(function (report, keyInfo) {\n    var key = keyInfo.ffKeys && keyInfo.ffKeys.find(function (key) {\n      return key in activeLocalCandidateStats;\n    }) || keyInfo.key;\n    report[keyInfo.key] = typeof activeLocalCandidateStats[key] === keyInfo.type ? key === 'candidateType' ? candidateTypes[activeLocalCandidateStats[key]] || activeLocalCandidateStats[key] : activeLocalCandidateStats[key] : key === 'deleted' ? false : null;\n    return report;\n  }, {}) : null;\n  var standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats ? standardizedCandidateStatsKeys.reduce(function (report, keyInfo) {\n    var key = keyInfo.ffKeys && keyInfo.ffKeys.find(function (key) {\n      return key in activeRemoteCandidateStats;\n    }) || keyInfo.key;\n    report[keyInfo.key] = typeof activeRemoteCandidateStats[key] === keyInfo.type ? key === 'candidateType' ? candidateTypes[activeRemoteCandidateStats[key]] || activeRemoteCandidateStats[key] : activeRemoteCandidateStats[key] : null;\n    return report;\n  }, {}) : null;\n  return [{\n    key: 'availableIncomingBitrate',\n    type: 'number'\n  }, {\n    key: 'availableOutgoingBitrate',\n    type: 'number'\n  }, {\n    key: 'bytesReceived',\n    type: 'number'\n  }, {\n    key: 'bytesSent',\n    type: 'number'\n  }, {\n    key: 'consentRequestsSent',\n    type: 'number'\n  }, {\n    key: 'currentRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'lastPacketReceivedTimestamp',\n    type: 'number'\n  }, {\n    key: 'lastPacketSentTimestamp',\n    type: 'number'\n  }, {\n    key: 'nominated',\n    type: 'boolean'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'readable',\n    type: 'boolean'\n  }, {\n    key: 'requestsReceived',\n    type: 'number'\n  }, {\n    key: 'requestsSent',\n    type: 'number'\n  }, {\n    key: 'responsesReceived',\n    type: 'number'\n  }, {\n    key: 'responsesSent',\n    type: 'number'\n  }, {\n    key: 'retransmissionsReceived',\n    type: 'number'\n  }, {\n    key: 'retransmissionsSent',\n    type: 'number'\n  }, {\n    key: 'state',\n    type: 'string'\n  }, {\n    key: 'totalRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'transportId',\n    type: 'string'\n  }, {\n    key: 'writable',\n    type: 'boolean'\n  }].reduce(function (report, keyInfo) {\n    report[keyInfo.key] = typeof activeCandidatePairStats[keyInfo.key] === keyInfo.type ? activeCandidatePairStats[keyInfo.key] : null;\n    return report;\n  }, {\n    localCandidate: standatdizedLocalCandidateStatsReport,\n    remoteCandidate: standardizedRemoteCandidateStatsReport\n  });\n}\n/**\n * Get local/remote audio/video MediaStreamTracks.\n * @param {RTCPeerConnection} peerConnection - The RTCPeerConnection\n * @param {string} kind - 'audio' or 'video'\n * @param {string} [localOrRemote] - 'local' or 'remote'\n * @returns {Array<MediaStreamTrack>}\n */\n\n\nfunction getTracks(peerConnection, kind, localOrRemote) {\n  var getSendersOrReceivers = localOrRemote === 'local' ? 'getSenders' : 'getReceivers';\n\n  if (peerConnection[getSendersOrReceivers]) {\n    return peerConnection[getSendersOrReceivers]().map(function (senderOrReceiver) {\n      return senderOrReceiver.track;\n    }).filter(function (track) {\n      return track && track.kind === kind;\n    });\n  }\n\n  var getStreams = localOrRemote === 'local' ? 'getLocalStreams' : 'getRemoteStreams';\n  return flatMap(peerConnection[getStreams](), function (stream) {\n    var getTracks = kind === 'audio' ? 'getAudioTracks' : 'getVideoTracks';\n    return stream[getTracks]();\n  });\n}\n/**\n * Get the standardized statistics for a particular MediaStreamTrack.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {object} [options] - Used for testing\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\n\n\nfunction getTrackStats(peerConnection, track, options) {\n  options = options || {};\n\n  if (typeof options.testForChrome !== 'undefined' || isChrome) {\n    return chromeOrSafariGetTrackStats(peerConnection, track);\n  }\n\n  if (typeof options.testForFirefox !== 'undefined' || isFirefox) {\n    return firefoxGetTrackStats(peerConnection, track, options.isRemote);\n  }\n\n  if (typeof options.testForSafari !== 'undefined' || isSafari) {\n    if (typeof options.testForSafari !== 'undefined' || getSdpFormat() === 'unified') {\n      return chromeOrSafariGetTrackStats(peerConnection, track);\n    } // NOTE(syerrapragada): getStats() is not supported on\n    // Safari versions where plan-b is the SDP format\n    // due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601\n\n\n    return Promise.reject(new Error(['getStats() is not supported on this version of Safari', 'due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601'].join(' ')));\n  }\n\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n/**\n * Get the standardized statistics for a particular MediaStreamTrack in Chrome or Safari.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\n\n\nfunction chromeOrSafariGetTrackStats(peerConnection, track) {\n  return new Promise(function (resolve, reject) {\n    if (chromeMajorVersion && chromeMajorVersion < 67) {\n      peerConnection.getStats(function (response) {\n        resolve([standardizeChromeLegacyStats(response, track)]);\n      }, null, reject);\n      return;\n    }\n\n    peerConnection.getStats(track).then(function (response) {\n      resolve(standardizeChromeOrSafariStats(response));\n    }, reject);\n  });\n}\n/**\n * Get the standardized statistics for a particular MediaStreamTrack in Firefox.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {boolean} isRemote\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\n\n\nfunction firefoxGetTrackStats(peerConnection, track, isRemote) {\n  return new Promise(function (resolve, reject) {\n    peerConnection.getStats(track).then(function (response) {\n      resolve([standardizeFirefoxStats(response, isRemote)]);\n    }, reject);\n  });\n}\n/**\n * Standardize the MediaStreamTrack's legacy statistics in Chrome.\n * @param {RTCStatsResponse} response\n * @param {MediaStreamTrack} track\n * @returns {StandardizedTrackStatsReport}\n */\n\n\nfunction standardizeChromeLegacyStats(response, track) {\n  var ssrcReport = response.result().find(function (report) {\n    return report.type === 'ssrc' && report.stat('googTrackId') === track.id;\n  });\n  var standardizedStats = {};\n\n  if (ssrcReport) {\n    standardizedStats.timestamp = Math.round(Number(ssrcReport.timestamp));\n    standardizedStats = ssrcReport.names().reduce(function (stats, name) {\n      switch (name) {\n        case 'googCodecName':\n          stats.codecName = ssrcReport.stat(name);\n          break;\n\n        case 'googRtt':\n          stats.roundTripTime = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googJitterReceived':\n          stats.jitter = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameWidthInput':\n          stats.frameWidthInput = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameHeightInput':\n          stats.frameHeightInput = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameWidthSent':\n          stats.frameWidthSent = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameHeightSent':\n          stats.frameHeightSent = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameWidthReceived':\n          stats.frameWidthReceived = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameHeightReceived':\n          stats.frameHeightReceived = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameRateInput':\n          stats.frameRateInput = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameRateSent':\n          stats.frameRateSent = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameRateReceived':\n          stats.frameRateReceived = Number(ssrcReport.stat(name));\n          break;\n\n        case 'ssrc':\n          stats[name] = ssrcReport.stat(name);\n          break;\n\n        case 'bytesReceived':\n        case 'bytesSent':\n        case 'packetsLost':\n        case 'packetsReceived':\n        case 'packetsSent':\n        case 'audioInputLevel':\n        case 'audioOutputLevel':\n          stats[name] = Number(ssrcReport.stat(name));\n          break;\n      }\n\n      return stats;\n    }, standardizedStats);\n  }\n\n  return standardizedStats;\n}\n/**\n * Standardize the MediaStreamTrack's statistics in Chrome or Safari.\n * @param {RTCStatsResponse} response\n * @returns {Array<StandardizedTrackStatsReport>}\n */\n\n\nfunction standardizeChromeOrSafariStats(response) {\n  var inbound = null; // NOTE(mpatwardhan): We should expect more than one \"outbound-rtp\" stats for a\n  // VP8 simulcast MediaStreamTrack.\n\n  var outbound = [];\n  var remoteInbound = null;\n  var remoteOutbound = null;\n  var track = null;\n  var codec = null;\n  var localMedia = null;\n  response.forEach(function (stat) {\n    switch (stat.type) {\n      case 'inbound-rtp':\n        inbound = stat;\n        break;\n\n      case 'outbound-rtp':\n        outbound.push(stat);\n        break;\n\n      case 'media-source':\n        localMedia = stat;\n        break;\n\n      case 'track':\n        track = stat;\n        break;\n\n      case 'codec':\n        codec = stat;\n        break;\n\n      case 'remote-inbound-rtp':\n        remoteInbound = stat;\n        break;\n\n      case 'remote-outbound-rtp':\n        remoteOutbound = stat;\n        break;\n    }\n  });\n  var isRemote = track && track.remoteSource;\n  var mainSources = isRemote ? [inbound] : outbound;\n  var stats = [];\n  var remoteSource = isRemote ? remoteOutbound : remoteInbound; // remote rtp stats\n\n  mainSources.forEach(function (source) {\n    var standardizedStats = {};\n    var statSources = [source, localMedia, track, codec, remoteSource && remoteSource.ssrc === source.ssrc ? remoteSource : null // remote rtp stats\n    ];\n\n    function getStatValue(name) {\n      var sourceFound = statSources.find(function (statSource) {\n        return statSource && typeof statSource[name] !== 'undefined';\n      }) || null;\n      return sourceFound ? sourceFound[name] : null;\n    }\n\n    var ssrc = getStatValue('ssrc');\n\n    if (typeof ssrc === 'number') {\n      standardizedStats.ssrc = String(ssrc);\n    }\n\n    var timestamp = getStatValue('timestamp');\n    standardizedStats.timestamp = Math.round(timestamp);\n    var mimeType = getStatValue('mimeType');\n\n    if (typeof mimeType === 'string') {\n      mimeType = mimeType.split('/');\n      standardizedStats.codecName = mimeType[mimeType.length - 1];\n    }\n\n    var roundTripTime = getStatValue('roundTripTime');\n\n    if (typeof roundTripTime === 'number') {\n      standardizedStats.roundTripTime = Math.round(roundTripTime * 1000);\n    }\n\n    var jitter = getStatValue('jitter');\n\n    if (typeof jitter === 'number') {\n      standardizedStats.jitter = Math.round(jitter * 1000);\n    }\n\n    var frameWidth = getStatValue('frameWidth');\n\n    if (typeof frameWidth === 'number') {\n      if (isRemote) {\n        standardizedStats.frameWidthReceived = frameWidth;\n      } else {\n        standardizedStats.frameWidthSent = frameWidth;\n        standardizedStats.frameWidthInput = track.frameWidth;\n      }\n    }\n\n    var frameHeight = getStatValue('frameHeight');\n\n    if (typeof frameHeight === 'number') {\n      if (isRemote) {\n        standardizedStats.frameHeightReceived = frameHeight;\n      } else {\n        standardizedStats.frameHeightSent = frameHeight;\n        standardizedStats.frameHeightInput = track.frameHeight;\n      }\n    }\n\n    var framesPerSecond = getStatValue('framesPerSecond');\n\n    if (typeof framesPerSecond === 'number') {\n      standardizedStats[isRemote ? 'frameRateReceived' : 'frameRateSent'] = framesPerSecond;\n    }\n\n    var bytesReceived = getStatValue('bytesReceived');\n\n    if (typeof bytesReceived === 'number') {\n      standardizedStats.bytesReceived = bytesReceived;\n    }\n\n    var bytesSent = getStatValue('bytesSent');\n\n    if (typeof bytesSent === 'number') {\n      standardizedStats.bytesSent = bytesSent;\n    }\n\n    var packetsLost = getStatValue('packetsLost');\n\n    if (typeof packetsLost === 'number') {\n      standardizedStats.packetsLost = packetsLost;\n    }\n\n    var packetsReceived = getStatValue('packetsReceived');\n\n    if (typeof packetsReceived === 'number') {\n      standardizedStats.packetsReceived = packetsReceived;\n    }\n\n    var packetsSent = getStatValue('packetsSent');\n\n    if (typeof packetsSent === 'number') {\n      standardizedStats.packetsSent = packetsSent;\n    }\n\n    var audioLevel = getStatValue('audioLevel');\n\n    if (typeof audioLevel === 'number') {\n      audioLevel = Math.round(audioLevel * CHROME_LEGACY_MAX_AUDIO_LEVEL);\n\n      if (isRemote) {\n        standardizedStats.audioOutputLevel = audioLevel;\n      } else {\n        standardizedStats.audioInputLevel = audioLevel;\n      }\n    }\n\n    var totalPacketSendDalay = getStatValue('totalPacketSendDelay');\n\n    if (typeof totalPacketSendDalay === 'number') {\n      standardizedStats.totalPacketSendDelay = totalPacketSendDalay;\n    }\n\n    var totalEncodeTime = getStatValue('totalEncodeTime');\n\n    if (typeof totalEncodeTime === 'number') {\n      standardizedStats.totalEncodeTime = totalEncodeTime;\n    }\n\n    var framesEncoded = getStatValue('framesEncoded');\n\n    if (typeof framesEncoded === 'number') {\n      standardizedStats.framesEncoded = framesEncoded;\n    }\n\n    var estimatedPlayoutTimestamp = getStatValue('estimatedPlayoutTimestamp');\n\n    if (typeof estimatedPlayoutTimestamp === 'number') {\n      standardizedStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n    }\n\n    var totalDecodeTime = getStatValue('totalDecodeTime');\n\n    if (typeof totalDecodeTime === 'number') {\n      standardizedStats.totalDecodeTime = totalDecodeTime;\n    }\n\n    var framesDecoded = getStatValue('framesDecoded');\n\n    if (typeof framesDecoded === 'number') {\n      standardizedStats.framesDecoded = framesDecoded;\n    }\n\n    var jitterBufferDelay = getStatValue('jitterBufferDelay');\n\n    if (typeof jitterBufferDelay === 'number') {\n      standardizedStats.jitterBufferDelay = jitterBufferDelay;\n    }\n\n    var jitterBufferEmittedCount = getStatValue('jitterBufferEmittedCount');\n\n    if (typeof jitterBufferEmittedCount === 'number') {\n      standardizedStats.jitterBufferEmittedCount = jitterBufferEmittedCount;\n    }\n\n    stats.push(standardizedStats);\n  });\n  return stats;\n}\n/**\n * Standardize the MediaStreamTrack's statistics in Firefox.\n * @param {RTCStatsReport} response\n * @param {boolean} isRemote\n * @returns {StandardizedTrackStatsReport}\n */\n\n\nfunction standardizeFirefoxStats(response, isRemote) {\n  // NOTE(mroberts): If getStats is called on a closed RTCPeerConnection,\n  // Firefox returns undefined instead of an RTCStatsReport. We workaround this\n  // here. See the following bug for more details:\n  //\n  //   https://bugzilla.mozilla.org/show_bug.cgi?id=1377225\n  //\n  response = response || new Map();\n  var inbound = null;\n  var outbound = null; // NOTE(mmalavalli): Starting from Firefox 63, RTC{Inbound, Outbound}RTPStreamStats.isRemote\n  // will be deprecated, followed by its removal in Firefox 66. Also, trying to\n  // access members of the remote RTC{Inbound, Outbound}RTPStreamStats without\n  // using RTCStatsReport.get(remoteId) will trigger console warnings. So, we\n  // no longer depend on \"isRemote\", and we call RTCStatsReport.get(remoteId)\n  // to access the remote RTC{Inbound, Outbound}RTPStreamStats.\n  //\n  // Source: https://blog.mozilla.org/webrtc/getstats-isremote-65/\n  //\n\n  response.forEach(function (stat) {\n    if (stat.isRemote) {\n      return;\n    }\n\n    switch (stat.type) {\n      case 'inbound-rtp':\n        inbound = stat;\n        outbound = response.get(stat.remoteId);\n        break;\n\n      case 'outbound-rtp':\n        outbound = stat;\n        inbound = response.get(stat.remoteId);\n        break;\n    }\n  });\n  var first = isRemote ? inbound : outbound;\n  var second = isRemote ? outbound : inbound;\n\n  function getStatValue(name) {\n    if (first && typeof first[name] !== 'undefined') {\n      return first[name];\n    }\n\n    if (second && typeof second[name] !== 'undefined') {\n      return second[name];\n    }\n\n    return null;\n  }\n\n  var standardizedStats = {};\n  var timestamp = getStatValue('timestamp');\n  standardizedStats.timestamp = Math.round(timestamp);\n  var ssrc = getStatValue('ssrc');\n\n  if (typeof ssrc === 'number') {\n    standardizedStats.ssrc = String(ssrc);\n  }\n\n  var bytesSent = getStatValue('bytesSent');\n\n  if (typeof bytesSent === 'number') {\n    standardizedStats.bytesSent = bytesSent;\n  }\n\n  var packetsLost = getStatValue('packetsLost');\n\n  if (typeof packetsLost === 'number') {\n    standardizedStats.packetsLost = packetsLost;\n  }\n\n  var packetsSent = getStatValue('packetsSent');\n\n  if (typeof packetsSent === 'number') {\n    standardizedStats.packetsSent = packetsSent;\n  }\n\n  var roundTripTime = getStatValue('roundTripTime');\n\n  if (typeof roundTripTime === 'number') {\n    // roundTripTime is double - measured in seconds.\n    // https://www.w3.org/TR/webrtc-stats/#dom-rtcremoteinboundrtpstreamstats-roundtriptime\n    // cover it to milliseconds (and make it integer)\n    standardizedStats.roundTripTime = Math.round(roundTripTime * 1000);\n  }\n\n  var jitter = getStatValue('jitter');\n\n  if (typeof jitter === 'number') {\n    standardizedStats.jitter = Math.round(jitter * 1000);\n  }\n\n  var frameRateSent = getStatValue('framerateMean');\n\n  if (typeof frameRateSent === 'number') {\n    standardizedStats.frameRateSent = Math.round(frameRateSent);\n  }\n\n  var bytesReceived = getStatValue('bytesReceived');\n\n  if (typeof bytesReceived === 'number') {\n    standardizedStats.bytesReceived = bytesReceived;\n  }\n\n  var packetsReceived = getStatValue('packetsReceived');\n\n  if (typeof packetsReceived === 'number') {\n    standardizedStats.packetsReceived = packetsReceived;\n  }\n\n  var frameRateReceived = getStatValue('framerateMean');\n\n  if (typeof frameRateReceived === 'number') {\n    standardizedStats.frameRateReceived = Math.round(frameRateReceived);\n  }\n\n  var totalPacketSendDalay = getStatValue('totalPacketSendDelay');\n\n  if (typeof totalPacketSendDalay === 'number') {\n    standardizedStats.totalPacketSendDelay = totalPacketSendDalay;\n  }\n\n  var totalEncodeTime = getStatValue('totalEncodeTime');\n\n  if (typeof totalEncodeTime === 'number') {\n    standardizedStats.totalEncodeTime = totalEncodeTime;\n  }\n\n  var framesEncoded = getStatValue('framesEncoded');\n\n  if (typeof framesEncoded === 'number') {\n    standardizedStats.framesEncoded = framesEncoded;\n  }\n\n  var estimatedPlayoutTimestamp = getStatValue('estimatedPlayoutTimestamp');\n\n  if (typeof estimatedPlayoutTimestamp === 'number') {\n    standardizedStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n  }\n\n  var totalDecodeTime = getStatValue('totalDecodeTime');\n\n  if (typeof totalDecodeTime === 'number') {\n    standardizedStats.totalDecodeTime = totalDecodeTime;\n  }\n\n  var framesDecoded = getStatValue('framesDecoded');\n\n  if (typeof framesDecoded === 'number') {\n    standardizedStats.framesDecoded = framesDecoded;\n  }\n\n  var jitterBufferDelay = getStatValue('jitterBufferDelay');\n\n  if (typeof jitterBufferDelay === 'number') {\n    standardizedStats.jitterBufferDelay = jitterBufferDelay;\n  }\n\n  var jitterBufferEmittedCount = getStatValue('jitterBufferEmittedCount');\n\n  if (typeof jitterBufferEmittedCount === 'number') {\n    standardizedStats.jitterBufferEmittedCount = jitterBufferEmittedCount;\n  }\n\n  return standardizedStats;\n}\n/**\n * Standardized RTCIceCandidate statistics.\n * @typedef {object} StandardizedIceCandidateStatsReport\n * @property {'host'|'prflx'|'relay'|'srflx'} candidateType\n * @property {string} ip\n * @property {number} port\n * @property {number} priority\n * @property {'tcp'|'udp'} protocol\n * @property {string} url\n */\n\n/**\n * Standardized local RTCIceCandidate statistics.\n * @typedef {StandardizedIceCandidateStatsReport} StandardizedLocalIceCandidateStatsReport\n * @property {boolean} [deleted=false]\n * @property {'tcp'|'tls'|'udp'} relayProtocol\n */\n\n/**\n * Standardized active RTCIceCandidate pair statistics.\n * @typedef {object} StandardizedActiveIceCandidatePairStatsReport\n * @property {number} availableIncomingBitrate\n * @property {number} availableOutgoingBitrate\n * @property {number} bytesReceived\n * @property {number} bytesSent\n * @property {number} consentRequestsSent\n * @property {number} currentRoundTripTime\n * @property {number} lastPacketReceivedTimestamp\n * @property {number} lastPacketSentTimestamp\n * @property {StandardizedLocalIceCandidateStatsReport} localCandidate\n * @property {boolean} nominated\n * @property {number} priority\n * @property {boolean} readable\n * @property {StandardizedIceCandidateStatsReport} remoteCandidate\n * @property {number} requestsReceived\n * @property {number} requestsSent\n * @property {number} responsesReceived\n * @property {number} responsesSent\n * @property {number} retransmissionsReceived\n * @property {number} retransmissionsSent\n * @property {'frozen'|'waiting'|'in-progress'|'failed'|'succeeded'} state\n * @property {number} totalRoundTripTime\n * @property {string} transportId\n * @property {boolean} writable\n */\n\n/**\n * Standardized {@link RTCPeerConnection} statistics.\n * @typedef {Object} StandardizedStatsResponse\n * @property {StandardizedActiveIceCandidatePairStatsReport} activeIceCandidatePair - Stats for active ICE candidate pair\n * @property Array<StandardizedTrackStatsReport> localAudioTrackStats - Stats for local audio MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> localVideoTrackStats - Stats for local video MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> remoteAudioTrackStats - Stats for remote audio MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> remoteVideoTrackStats - Stats for remote video MediaStreamTracks\n */\n\n/**\n * Standardized MediaStreamTrack statistics.\n * @typedef {Object} StandardizedTrackStatsReport\n * @property {string} trackId - MediaStreamTrack ID\n * @property {string} ssrc - SSRC of the MediaStreamTrack\n * @property {number} timestamp - The Unix timestamp in milliseconds\n * @property {string} [codecName] - Name of the codec used to encode the MediaStreamTrack's media\n * @property {number} [roundTripTime] - Round trip time in milliseconds\n * @property {number} [jitter] - Jitter in milliseconds\n * @property {number} [frameWidthInput] - Width in pixels of the local video MediaStreamTrack's captured frame\n * @property {number} [frameHeightInput] - Height in pixels of the local video MediaStreamTrack's captured frame\n * @property {number} [frameWidthSent] - Width in pixels of the local video MediaStreamTrack's encoded frame\n * @property {number} [frameHeightSent] - Height in pixels of the local video MediaStreamTrack's encoded frame\n * @property {number} [frameWidthReceived] - Width in pixels of the remote video MediaStreamTrack's received frame\n * @property {number} [frameHeightReceived] - Height in pixels of the remote video MediaStreamTrack's received frame\n * @property {number} [frameRateInput] - Captured frames per second of the local video MediaStreamTrack\n * @property {number} [frameRateSent] - Frames per second of the local video MediaStreamTrack's encoded video\n * @property {number} [frameRateReceived] - Frames per second of the remote video MediaStreamTrack's received video\n * @property {number} [bytesReceived] - Number of bytes of the remote MediaStreamTrack's media received\n * @property {number} [bytesSent] - Number of bytes of the local MediaStreamTrack's media sent\n * @property {number} [packetsLost] - Number of packets of the MediaStreamTrack's media lost\n * @property {number} [packetsReceived] - Number of packets of the remote MediaStreamTrack's media received\n * @property {number} [packetsSent] - Number of packets of the local MediaStreamTrack's media sent\n * @property {number} [totalPacketSendDelay] - The total number of seconds that the local MediaStreamTrack's packets\n *  have spent buffered locally before being sent over the network\n * @property {number} [totalEncodeTime] - The total number of seconds spent on encoding the local MediaStreamTrack's frames\n * @property {number} [framesEncoded] - The total number of frames of the local MediaStreamTrack that have been encoded sor far\n * @property {number} [estimatedPlayoutTimestamp] - The estimated playout time of the remote MediaStreamTrack\n * @property {number} [totalDecodeTime] - The total number of seconds spent on decoding the remote MediaStreamTrack's frames\n * @property {number} [framesDecoded] - The total number of frames of the remote MediaStreamTrack that have been decoded sor far\n * @property {number} [jitterBufferDelay] - The sum of the time, in seconds, each audio sample or a video frame of the remote\n *   MediaStreamTrack takes from the time the first packet is received by the jitter buffer to the time it exits the jitter buffer\n * @property {number} [jitterBufferEmittedCount] - The total number of audio samples or video frames that have come out of the jitter buffer\n * @property {AudioLevel} [audioInputLevel] - The {@link AudioLevel} of the local audio MediaStreamTrack\n * @property {AudioLevel} [audioOutputLevel] - The {@link AudioLevel} of the remote video MediaStreamTrack\n */\n\n\nmodule.exports = getStats;","map":{"version":3,"mappings":"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","names":["flatMap","require","guessBrowser","guessBrowserVersion","getSdpFormat","guess","guessVersion","isChrome","isFirefox","isSafari","chromeMajorVersion","major","CHROME_LEGACY_MAX_AUDIO_LEVEL","getStats","peerConnection","options","Promise","reject","Error","_getStats","localAudioTracks","getTracks","localVideoTracks","remoteAudioTracks","remoteVideoTracks","statsResponse","activeIceCandidatePair","localAudioTrackStats","localVideoTrackStats","remoteAudioTrackStats","remoteVideoTrackStats","trackStatsPromises","triple","tracks","statsArrayName","isRemote","map","track","getTrackStats","Object","assign","then","trackStatsArray","forEach","trackStats","trackId","id","push","all","getActiveIceCandidatePairStats","activeIceCandidatePairStatsReport","testForChrome","testForSafari","standardizeChromeOrSafariActiveIceCandidatePairStats","testForFirefox","standardizeFirefoxActiveIceCandidatePairStats","stats","activeCandidatePairStats","Array","from","values","find","stat","type","nominated","activeLocalCandidateStats","get","localCandidateId","activeRemoteCandidateStats","remoteCandidateId","standardizedCandidateStatsKeys","key","standardizedLocalCandidateStatsKeys","concat","standatdizedLocalCandidateStatsReport","reduce","report","keyInfo","standardizedRemoteCandidateStatsReport","fixup","state","localCandidate","remoteCandidate","ffKeys","candidateTypes","host","peerreflexive","relayed","serverreflexive","kind","localOrRemote","getSendersOrReceivers","senderOrReceiver","filter","getStreams","stream","chromeOrSafariGetTrackStats","firefoxGetTrackStats","join","resolve","response","standardizeChromeLegacyStats","standardizeChromeOrSafariStats","standardizeFirefoxStats","ssrcReport","result","standardizedStats","timestamp","Math","round","Number","names","name","codecName","roundTripTime","jitter","frameWidthInput","frameHeightInput","frameWidthSent","frameHeightSent","frameWidthReceived","frameHeightReceived","frameRateInput","frameRateSent","frameRateReceived","inbound","outbound","remoteInbound","remoteOutbound","codec","localMedia","remoteSource","mainSources","source","statSources","ssrc","getStatValue","sourceFound","statSource","String","mimeType","split","length","frameWidth","frameHeight","framesPerSecond","bytesReceived","bytesSent","packetsLost","packetsReceived","packetsSent","audioLevel","audioOutputLevel","audioInputLevel","totalPacketSendDalay","totalPacketSendDelay","totalEncodeTime","framesEncoded","estimatedPlayoutTimestamp","totalDecodeTime","framesDecoded","jitterBufferDelay","jitterBufferEmittedCount","Map","remoteId","first","second","module","exports"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/webrtc/getstats.js"],"sourcesContent":["'use strict';\n\nvar flatMap = require('./util').flatMap;\nvar guessBrowser = require('./util').guessBrowser;\nvar guessBrowserVersion = require('./util').guessBrowserVersion;\nvar getSdpFormat = require('./util/sdp').getSdpFormat;\n\nvar guess = guessBrowser();\nvar guessVersion = guessBrowserVersion();\nvar isChrome = guess === 'chrome';\nvar isFirefox = guess === 'firefox';\nvar isSafari = guess === 'safari';\n\nvar chromeMajorVersion = isChrome ? guessVersion.major : null;\n\nvar CHROME_LEGACY_MAX_AUDIO_LEVEL = 32767;\n\n/**\n * Get the standardized {@link RTCPeerConnection} statistics.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedStatsResponse>}\n */\nfunction getStats(peerConnection, options) {\n  if (!(peerConnection && typeof peerConnection.getStats === 'function')) {\n    return Promise.reject(new Error('Given PeerConnection does not support getStats'));\n  }\n  return _getStats(peerConnection, options);\n}\n\n/**\n * getStats() implementation.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedStatsResponse>}\n */\nfunction _getStats(peerConnection, options) {\n  var localAudioTracks = getTracks(peerConnection, 'audio', 'local');\n  var localVideoTracks = getTracks(peerConnection, 'video', 'local');\n  var remoteAudioTracks = getTracks(peerConnection, 'audio');\n  var remoteVideoTracks = getTracks(peerConnection, 'video');\n\n  var statsResponse = {\n    activeIceCandidatePair: null,\n    localAudioTrackStats: [],\n    localVideoTrackStats: [],\n    remoteAudioTrackStats: [],\n    remoteVideoTrackStats: []\n  };\n\n  var trackStatsPromises = flatMap([\n    [localAudioTracks, 'localAudioTrackStats', false],\n    [localVideoTracks, 'localVideoTrackStats', false],\n    [remoteAudioTracks, 'remoteAudioTrackStats', true],\n    [remoteVideoTracks, 'remoteVideoTrackStats', true]\n  ], function(triple) {\n    var tracks = triple[0];\n    var statsArrayName = triple[1];\n    var isRemote = triple[2];\n    return tracks.map(function(track) {\n      return getTrackStats(peerConnection, track, Object.assign({\n        isRemote: isRemote\n      }, options)).then(function(trackStatsArray) {\n        trackStatsArray.forEach(function(trackStats) {\n          trackStats.trackId = track.id;\n          statsResponse[statsArrayName].push(trackStats);\n        });\n      });\n    });\n  });\n\n  return Promise.all(trackStatsPromises).then(function() {\n    return getActiveIceCandidatePairStats(peerConnection, options);\n  }).then(function(activeIceCandidatePairStatsReport) {\n    statsResponse.activeIceCandidatePair = activeIceCandidatePairStatsReport;\n    return statsResponse;\n  });\n}\n\n/**\n * Generate the {@link StandardizedActiveIceCandidatePairStatsReport} for the\n * {@link RTCPeerConnection}.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options]\n * @returns {Promise<StandardizedActiveIceCandidatePairStatsReport>}\n */\nfunction getActiveIceCandidatePairStats(peerConnection, options) {\n  options = options || {};\n\n  if (typeof options.testForChrome !== 'undefined' || isChrome\n    || typeof options.testForSafari  !== 'undefined' || isSafari) {\n    return peerConnection.getStats().then(\n      standardizeChromeOrSafariActiveIceCandidatePairStats);\n  }\n  if (typeof options.testForFirefox !== 'undefined' || isFirefox) {\n    return peerConnection.getStats().then(standardizeFirefoxActiveIceCandidatePairStats);\n  }\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n\n/**\n * Standardize the active RTCIceCandidate pair's statistics in Chrome or Safari.\n * @param {RTCStatsReport} stats\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\n */\nfunction standardizeChromeOrSafariActiveIceCandidatePairStats(stats) {\n  var activeCandidatePairStats = Array.from(stats.values()).find(function(stat) {\n    return stat.type === 'candidate-pair' && stat.nominated;\n  });\n\n  if (!activeCandidatePairStats) {\n    return null;\n  }\n\n  var activeLocalCandidateStats = stats.get(activeCandidatePairStats.localCandidateId);\n  var activeRemoteCandidateStats = stats.get(activeCandidatePairStats.remoteCandidateId);\n\n  var standardizedCandidateStatsKeys = [\n    { key: 'candidateType', type: 'string' },\n    { key: 'ip', type: 'string' },\n    { key: 'port', type: 'number' },\n    { key: 'priority', type: 'number' },\n    { key: 'protocol', type: 'string' },\n    { key: 'url', type: 'string' }\n  ];\n\n  var standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([\n    { key: 'deleted', type: 'boolean' },\n    { key: 'relayProtocol', type: 'string' }\n  ]);\n\n  var standatdizedLocalCandidateStatsReport = activeLocalCandidateStats\n    ? standardizedLocalCandidateStatsKeys.reduce(function(report, keyInfo) {\n      report[keyInfo.key] = typeof activeLocalCandidateStats[keyInfo.key] === keyInfo.type\n        ? activeLocalCandidateStats[keyInfo.key]\n        : keyInfo.key === 'deleted' ? false : null;\n      return report;\n    }, {})\n    : null;\n\n  var standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats\n    ? standardizedCandidateStatsKeys.reduce(function(report, keyInfo) {\n      report[keyInfo.key] = typeof activeRemoteCandidateStats[keyInfo.key] === keyInfo.type\n        ? activeRemoteCandidateStats[keyInfo.key]\n        : null;\n      return report;\n    }, {})\n    : null;\n\n  return [\n    { key: 'availableIncomingBitrate', type: 'number' },\n    { key: 'availableOutgoingBitrate', type: 'number' },\n    { key: 'bytesReceived', type: 'number' },\n    { key: 'bytesSent', type: 'number' },\n    { key: 'consentRequestsSent', type: 'number' },\n    { key: 'currentRoundTripTime', type: 'number' },\n    { key: 'lastPacketReceivedTimestamp', type: 'number' },\n    { key: 'lastPacketSentTimestamp', type: 'number' },\n    { key: 'nominated', type: 'boolean' },\n    { key: 'priority', type: 'number' },\n    { key: 'readable', type: 'boolean' },\n    { key: 'requestsReceived', type: 'number' },\n    { key: 'requestsSent', type: 'number' },\n    { key: 'responsesReceived', type: 'number' },\n    { key: 'responsesSent', type: 'number' },\n    { key: 'retransmissionsReceived', type: 'number' },\n    { key: 'retransmissionsSent', type: 'number' },\n    { key: 'state', type: 'string', fixup: function(state) { return state === 'inprogress' ? 'in-progress' : state; } },\n    { key: 'totalRoundTripTime', type: 'number' },\n    { key: 'transportId', type: 'string' },\n    { key: 'writable', type: 'boolean' }\n  ].reduce(function(report, keyInfo) {\n    report[keyInfo.key] = typeof activeCandidatePairStats[keyInfo.key] === keyInfo.type\n      ? (keyInfo.fixup ? keyInfo.fixup(activeCandidatePairStats[keyInfo.key]) : activeCandidatePairStats[keyInfo.key])\n      : null;\n    return report;\n  }, {\n    localCandidate: standatdizedLocalCandidateStatsReport,\n    remoteCandidate: standardizedRemoteCandidateStatsReport\n  });\n}\n\n/**\n * Standardize the active RTCIceCandidate pair's statistics in Firefox.\n * @param {RTCStatsReport} stats\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\n */\nfunction standardizeFirefoxActiveIceCandidatePairStats(stats) {\n  var activeCandidatePairStats = Array.from(stats.values()).find(function(stat) {\n    return stat.type === 'candidate-pair' && stat.nominated;\n  });\n\n  if (!activeCandidatePairStats) {\n    return null;\n  }\n\n  var activeLocalCandidateStats = stats.get(activeCandidatePairStats.localCandidateId);\n  var activeRemoteCandidateStats = stats.get(activeCandidatePairStats.remoteCandidateId);\n\n  var standardizedCandidateStatsKeys = [\n    { key: 'candidateType', type: 'string' },\n    { key: 'ip', ffKeys: ['address', 'ipAddress'], type: 'string' },\n    { key: 'port', ffKeys: ['portNumber'], type: 'number' },\n    { key: 'priority', type: 'number' },\n    { key: 'protocol', ffKeys: ['transport'], type: 'string' },\n    { key: 'url', type: 'string' }\n  ];\n\n  var standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([\n    { key: 'deleted', type: 'boolean' },\n    { key: 'relayProtocol', type: 'string' }\n  ]);\n\n  var candidateTypes = {\n    host: 'host',\n    peerreflexive: 'prflx',\n    relayed: 'relay',\n    serverreflexive: 'srflx'\n  };\n\n  var standatdizedLocalCandidateStatsReport = activeLocalCandidateStats\n    ? standardizedLocalCandidateStatsKeys.reduce(function(report, keyInfo) {\n      var key = keyInfo.ffKeys && keyInfo.ffKeys.find(function(key) {\n        return key in activeLocalCandidateStats;\n      }) || keyInfo.key;\n      report[keyInfo.key] = typeof activeLocalCandidateStats[key] === keyInfo.type\n        ? key === 'candidateType'\n          ? candidateTypes[activeLocalCandidateStats[key]] || activeLocalCandidateStats[key]\n          : activeLocalCandidateStats[key]\n        : key === 'deleted' ? false : null;\n      return report;\n    }, {})\n    : null;\n\n  var standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats\n    ? standardizedCandidateStatsKeys.reduce(function(report, keyInfo) {\n      var key = keyInfo.ffKeys && keyInfo.ffKeys.find(function(key) {\n        return key in activeRemoteCandidateStats;\n      }) || keyInfo.key;\n      report[keyInfo.key] = typeof activeRemoteCandidateStats[key] === keyInfo.type\n        ? key === 'candidateType'\n          ? candidateTypes[activeRemoteCandidateStats[key]] || activeRemoteCandidateStats[key]\n          : activeRemoteCandidateStats[key]\n        : null;\n      return report;\n    }, {})\n    : null;\n\n  return [\n    { key: 'availableIncomingBitrate', type: 'number' },\n    { key: 'availableOutgoingBitrate', type: 'number' },\n    { key: 'bytesReceived', type: 'number' },\n    { key: 'bytesSent', type: 'number' },\n    { key: 'consentRequestsSent', type: 'number' },\n    { key: 'currentRoundTripTime', type: 'number' },\n    { key: 'lastPacketReceivedTimestamp', type: 'number' },\n    { key: 'lastPacketSentTimestamp', type: 'number' },\n    { key: 'nominated', type: 'boolean' },\n    { key: 'priority', type: 'number' },\n    { key: 'readable', type: 'boolean' },\n    { key: 'requestsReceived', type: 'number' },\n    { key: 'requestsSent', type: 'number' },\n    { key: 'responsesReceived', type: 'number' },\n    { key: 'responsesSent', type: 'number' },\n    { key: 'retransmissionsReceived', type: 'number' },\n    { key: 'retransmissionsSent', type: 'number' },\n    { key: 'state', type: 'string' },\n    { key: 'totalRoundTripTime', type: 'number' },\n    { key: 'transportId', type: 'string' },\n    { key: 'writable', type: 'boolean' }\n  ].reduce(function(report, keyInfo) {\n    report[keyInfo.key] = typeof activeCandidatePairStats[keyInfo.key] === keyInfo.type\n      ? activeCandidatePairStats[keyInfo.key]\n      : null;\n    return report;\n  }, {\n    localCandidate: standatdizedLocalCandidateStatsReport,\n    remoteCandidate: standardizedRemoteCandidateStatsReport\n  });\n}\n\n/**\n * Get local/remote audio/video MediaStreamTracks.\n * @param {RTCPeerConnection} peerConnection - The RTCPeerConnection\n * @param {string} kind - 'audio' or 'video'\n * @param {string} [localOrRemote] - 'local' or 'remote'\n * @returns {Array<MediaStreamTrack>}\n */\nfunction getTracks(peerConnection, kind, localOrRemote) {\n  var getSendersOrReceivers = localOrRemote === 'local' ? 'getSenders' : 'getReceivers';\n  if (peerConnection[getSendersOrReceivers]) {\n    return peerConnection[getSendersOrReceivers]().map(function(senderOrReceiver) {\n      return senderOrReceiver.track;\n    }).filter(function(track) {\n      return track && track.kind === kind;\n    });\n  }\n  var getStreams = localOrRemote === 'local' ? 'getLocalStreams' : 'getRemoteStreams';\n  return flatMap(peerConnection[getStreams](), function(stream) {\n    var getTracks = kind === 'audio' ? 'getAudioTracks' : 'getVideoTracks';\n    return stream[getTracks]();\n  });\n}\n\n/**\n * Get the standardized statistics for a particular MediaStreamTrack.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {object} [options] - Used for testing\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\nfunction getTrackStats(peerConnection, track, options) {\n  options = options || {};\n\n  if (typeof options.testForChrome !== 'undefined' || isChrome) {\n    return chromeOrSafariGetTrackStats(peerConnection, track);\n  }\n  if (typeof options.testForFirefox  !== 'undefined' || isFirefox) {\n    return firefoxGetTrackStats(peerConnection, track, options.isRemote);\n  }\n  if (typeof options.testForSafari  !== 'undefined' || isSafari) {\n    if (typeof options.testForSafari  !== 'undefined' || getSdpFormat() === 'unified') {\n      return chromeOrSafariGetTrackStats(peerConnection, track);\n    }\n    // NOTE(syerrapragada): getStats() is not supported on\n    // Safari versions where plan-b is the SDP format\n    // due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601\n    return Promise.reject(new Error([\n      'getStats() is not supported on this version of Safari',\n      'due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601'\n    ].join(' ')));\n  }\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n\n/**\n * Get the standardized statistics for a particular MediaStreamTrack in Chrome or Safari.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\nfunction chromeOrSafariGetTrackStats(peerConnection, track) {\n  return new Promise(function(resolve, reject) {\n    if (chromeMajorVersion && chromeMajorVersion < 67) {\n      peerConnection.getStats(function(response) {\n        resolve([standardizeChromeLegacyStats(response, track)]);\n      }, null, reject);\n      return;\n    }\n    peerConnection.getStats(track).then(function(response) {\n      resolve(standardizeChromeOrSafariStats(response));\n    }, reject);\n  });\n}\n\n/**\n * Get the standardized statistics for a particular MediaStreamTrack in Firefox.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {boolean} isRemote\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\nfunction firefoxGetTrackStats(peerConnection, track, isRemote) {\n  return new Promise(function(resolve, reject) {\n    peerConnection.getStats(track).then(function(response) {\n      resolve([standardizeFirefoxStats(response, isRemote)]);\n    }, reject);\n  });\n}\n\n/**\n * Standardize the MediaStreamTrack's legacy statistics in Chrome.\n * @param {RTCStatsResponse} response\n * @param {MediaStreamTrack} track\n * @returns {StandardizedTrackStatsReport}\n */\nfunction standardizeChromeLegacyStats(response, track) {\n  var ssrcReport = response.result().find(function(report) {\n    return report.type === 'ssrc' && report.stat('googTrackId') === track.id;\n  });\n\n  var standardizedStats = {};\n\n  if (ssrcReport) {\n    standardizedStats.timestamp = Math.round(Number(ssrcReport.timestamp));\n    standardizedStats = ssrcReport.names().reduce(function(stats, name) {\n      switch (name) {\n        case 'googCodecName':\n          stats.codecName = ssrcReport.stat(name);\n          break;\n        case 'googRtt':\n          stats.roundTripTime = Number(ssrcReport.stat(name));\n          break;\n        case 'googJitterReceived':\n          stats.jitter = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameWidthInput':\n          stats.frameWidthInput = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameHeightInput':\n          stats.frameHeightInput = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameWidthSent':\n          stats.frameWidthSent = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameHeightSent':\n          stats.frameHeightSent = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameWidthReceived':\n          stats.frameWidthReceived = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameHeightReceived':\n          stats.frameHeightReceived = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameRateInput':\n          stats.frameRateInput = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameRateSent':\n          stats.frameRateSent = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameRateReceived':\n          stats.frameRateReceived = Number(ssrcReport.stat(name));\n          break;\n        case 'ssrc':\n          stats[name] = ssrcReport.stat(name);\n          break;\n        case 'bytesReceived':\n        case 'bytesSent':\n        case 'packetsLost':\n        case 'packetsReceived':\n        case 'packetsSent':\n        case 'audioInputLevel':\n        case 'audioOutputLevel':\n          stats[name] = Number(ssrcReport.stat(name));\n          break;\n      }\n\n      return stats;\n    }, standardizedStats);\n  }\n\n  return standardizedStats;\n}\n\n/**\n * Standardize the MediaStreamTrack's statistics in Chrome or Safari.\n * @param {RTCStatsResponse} response\n * @returns {Array<StandardizedTrackStatsReport>}\n */\nfunction standardizeChromeOrSafariStats(response) {\n  var inbound = null;\n\n  // NOTE(mpatwardhan): We should expect more than one \"outbound-rtp\" stats for a\n  // VP8 simulcast MediaStreamTrack.\n  var outbound = [];\n\n  var remoteInbound = null;\n  var remoteOutbound = null;\n  var track = null;\n  var codec = null;\n  var localMedia = null;\n\n  response.forEach(function(stat) {\n    switch (stat.type) {\n      case 'inbound-rtp':\n        inbound = stat;\n        break;\n      case 'outbound-rtp':\n        outbound.push(stat);\n        break;\n      case 'media-source':\n        localMedia = stat;\n        break;\n      case 'track':\n        track = stat;\n        break;\n      case 'codec':\n        codec = stat;\n        break;\n      case 'remote-inbound-rtp':\n        remoteInbound = stat;\n        break;\n      case 'remote-outbound-rtp':\n        remoteOutbound = stat;\n        break;\n    }\n  });\n\n  var isRemote = track && track.remoteSource;\n  var mainSources = isRemote ? [inbound] : outbound;\n  var stats = [];\n  var remoteSource = isRemote ? remoteOutbound : remoteInbound; // remote rtp stats\n\n  mainSources.forEach(function(source) {\n    var standardizedStats = {};\n    var statSources = [\n      source, // local rtp stats\n      localMedia,\n      track,\n      codec,\n      remoteSource && remoteSource.ssrc === source.ssrc ? remoteSource : null, // remote rtp stats\n    ];\n\n    function getStatValue(name) {\n      var sourceFound = statSources.find(function(statSource) {\n        return statSource && typeof statSource[name] !== 'undefined';\n      }) || null;\n\n      return sourceFound ? sourceFound[name] : null;\n    }\n\n    var ssrc = getStatValue('ssrc');\n    if (typeof ssrc === 'number') {\n      standardizedStats.ssrc = String(ssrc);\n    }\n\n    var timestamp = getStatValue('timestamp');\n    standardizedStats.timestamp = Math.round(timestamp);\n\n    var mimeType = getStatValue('mimeType');\n    if (typeof mimeType === 'string') {\n      mimeType = mimeType.split('/');\n      standardizedStats.codecName = mimeType[mimeType.length - 1];\n    }\n\n    var roundTripTime = getStatValue('roundTripTime');\n    if (typeof roundTripTime === 'number') {\n      standardizedStats.roundTripTime = Math.round(roundTripTime * 1000);\n    }\n\n    var jitter = getStatValue('jitter');\n    if (typeof jitter === 'number') {\n      standardizedStats.jitter = Math.round(jitter * 1000);\n    }\n\n    var frameWidth = getStatValue('frameWidth');\n    if (typeof frameWidth === 'number') {\n      if (isRemote) {\n        standardizedStats.frameWidthReceived = frameWidth;\n      } else {\n        standardizedStats.frameWidthSent = frameWidth;\n        standardizedStats.frameWidthInput = track.frameWidth;\n      }\n    }\n\n    var frameHeight = getStatValue('frameHeight');\n    if (typeof frameHeight === 'number') {\n      if (isRemote) {\n        standardizedStats.frameHeightReceived = frameHeight;\n      } else {\n        standardizedStats.frameHeightSent = frameHeight;\n        standardizedStats.frameHeightInput = track.frameHeight;\n      }\n    }\n\n    var framesPerSecond = getStatValue('framesPerSecond');\n    if (typeof framesPerSecond === 'number') {\n      standardizedStats[isRemote ? 'frameRateReceived' : 'frameRateSent'] = framesPerSecond;\n    }\n\n    var bytesReceived = getStatValue('bytesReceived');\n    if (typeof bytesReceived === 'number') {\n      standardizedStats.bytesReceived = bytesReceived;\n    }\n\n    var bytesSent = getStatValue('bytesSent');\n    if (typeof bytesSent === 'number') {\n      standardizedStats.bytesSent = bytesSent;\n    }\n\n    var packetsLost = getStatValue('packetsLost');\n    if (typeof packetsLost === 'number') {\n      standardizedStats.packetsLost = packetsLost;\n    }\n\n    var packetsReceived = getStatValue('packetsReceived');\n    if (typeof packetsReceived === 'number') {\n      standardizedStats.packetsReceived = packetsReceived;\n    }\n\n    var packetsSent = getStatValue('packetsSent');\n    if (typeof packetsSent === 'number') {\n      standardizedStats.packetsSent = packetsSent;\n    }\n\n    var audioLevel = getStatValue('audioLevel');\n    if (typeof audioLevel === 'number') {\n      audioLevel = Math.round(audioLevel * CHROME_LEGACY_MAX_AUDIO_LEVEL);\n      if (isRemote) {\n        standardizedStats.audioOutputLevel = audioLevel;\n      } else {\n        standardizedStats.audioInputLevel = audioLevel;\n      }\n    }\n\n    var totalPacketSendDalay = getStatValue('totalPacketSendDelay');\n    if (typeof totalPacketSendDalay === 'number') {\n      standardizedStats.totalPacketSendDelay = totalPacketSendDalay;\n    }\n\n    var totalEncodeTime = getStatValue('totalEncodeTime');\n    if (typeof totalEncodeTime === 'number') {\n      standardizedStats.totalEncodeTime = totalEncodeTime;\n    }\n\n    var framesEncoded = getStatValue('framesEncoded');\n    if (typeof framesEncoded === 'number') {\n      standardizedStats.framesEncoded = framesEncoded;\n    }\n\n    var estimatedPlayoutTimestamp = getStatValue('estimatedPlayoutTimestamp');\n    if (typeof estimatedPlayoutTimestamp === 'number') {\n      standardizedStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n    }\n\n    var totalDecodeTime = getStatValue('totalDecodeTime');\n    if (typeof totalDecodeTime === 'number') {\n      standardizedStats.totalDecodeTime = totalDecodeTime;\n    }\n\n    var framesDecoded = getStatValue('framesDecoded');\n    if (typeof framesDecoded === 'number') {\n      standardizedStats.framesDecoded = framesDecoded;\n    }\n\n    var jitterBufferDelay = getStatValue('jitterBufferDelay');\n    if (typeof jitterBufferDelay === 'number') {\n      standardizedStats.jitterBufferDelay = jitterBufferDelay;\n    }\n\n    var jitterBufferEmittedCount = getStatValue('jitterBufferEmittedCount');\n    if (typeof jitterBufferEmittedCount === 'number') {\n      standardizedStats.jitterBufferEmittedCount = jitterBufferEmittedCount;\n    }\n\n    stats.push(standardizedStats);\n  });\n\n  return stats;\n}\n\n/**\n * Standardize the MediaStreamTrack's statistics in Firefox.\n * @param {RTCStatsReport} response\n * @param {boolean} isRemote\n * @returns {StandardizedTrackStatsReport}\n */\nfunction standardizeFirefoxStats(response, isRemote) {\n  // NOTE(mroberts): If getStats is called on a closed RTCPeerConnection,\n  // Firefox returns undefined instead of an RTCStatsReport. We workaround this\n  // here. See the following bug for more details:\n  //\n  //   https://bugzilla.mozilla.org/show_bug.cgi?id=1377225\n  //\n  response = response || new Map();\n\n  var inbound = null;\n  var outbound = null;\n\n  // NOTE(mmalavalli): Starting from Firefox 63, RTC{Inbound, Outbound}RTPStreamStats.isRemote\n  // will be deprecated, followed by its removal in Firefox 66. Also, trying to\n  // access members of the remote RTC{Inbound, Outbound}RTPStreamStats without\n  // using RTCStatsReport.get(remoteId) will trigger console warnings. So, we\n  // no longer depend on \"isRemote\", and we call RTCStatsReport.get(remoteId)\n  // to access the remote RTC{Inbound, Outbound}RTPStreamStats.\n  //\n  // Source: https://blog.mozilla.org/webrtc/getstats-isremote-65/\n  //\n  response.forEach(function(stat) {\n    if (stat.isRemote) {\n      return;\n    }\n    switch (stat.type) {\n      case 'inbound-rtp':\n        inbound = stat;\n        outbound = response.get(stat.remoteId);\n        break;\n      case 'outbound-rtp':\n        outbound = stat;\n        inbound = response.get(stat.remoteId);\n        break;\n    }\n  });\n\n  var first = isRemote ? inbound : outbound;\n  var second = isRemote ? outbound : inbound;\n\n  function getStatValue(name) {\n    if (first && typeof first[name] !== 'undefined') {\n      return first[name];\n    }\n    if (second && typeof second[name] !== 'undefined') {\n      return second[name];\n    }\n    return null;\n  }\n\n  var standardizedStats = {};\n  var timestamp = getStatValue('timestamp');\n  standardizedStats.timestamp = Math.round(timestamp);\n\n  var ssrc = getStatValue('ssrc');\n  if (typeof ssrc === 'number') {\n    standardizedStats.ssrc = String(ssrc);\n  }\n\n  var bytesSent = getStatValue('bytesSent');\n  if (typeof bytesSent === 'number') {\n    standardizedStats.bytesSent = bytesSent;\n  }\n\n  var packetsLost = getStatValue('packetsLost');\n  if (typeof packetsLost === 'number') {\n    standardizedStats.packetsLost = packetsLost;\n  }\n\n  var packetsSent = getStatValue('packetsSent');\n  if (typeof packetsSent === 'number') {\n    standardizedStats.packetsSent = packetsSent;\n  }\n\n  var roundTripTime = getStatValue('roundTripTime');\n  if (typeof roundTripTime === 'number') {\n    // roundTripTime is double - measured in seconds.\n    // https://www.w3.org/TR/webrtc-stats/#dom-rtcremoteinboundrtpstreamstats-roundtriptime\n    // cover it to milliseconds (and make it integer)\n    standardizedStats.roundTripTime = Math.round(roundTripTime * 1000);\n  }\n\n  var jitter = getStatValue('jitter');\n  if (typeof jitter === 'number') {\n    standardizedStats.jitter = Math.round(jitter * 1000);\n  }\n\n  var frameRateSent = getStatValue('framerateMean');\n  if (typeof frameRateSent === 'number') {\n    standardizedStats.frameRateSent = Math.round(frameRateSent);\n  }\n\n  var bytesReceived = getStatValue('bytesReceived');\n  if (typeof bytesReceived === 'number') {\n    standardizedStats.bytesReceived = bytesReceived;\n  }\n\n  var packetsReceived = getStatValue('packetsReceived');\n  if (typeof packetsReceived === 'number') {\n    standardizedStats.packetsReceived = packetsReceived;\n  }\n\n  var frameRateReceived = getStatValue('framerateMean');\n  if (typeof frameRateReceived === 'number') {\n    standardizedStats.frameRateReceived = Math.round(frameRateReceived);\n  }\n\n  var totalPacketSendDalay = getStatValue('totalPacketSendDelay');\n  if (typeof totalPacketSendDalay === 'number') {\n    standardizedStats.totalPacketSendDelay = totalPacketSendDalay;\n  }\n\n  var totalEncodeTime = getStatValue('totalEncodeTime');\n  if (typeof totalEncodeTime === 'number') {\n    standardizedStats.totalEncodeTime = totalEncodeTime;\n  }\n\n  var framesEncoded = getStatValue('framesEncoded');\n  if (typeof framesEncoded === 'number') {\n    standardizedStats.framesEncoded = framesEncoded;\n  }\n\n  var estimatedPlayoutTimestamp = getStatValue('estimatedPlayoutTimestamp');\n  if (typeof estimatedPlayoutTimestamp === 'number') {\n    standardizedStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n  }\n\n  var totalDecodeTime = getStatValue('totalDecodeTime');\n  if (typeof totalDecodeTime === 'number') {\n    standardizedStats.totalDecodeTime = totalDecodeTime;\n  }\n\n  var framesDecoded = getStatValue('framesDecoded');\n  if (typeof framesDecoded === 'number') {\n    standardizedStats.framesDecoded = framesDecoded;\n  }\n\n  var jitterBufferDelay = getStatValue('jitterBufferDelay');\n  if (typeof jitterBufferDelay === 'number') {\n    standardizedStats.jitterBufferDelay = jitterBufferDelay;\n  }\n\n  var jitterBufferEmittedCount = getStatValue('jitterBufferEmittedCount');\n  if (typeof jitterBufferEmittedCount === 'number') {\n    standardizedStats.jitterBufferEmittedCount = jitterBufferEmittedCount;\n  }\n\n  return standardizedStats;\n}\n\n/**\n * Standardized RTCIceCandidate statistics.\n * @typedef {object} StandardizedIceCandidateStatsReport\n * @property {'host'|'prflx'|'relay'|'srflx'} candidateType\n * @property {string} ip\n * @property {number} port\n * @property {number} priority\n * @property {'tcp'|'udp'} protocol\n * @property {string} url\n */\n\n/**\n * Standardized local RTCIceCandidate statistics.\n * @typedef {StandardizedIceCandidateStatsReport} StandardizedLocalIceCandidateStatsReport\n * @property {boolean} [deleted=false]\n * @property {'tcp'|'tls'|'udp'} relayProtocol\n */\n\n/**\n * Standardized active RTCIceCandidate pair statistics.\n * @typedef {object} StandardizedActiveIceCandidatePairStatsReport\n * @property {number} availableIncomingBitrate\n * @property {number} availableOutgoingBitrate\n * @property {number} bytesReceived\n * @property {number} bytesSent\n * @property {number} consentRequestsSent\n * @property {number} currentRoundTripTime\n * @property {number} lastPacketReceivedTimestamp\n * @property {number} lastPacketSentTimestamp\n * @property {StandardizedLocalIceCandidateStatsReport} localCandidate\n * @property {boolean} nominated\n * @property {number} priority\n * @property {boolean} readable\n * @property {StandardizedIceCandidateStatsReport} remoteCandidate\n * @property {number} requestsReceived\n * @property {number} requestsSent\n * @property {number} responsesReceived\n * @property {number} responsesSent\n * @property {number} retransmissionsReceived\n * @property {number} retransmissionsSent\n * @property {'frozen'|'waiting'|'in-progress'|'failed'|'succeeded'} state\n * @property {number} totalRoundTripTime\n * @property {string} transportId\n * @property {boolean} writable\n */\n\n/**\n * Standardized {@link RTCPeerConnection} statistics.\n * @typedef {Object} StandardizedStatsResponse\n * @property {StandardizedActiveIceCandidatePairStatsReport} activeIceCandidatePair - Stats for active ICE candidate pair\n * @property Array<StandardizedTrackStatsReport> localAudioTrackStats - Stats for local audio MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> localVideoTrackStats - Stats for local video MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> remoteAudioTrackStats - Stats for remote audio MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> remoteVideoTrackStats - Stats for remote video MediaStreamTracks\n */\n\n/**\n * Standardized MediaStreamTrack statistics.\n * @typedef {Object} StandardizedTrackStatsReport\n * @property {string} trackId - MediaStreamTrack ID\n * @property {string} ssrc - SSRC of the MediaStreamTrack\n * @property {number} timestamp - The Unix timestamp in milliseconds\n * @property {string} [codecName] - Name of the codec used to encode the MediaStreamTrack's media\n * @property {number} [roundTripTime] - Round trip time in milliseconds\n * @property {number} [jitter] - Jitter in milliseconds\n * @property {number} [frameWidthInput] - Width in pixels of the local video MediaStreamTrack's captured frame\n * @property {number} [frameHeightInput] - Height in pixels of the local video MediaStreamTrack's captured frame\n * @property {number} [frameWidthSent] - Width in pixels of the local video MediaStreamTrack's encoded frame\n * @property {number} [frameHeightSent] - Height in pixels of the local video MediaStreamTrack's encoded frame\n * @property {number} [frameWidthReceived] - Width in pixels of the remote video MediaStreamTrack's received frame\n * @property {number} [frameHeightReceived] - Height in pixels of the remote video MediaStreamTrack's received frame\n * @property {number} [frameRateInput] - Captured frames per second of the local video MediaStreamTrack\n * @property {number} [frameRateSent] - Frames per second of the local video MediaStreamTrack's encoded video\n * @property {number} [frameRateReceived] - Frames per second of the remote video MediaStreamTrack's received video\n * @property {number} [bytesReceived] - Number of bytes of the remote MediaStreamTrack's media received\n * @property {number} [bytesSent] - Number of bytes of the local MediaStreamTrack's media sent\n * @property {number} [packetsLost] - Number of packets of the MediaStreamTrack's media lost\n * @property {number} [packetsReceived] - Number of packets of the remote MediaStreamTrack's media received\n * @property {number} [packetsSent] - Number of packets of the local MediaStreamTrack's media sent\n * @property {number} [totalPacketSendDelay] - The total number of seconds that the local MediaStreamTrack's packets\n *  have spent buffered locally before being sent over the network\n * @property {number} [totalEncodeTime] - The total number of seconds spent on encoding the local MediaStreamTrack's frames\n * @property {number} [framesEncoded] - The total number of frames of the local MediaStreamTrack that have been encoded sor far\n * @property {number} [estimatedPlayoutTimestamp] - The estimated playout time of the remote MediaStreamTrack\n * @property {number} [totalDecodeTime] - The total number of seconds spent on decoding the remote MediaStreamTrack's frames\n * @property {number} [framesDecoded] - The total number of frames of the remote MediaStreamTrack that have been decoded sor far\n * @property {number} [jitterBufferDelay] - The sum of the time, in seconds, each audio sample or a video frame of the remote\n *   MediaStreamTrack takes from the time the first packet is received by the jitter buffer to the time it exits the jitter buffer\n * @property {number} [jitterBufferEmittedCount] - The total number of audio samples or video frames that have come out of the jitter buffer\n * @property {AudioLevel} [audioInputLevel] - The {@link AudioLevel} of the local audio MediaStreamTrack\n * @property {AudioLevel} [audioOutputLevel] - The {@link AudioLevel} of the remote video MediaStreamTrack\n */\n\nmodule.exports = getStats;\n"]},"metadata":{},"sourceType":"script"}