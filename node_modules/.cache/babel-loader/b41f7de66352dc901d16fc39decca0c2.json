{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTurnCredentials = void 0;\n/* eslint-disable camelcase */\n\nvar TwilioConnection = require('../twilioconnection.js');\n\nvar ICE_VERSION = require('../util/constants').ICE_VERSION;\n\nvar _a = require('../util/twilio-video-errors'),\n    createTwilioError = _a.createTwilioError,\n    SignalingConnectionError = _a.SignalingConnectionError;\n\nvar events_1 = require(\"events\");\n\nfunction getTurnCredentials(token, wsServer) {\n  return new Promise(function (resolve, reject) {\n    var eventObserver = new events_1.EventEmitter();\n    var connectionOptions = {\n      networkMonitor: null,\n      eventObserver: eventObserver,\n      helloBody: {\n        edge: 'roaming',\n        preflight: true,\n        token: token,\n        type: 'ice',\n        version: ICE_VERSION\n      }\n    };\n    var twilioConnection = new TwilioConnection(wsServer, connectionOptions);\n    var done = false;\n    twilioConnection.once('close', function () {\n      if (!done) {\n        done = true;\n        reject(new SignalingConnectionError());\n      }\n    });\n    twilioConnection.on('message', function (messageData) {\n      var code = messageData.code,\n          message = messageData.message,\n          ice_servers = messageData.ice_servers,\n          type = messageData.type;\n\n      if ((type === 'iced' || type === 'error') && !done) {\n        done = true;\n\n        if (type === 'iced') {\n          resolve(ice_servers);\n        } else {\n          reject(createTwilioError(code, message));\n        }\n\n        twilioConnection.close();\n      }\n    });\n  });\n}\n\nexports.getTurnCredentials = getTurnCredentials;","map":{"version":3,"mappings":";;;;;;AAAA;;AACA,IAAMA,gBAAgB,GAAGC,OAAO,CAAC,wBAAD,CAAhC;;AACQ,eAAW,GAAKA,OAAO,CAAC,mBAAD,CAAP,CAA4BC,WAA5C;;AACF,SAAkDD,OAAO,CAAC,6BAAD,CAAzD;AAAA,IAAEE,iBAAiB,uBAAnB;AAAA,IAAqBC,wBAAwB,8BAA7C;;AAGN;;AAIA,SAAgBC,kBAAhB,CAAmCC,KAAnC,EAAkDC,QAAlD,EAAkE;EAChE,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;IACjC,IAAMC,aAAa,GAAG,IAAIC,qBAAJ,EAAtB;IACA,IAAMC,iBAAiB,GAAG;MACxBC,cAAc,EAAE,IADQ;MAExBH,aAAa,eAFW;MAGxBI,SAAS,EAAE;QACTC,IAAI,EAAE,SADG;QAETC,SAAS,EAAE,IAFF;QAGTX,KAAK,EAAEA,KAHE;QAITY,IAAI,EAAE,KAJG;QAKTC,OAAO,EAAEjB;MALA;IAHa,CAA1B;IAYA,IAAMkB,gBAAgB,GAAG,IAAIpB,gBAAJ,CAAqBO,QAArB,EAA+BM,iBAA/B,CAAzB;IACA,IAAIQ,IAAI,GAAG,KAAX;IACAD,gBAAgB,CAACE,IAAjB,CAAsB,OAAtB,EAA+B;MAC7B,IAAI,CAACD,IAAL,EAAW;QACTA,IAAI,GAAG,IAAP;QACAX,MAAM,CAAC,IAAIN,wBAAJ,EAAD,CAAN;MACD;IACF,CALD;IAOAgB,gBAAgB,CAACG,EAAjB,CAAoB,SAApB,EAA+B,UAACC,WAAD,EAK9B;MACS,QAAI,GAAiCA,WAAW,KAAhD;MAAA,IAAMC,OAAO,GAAwBD,WAAW,QAAhD;MAAA,IAAeE,WAAW,GAAWF,WAAW,YAAhD;MAAA,IAA4BN,IAAI,GAAKM,WAAW,KAAhD;;MACR,IAAI,CAACN,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,OAA7B,KAAyC,CAACG,IAA9C,EAAoD;QAClDA,IAAI,GAAG,IAAP;;QACA,IAAIH,IAAI,KAAK,MAAb,EAAqB;UACnBT,OAAO,CAACiB,WAAD,CAAP;QACD,CAFD,MAEO;UACLhB,MAAM,CAACP,iBAAiB,CAACwB,IAAD,EAAOF,OAAP,CAAlB,CAAN;QACD;;QACDL,gBAAgB,CAACQ,KAAjB;MACD;IACF,CAhBD;EAiBD,CAxCM,CAAP;AAyCD;;AA1CDC","names":["TwilioConnection","require","ICE_VERSION","createTwilioError","SignalingConnectionError","getTurnCredentials","token","wsServer","Promise","resolve","reject","eventObserver","events_1","connectionOptions","networkMonitor","helloBody","edge","preflight","type","version","twilioConnection","done","once","on","messageData","message","ice_servers","code","close","exports"],"sources":["/home/samliu/repos/ieee/tp-robot/node_modules/twilio-video/lib/preflight/getturncredentials.ts"],"sourcesContent":["/* eslint-disable camelcase */\nconst TwilioConnection = require('../twilioconnection.js');\nconst { ICE_VERSION } = require('../util/constants');\nconst { createTwilioError, SignalingConnectionError } = require('../util/twilio-video-errors');\n\nimport { RTCIceServer, RTCStats } from './rtctypes';\nimport { EventEmitter } from 'events';\n\n\nexport { RTCStats, RTCIceServer };\nexport function getTurnCredentials(token: string, wsServer: string): Promise<RTCIceServer[]> {\n  return new Promise((resolve, reject) => {\n    const eventObserver = new EventEmitter();\n    const connectionOptions = {\n      networkMonitor: null,\n      eventObserver,\n      helloBody: {\n        edge: 'roaming', // roaming here means use same edge as signaling.\n        preflight: true,\n        token: token,\n        type: 'ice',\n        version: ICE_VERSION\n      },\n    };\n\n    const twilioConnection = new TwilioConnection(wsServer, connectionOptions);\n    let done = false;\n    twilioConnection.once('close', () => {\n      if (!done) {\n        done = true;\n        reject(new SignalingConnectionError());\n      }\n    });\n\n    twilioConnection.on('message', (messageData: {\n      code: number;\n      message: string;\n      ice_servers: RTCIceServer[];\n      type: string;\n    }) => {\n      const { code, message, ice_servers, type } = messageData;\n      if ((type === 'iced' || type === 'error') && !done) {\n        done = true;\n        if (type === 'iced') {\n          resolve(ice_servers);\n        } else {\n          reject(createTwilioError(code, message));\n        }\n        twilioConnection.close();\n      }\n    });\n  });\n}\n\n"]},"metadata":{},"sourceType":"script"}