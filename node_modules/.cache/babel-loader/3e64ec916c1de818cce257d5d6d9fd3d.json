{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.runPreflight = exports.PreflightTest = void 0;\n\nvar constants_1 = require(\"../util/constants\");\n\nvar timer_1 = require(\"./timer\");\n\nvar mos_1 = require(\"./mos\");\n\nvar getCombinedConnectionStats_1 = require(\"./getCombinedConnectionStats\");\n\nvar getturncredentials_1 = require(\"./getturncredentials\");\n\nvar makestat_1 = require(\"./makestat\");\n\nvar syntheticaudio_1 = require(\"./syntheticaudio\");\n\nvar syntheticvideo_1 = require(\"./syntheticvideo\");\n\nvar util_1 = require(\"../util\");\n\nvar WS_SERVER = require('../util/constants').WS_SERVER;\n\nvar Log = require('../util/log');\n\nvar EventEmitter = require('../eventemitter');\n\nvar MovingAverageDelta = require('../util/movingaveragedelta');\n\nvar EventObserver = require('../util/eventobserver');\n\nvar InsightsPublisher = require('../util/insightspublisher');\n\nvar _a = require('../util/sid'),\n    createSID = _a.createSID,\n    sessionSID = _a.sessionSID;\n\nvar _b = require('../util/twilio-video-errors'),\n    SignalingConnectionTimeoutError = _b.SignalingConnectionTimeoutError,\n    MediaConnectionError = _b.MediaConnectionError;\n\nvar SECOND = 1000;\nvar DEFAULT_TEST_DURATION = 10 * SECOND;\n/**\n * progress values that are sent by {@link PreflightTest#event:progress}\n * @enum {string}\n */\n\nvar PreflightProgress = {\n  /**\n   * {@link PreflightTest} has successfully generated synthetic tracks\n   */\n  mediaAcquired: 'mediaAcquired',\n\n  /**\n   * {@link PreflightTest} has successfully connected to twilio server and obtained turn credentials\n   */\n  connected: 'connected',\n\n  /**\n   * SubscriberParticipant successfully subscribed to media tracks.\n   */\n  mediaSubscribed: 'mediaSubscribed',\n\n  /**\n   * Media flow was detected.\n   */\n  mediaStarted: 'mediaStarted',\n\n  /**\n   * Established DTLS connection. This is measured from RTCDtlsTransport `connecting` to `connected` state.\n   * On Safari, Support for measuring this is missing, this event will be not be emitted on Safari.\n   */\n  dtlsConnected: 'dtlsConnected',\n\n  /**\n   * Established a PeerConnection, This is measured from PeerConnection `connecting` to `connected` state.\n   * On Firefox, Support for measuring this is missing, this event will be not be emitted on Firefox.\n   */\n  peerConnectionConnected: 'peerConnectionConnected',\n\n  /**\n   * Established ICE connection. This is measured from ICE connection `checking` to `connected` state.\n   */\n  iceConnected: 'iceConnected'\n};\n\nfunction notEmpty(value) {\n  return value !== null && typeof value !== 'undefined';\n}\n\nvar nInstances = 0;\n/**\n * A {@link PreflightTest} monitors progress of an ongoing preflight test.\n * <br><br>\n * Instance of {@link PreflightTest} is returned by calling {@link module:twilio-video.runPreflight}\n * @extends EventEmitter\n * @emits PreflightTest#completed\n * @emits PreflightTest#failed\n * @emits PreflightTest#progress\n */\n\nvar PreflightTest =\n/** @class */\nfunction (_super) {\n  __extends(PreflightTest, _super);\n  /**\n   * Constructs {@link PreflightTest}.\n   * @param {string} token\n   * @param {?PreflightOptions} [options]\n   */\n\n\n  function PreflightTest(token, options) {\n    var _this = _super.call(this) || this;\n\n    _this._testTiming = new timer_1.Timer();\n    _this._dtlsTiming = new timer_1.Timer();\n    _this._iceTiming = new timer_1.Timer();\n    _this._peerConnectionTiming = new timer_1.Timer();\n    _this._mediaTiming = new timer_1.Timer();\n    _this._connectTiming = new timer_1.Timer();\n    _this._sentBytesMovingAverage = new MovingAverageDelta();\n    _this._packetLossMovingAverage = new MovingAverageDelta();\n    _this._progressEvents = [];\n    _this._receivedBytesMovingAverage = new MovingAverageDelta();\n    var internalOptions = options;\n    var _a = internalOptions.environment,\n        environment = _a === void 0 ? 'prod' : _a,\n        _b = internalOptions.region,\n        region = _b === void 0 ? 'gll' : _b,\n        _c = internalOptions.duration,\n        duration = _c === void 0 ? DEFAULT_TEST_DURATION : _c; // eslint-disable-next-line new-cap\n\n    var wsServer = internalOptions.wsServer || WS_SERVER(environment, region);\n    _this._log = new Log('default', _this, constants_1.DEFAULT_LOG_LEVEL, constants_1.DEFAULT_LOGGER_NAME);\n    _this._testDuration = duration;\n    _this._instanceId = nInstances++;\n\n    _this._testTiming.start();\n\n    _this._runPreflightTest(token, environment, wsServer);\n\n    return _this;\n  }\n\n  PreflightTest.prototype.toString = function () {\n    return \"[Preflight #\" + this._instanceId + \"]\";\n  };\n  /**\n   * stops ongoing tests and emits error\n   */\n\n\n  PreflightTest.prototype.stop = function () {\n    this._stopped = true;\n  };\n\n  PreflightTest.prototype._generatePreflightReport = function (collectedStats) {\n    this._testTiming.stop();\n\n    return {\n      testTiming: this._testTiming.getTimeMeasurement(),\n      networkTiming: {\n        dtls: this._dtlsTiming.getTimeMeasurement(),\n        ice: this._iceTiming.getTimeMeasurement(),\n        peerConnection: this._peerConnectionTiming.getTimeMeasurement(),\n        connect: this._connectTiming.getTimeMeasurement(),\n        media: this._mediaTiming.getTimeMeasurement()\n      },\n      stats: {\n        jitter: makestat_1.makeStat(collectedStats === null || collectedStats === void 0 ? void 0 : collectedStats.jitter),\n        rtt: makestat_1.makeStat(collectedStats === null || collectedStats === void 0 ? void 0 : collectedStats.rtt),\n        packetLoss: makestat_1.makeStat(collectedStats === null || collectedStats === void 0 ? void 0 : collectedStats.packetLoss)\n      },\n      selectedIceCandidatePairStats: collectedStats ? collectedStats.selectedIceCandidatePairStats : null,\n      iceCandidateStats: collectedStats ? collectedStats.iceCandidateStats : [],\n      progressEvents: this._progressEvents,\n      // NOTE(mpatwardhan): internal properties.\n      mos: makestat_1.makeStat(collectedStats === null || collectedStats === void 0 ? void 0 : collectedStats.mos)\n    };\n  };\n\n  PreflightTest.prototype._executePreflightStep = function (stepName, step, timeoutError) {\n    return __awaiter(this, void 0, void 0, function () {\n      var MAX_STEP_DURATION, stepPromise, timer, timeoutPromise, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this._log.debug('Executing step: ', stepName);\n\n            MAX_STEP_DURATION = this._testDuration + 10 * SECOND;\n\n            if (this._stopped) {\n              throw new Error('stopped');\n            }\n\n            stepPromise = Promise.resolve().then(step);\n            timer = null;\n            timeoutPromise = new Promise(function (_resolve, reject) {\n              timer = setTimeout(function () {\n                reject(timeoutError || new Error(stepName + \" timeout.\"));\n              }, MAX_STEP_DURATION);\n            });\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1,, 3, 4]);\n\n            return [4\n            /*yield*/\n            , Promise.race([timeoutPromise, stepPromise])];\n\n          case 2:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n\n          case 3:\n            if (timer !== null) {\n              clearTimeout(timer);\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  PreflightTest.prototype._collectNetworkTimings = function (pc) {\n    var _this = this;\n\n    return new Promise(function (resolve) {\n      var dtlsTransport;\n      pc.addEventListener('iceconnectionstatechange', function () {\n        if (pc.iceConnectionState === 'checking') {\n          _this._iceTiming.start();\n        }\n\n        if (pc.iceConnectionState === 'connected') {\n          _this._iceTiming.stop();\n\n          _this._updateProgress(PreflightProgress.iceConnected);\n\n          if (!dtlsTransport || dtlsTransport && dtlsTransport.state === 'connected') {\n            resolve();\n          }\n        }\n      }); // firefox does not support connectionstatechange.\n\n      pc.addEventListener('connectionstatechange', function () {\n        if (pc.connectionState === 'connecting') {\n          _this._peerConnectionTiming.start();\n        }\n\n        if (pc.connectionState === 'connected') {\n          _this._peerConnectionTiming.stop();\n\n          _this._updateProgress(PreflightProgress.peerConnectionConnected);\n        }\n      }); // Safari does not expose sender.transport.\n\n      var senders = pc.getSenders();\n      var transport = senders.map(function (sender) {\n        return sender.transport;\n      }).find(notEmpty);\n\n      if (typeof transport !== 'undefined') {\n        dtlsTransport = transport;\n        dtlsTransport.addEventListener('statechange', function () {\n          if (dtlsTransport.state === 'connecting') {\n            _this._dtlsTiming.start();\n          }\n\n          if (dtlsTransport.state === 'connected') {\n            _this._dtlsTiming.stop();\n\n            _this._updateProgress(PreflightProgress.dtlsConnected);\n\n            if (pc.iceConnectionState === 'connected') {\n              resolve();\n            }\n          }\n        });\n      }\n    });\n  };\n\n  PreflightTest.prototype._setupInsights = function (_a) {\n    var token = _a.token,\n        _b = _a.environment,\n        environment = _b === void 0 ? constants_1.DEFAULT_ENVIRONMENT : _b,\n        _c = _a.realm,\n        realm = _c === void 0 ? constants_1.DEFAULT_REALM : _c;\n    var eventPublisherOptions = {};\n    var eventPublisher = new InsightsPublisher(token, constants_1.SDK_NAME, constants_1.SDK_VERSION, environment, realm, eventPublisherOptions); // event publisher requires room sid/participant sid. supply fake ones.\n\n    eventPublisher.connect('PREFLIGHT_ROOM_SID', 'PREFLIGHT_PARTICIPANT');\n    var eventObserver = new EventObserver(eventPublisher, Date.now(), this._log); // eslint-disable-next-line no-undefined\n\n    var undefinedValue = undefined;\n    return {\n      reportToInsights: function (_a) {\n        var _b, _c;\n\n        var report = _a.report;\n        var jitterStats = report.stats.jitter || undefinedValue;\n        var rttStats = report.stats.rtt || undefinedValue;\n        var packetLossStats = report.stats.packetLoss || undefinedValue;\n        var mosStats = report.mos || undefinedValue; // stringify important info from ice candidates.\n\n        var candidateTypeToProtocols = new Map();\n        report.iceCandidateStats.forEach(function (candidateStats) {\n          if (candidateStats.candidateType && candidateStats.protocol) {\n            var protocols = candidateTypeToProtocols.get(candidateStats.candidateType) || [];\n\n            if (protocols.indexOf(candidateStats.protocol) < 0) {\n              protocols.push(candidateStats.protocol);\n            }\n\n            candidateTypeToProtocols.set(candidateStats.candidateType, protocols);\n          }\n        });\n        var iceCandidateStats = JSON.stringify(Object.fromEntries(candidateTypeToProtocols));\n        var insightsReport = {\n          name: 'report',\n          group: 'preflight',\n          level: report.error ? 'error' : 'info',\n          payload: {\n            sessionSID: sessionSID,\n            preflightSID: createSID('PF'),\n            progressEvents: JSON.stringify(report.progressEvents),\n            testTiming: report.testTiming,\n            dtlsTiming: report.networkTiming.dtls,\n            iceTiming: report.networkTiming.ice,\n            peerConnectionTiming: report.networkTiming.peerConnection,\n            connectTiming: report.networkTiming.connect,\n            mediaTiming: report.networkTiming.media,\n            selectedLocalCandidate: (_b = report.selectedIceCandidatePairStats) === null || _b === void 0 ? void 0 : _b.localCandidate,\n            selectedRemoteCandidate: (_c = report.selectedIceCandidatePairStats) === null || _c === void 0 ? void 0 : _c.remoteCandidate,\n            iceCandidateStats: iceCandidateStats,\n            jitterStats: jitterStats,\n            rttStats: rttStats,\n            packetLossStats: packetLossStats,\n            mosStats: mosStats,\n            error: report.error\n          }\n        };\n        eventObserver.emit('event', insightsReport);\n        setTimeout(function () {\n          return eventPublisher.disconnect();\n        }, 2000);\n      }\n    };\n  };\n\n  PreflightTest.prototype._runPreflightTest = function (token, environment, wsServer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var localTracks, pcs, reportToInsights, elements_1, iceServers, senderPC_1, receiverPC_1, remoteTracks_1, collectedStats_1, report, error_1, preflightReport;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            localTracks = [];\n            pcs = [];\n            reportToInsights = this._setupInsights({\n              token: token,\n              environment: environment\n            }).reportToInsights;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 8, 9, 10]);\n\n            elements_1 = [];\n            return [4\n            /*yield*/\n            , this._executePreflightStep('Acquire media', function () {\n              return [syntheticaudio_1.syntheticAudio(), syntheticvideo_1.syntheticVideo({\n                width: 640,\n                height: 480\n              })];\n            })];\n\n          case 2:\n            localTracks = _a.sent();\n\n            this._updateProgress(PreflightProgress.mediaAcquired);\n\n            this.emit('debug', {\n              localTracks: localTracks\n            });\n\n            this._connectTiming.start();\n\n            return [4\n            /*yield*/\n            , this._executePreflightStep('Get turn credentials', function () {\n              return getturncredentials_1.getTurnCredentials(token, wsServer);\n            }, new SignalingConnectionTimeoutError())];\n\n          case 3:\n            iceServers = _a.sent();\n\n            this._connectTiming.stop();\n\n            this._updateProgress(PreflightProgress.connected);\n\n            senderPC_1 = new RTCPeerConnection({\n              iceServers: iceServers,\n              iceTransportPolicy: 'relay',\n              bundlePolicy: 'max-bundle'\n            });\n            receiverPC_1 = new RTCPeerConnection({\n              iceServers: iceServers,\n              bundlePolicy: 'max-bundle'\n            });\n            pcs.push(senderPC_1);\n            pcs.push(receiverPC_1);\n\n            this._mediaTiming.start();\n\n            return [4\n            /*yield*/\n            , this._executePreflightStep('Setup Peer Connections', function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var remoteTracksPromise, offer, updatedOffer, answer;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      senderPC_1.addEventListener('icecandidate', function (event) {\n                        return event.candidate && receiverPC_1.addIceCandidate(event.candidate);\n                      });\n                      receiverPC_1.addEventListener('icecandidate', function (event) {\n                        return event.candidate && senderPC_1.addIceCandidate(event.candidate);\n                      });\n                      localTracks.forEach(function (track) {\n                        return senderPC_1.addTrack(track);\n                      });\n                      remoteTracksPromise = new Promise(function (resolve) {\n                        var remoteTracks = [];\n                        receiverPC_1.addEventListener('track', function (event) {\n                          remoteTracks.push(event.track);\n\n                          if (remoteTracks.length === localTracks.length) {\n                            resolve(remoteTracks);\n                          }\n                        });\n                      });\n                      return [4\n                      /*yield*/\n                      , senderPC_1.createOffer()];\n\n                    case 1:\n                      offer = _a.sent();\n                      updatedOffer = offer;\n                      return [4\n                      /*yield*/\n                      , senderPC_1.setLocalDescription(updatedOffer)];\n\n                    case 2:\n                      _a.sent();\n\n                      return [4\n                      /*yield*/\n                      , receiverPC_1.setRemoteDescription(updatedOffer)];\n\n                    case 3:\n                      _a.sent();\n\n                      return [4\n                      /*yield*/\n                      , receiverPC_1.createAnswer()];\n\n                    case 4:\n                      answer = _a.sent();\n                      return [4\n                      /*yield*/\n                      , receiverPC_1.setLocalDescription(answer)];\n\n                    case 5:\n                      _a.sent();\n\n                      return [4\n                      /*yield*/\n                      , senderPC_1.setRemoteDescription(answer)];\n\n                    case 6:\n                      _a.sent();\n\n                      return [4\n                      /*yield*/\n                      , this._collectNetworkTimings(senderPC_1)];\n\n                    case 7:\n                      _a.sent();\n\n                      return [2\n                      /*return*/\n                      , remoteTracksPromise];\n                  }\n                });\n              });\n            }, new MediaConnectionError())];\n\n          case 4:\n            remoteTracks_1 = _a.sent();\n            this.emit('debug', {\n              remoteTracks: remoteTracks_1\n            });\n            remoteTracks_1.forEach(function (track) {\n              track.addEventListener('ended', function () {\n                return _this._log.warn(track.kind + ':ended');\n              });\n              track.addEventListener('mute', function () {\n                return _this._log.warn(track.kind + ':muted');\n              });\n              track.addEventListener('unmute', function () {\n                return _this._log.warn(track.kind + ':unmuted');\n              });\n            });\n\n            this._updateProgress(PreflightProgress.mediaSubscribed);\n\n            return [4\n            /*yield*/\n            , this._executePreflightStep('Wait for tracks to start', function () {\n              return new Promise(function (resolve) {\n                var element = document.createElement('video');\n                element.autoplay = true;\n                element.playsInline = true;\n                element.muted = true;\n                element.srcObject = new MediaStream(remoteTracks_1);\n                elements_1.push(element);\n\n                _this.emit('debugElement', element);\n\n                element.oncanplay = resolve;\n              });\n            }, new MediaConnectionError())];\n\n          case 5:\n            _a.sent();\n\n            this._mediaTiming.stop();\n\n            this._updateProgress(PreflightProgress.mediaStarted);\n\n            return [4\n            /*yield*/\n            , this._executePreflightStep('Collect stats for duration', function () {\n              return _this._collectRTCStatsForDuration(_this._testDuration, initCollectedStats(), senderPC_1, receiverPC_1);\n            })];\n\n          case 6:\n            collectedStats_1 = _a.sent();\n            return [4\n            /*yield*/\n            , this._executePreflightStep('Generate report', function () {\n              return _this._generatePreflightReport(collectedStats_1);\n            })];\n\n          case 7:\n            report = _a.sent();\n            reportToInsights({\n              report: report\n            });\n            this.emit('completed', report);\n            return [3\n            /*break*/\n            , 10];\n\n          case 8:\n            error_1 = _a.sent();\n            preflightReport = this._generatePreflightReport();\n            reportToInsights({\n              report: __assign(__assign({}, preflightReport), {\n                error: error_1 === null || error_1 === void 0 ? void 0 : error_1.toString()\n              })\n            });\n            this.emit('failed', error_1, preflightReport);\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            pcs.forEach(function (pc) {\n              return pc.close();\n            });\n            localTracks.forEach(function (track) {\n              return track.stop();\n            });\n            return [7\n            /*endfinally*/\n            ];\n\n          case 10:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  PreflightTest.prototype._collectRTCStats = function (collectedStats, senderPC, receiverPC) {\n    return __awaiter(this, void 0, void 0, function () {\n      var combinedStats, timestamp, bytesSent, bytesReceived, packets, packetsLost, roundTripTime, jitter, selectedIceCandidatePairStats, iceCandidateStats, hasLastData, fractionPacketLost, percentPacketsLost, score;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getCombinedConnectionStats_1.getCombinedConnectionStats({\n              publisher: senderPC,\n              subscriber: receiverPC\n            })];\n\n          case 1:\n            combinedStats = _a.sent();\n            timestamp = combinedStats.timestamp, bytesSent = combinedStats.bytesSent, bytesReceived = combinedStats.bytesReceived, packets = combinedStats.packets, packetsLost = combinedStats.packetsLost, roundTripTime = combinedStats.roundTripTime, jitter = combinedStats.jitter, selectedIceCandidatePairStats = combinedStats.selectedIceCandidatePairStats, iceCandidateStats = combinedStats.iceCandidateStats;\n            hasLastData = collectedStats.jitter.length > 0;\n            collectedStats.jitter.push(jitter);\n            collectedStats.rtt.push(roundTripTime);\n\n            this._sentBytesMovingAverage.putSample(bytesSent, timestamp);\n\n            this._receivedBytesMovingAverage.putSample(bytesReceived, timestamp);\n\n            this._packetLossMovingAverage.putSample(packetsLost, packets);\n\n            if (hasLastData) {\n              // convert BytesMovingAverage which is in bytes/millisecond to bits/second\n              collectedStats.outgoingBitrate.push(this._sentBytesMovingAverage.get() * 1000 * 8);\n              collectedStats.incomingBitrate.push(this._receivedBytesMovingAverage.get() * 1000 * 8);\n              fractionPacketLost = this._packetLossMovingAverage.get();\n              percentPacketsLost = Math.min(100, fractionPacketLost * 100);\n              collectedStats.packetLoss.push(percentPacketsLost);\n              score = mos_1.calculateMOS(roundTripTime, jitter, fractionPacketLost);\n              collectedStats.mos.push(score);\n            }\n\n            if (!collectedStats.selectedIceCandidatePairStats) {\n              collectedStats.selectedIceCandidatePairStats = selectedIceCandidatePairStats;\n            }\n\n            if (collectedStats.iceCandidateStats.length === 0) {\n              collectedStats.iceCandidateStats = iceCandidateStats;\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  PreflightTest.prototype._collectRTCStatsForDuration = function (duration, collectedStats, senderPC, receiverPC) {\n    return __awaiter(this, void 0, void 0, function () {\n      var startTime, STAT_INTERVAL, remainingDuration;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            startTime = Date.now();\n            STAT_INTERVAL = Math.min(1000, duration);\n            return [4\n            /*yield*/\n            , util_1.waitForSometime(STAT_INTERVAL)];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this._collectRTCStats(collectedStats, senderPC, receiverPC)];\n\n          case 2:\n            _a.sent();\n\n            remainingDuration = duration - (Date.now() - startTime);\n            if (!(remainingDuration > 0)) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this._collectRTCStatsForDuration(remainingDuration, collectedStats, senderPC, receiverPC)];\n\n          case 3:\n            collectedStats = _a.sent();\n            _a.label = 4;\n\n          case 4:\n            return [2\n            /*return*/\n            , collectedStats];\n        }\n      });\n    });\n  };\n\n  PreflightTest.prototype._updateProgress = function (name) {\n    var duration = Date.now() - this._testTiming.getTimeMeasurement().start;\n\n    this._progressEvents.push({\n      duration: duration,\n      name: name\n    });\n\n    this.emit('progress', name);\n  };\n\n  return PreflightTest;\n}(EventEmitter);\n\nexports.PreflightTest = PreflightTest;\n\nfunction initCollectedStats() {\n  return {\n    mos: [],\n    jitter: [],\n    rtt: [],\n    outgoingBitrate: [],\n    incomingBitrate: [],\n    packetLoss: [],\n    selectedIceCandidatePairStats: null,\n    iceCandidateStats: []\n  };\n}\n/**\n * Represents network timing measurements captured during preflight test\n * @typedef {object} NetworkTiming\n * @property {TimeMeasurement} [connect] - Time to establish signaling connection and acquire turn credentials\n * @property {TimeMeasurement} [media] - Time to start media. This is measured from calling connect to remote media getting started.\n * @property {TimeMeasurement} [dtls] - Time to establish dtls connection. This is measured from RTCDtlsTransport `connecting` to `connected` state. (Not available on Safari)\n * @property {TimeMeasurement} [ice] - Time to establish ice connectivity. This is measured from ICE connection `checking` to `connected` state.\n * @property {TimeMeasurement} [peerConnection] - Time to establish peer connectivity. This is measured from PeerConnection `connecting` to `connected` state. (Not available on Firefox)\n */\n\n/**\n * Represents stats for a numerical metric.\n * @typedef {object} Stats\n * @property  {number} [average] - Average value observed.\n * @property  {number} [max] - Max value observed.\n * @property  {number} [min] - Min value observed.\n */\n\n/**\n * Represents stats for a numerical metric.\n * @typedef {object} SelectedIceCandidatePairStats\n * @property  {RTCIceCandidateStats} [localCandidate] - Selected local ice candidate\n * @property  {RTCIceCandidateStats} [remoteCandidate] - Selected local ice candidate\n */\n\n/**\n * Represents RTC related stats that were observed during preflight test\n * @typedef {object} PreflightReportStats\n * @property {Stats} [jitter] - Packet delay variation in seconds\n * @property {Stats} [rtt] - Round trip time, to the server back to the client in milliseconds.\n * @property {Stats} [packetLoss] - Packet loss as a percent of total packets sent.\n*/\n\n/**\n * A {@link PreflightProgress} event with timing information.\n * @typedef {object} ProgressEvent\n * @property {number} [duration] - The duration of the event, measured from the start of the test.\n * @property {string} [name] - The {@link PreflightProgress} event name.\n */\n\n/**\n * Represents report generated by {@link PreflightTest}.\n * @typedef {object} PreflightTestReport\n * @property {TimeMeasurement} [testTiming] - Time measurements of test run time.\n * @property {NetworkTiming} [networkTiming] - Network related time measurements.\n * @property {PreflightReportStats} [stats] - RTC related stats captured during the test.\n * @property {Array<RTCIceCandidateStats>} [iceCandidateStats] - List of gathered ice candidates.\n * @property {SelectedIceCandidatePairStats} selectedIceCandidatePairStats - Stats for the ice candidates that were used for the connection.\n * @property {Array<ProgressEvent>} [progressEvents] - {@link ProgressEvent} events detected during the test.\n * Use this information to determine which steps were completed and which ones were not.\n */\n\n/**\n * You may pass these options to {@link module:twilio-video.testPreflight} in order to override the\n * default behavior.\n * @typedef {object} PreflightOptions\n * @property {string} [region='gll'] - Preferred signaling region; By default, you will be connected to the\n *   nearest signaling server determined by latency based routing. Setting a value other\n *   than <code style=\"padding:0 0\">gll</code> bypasses routing and guarantees that signaling traffic will be\n *   terminated in the region that you prefer. Please refer to this <a href=\"https://www.twilio.com/docs/video/ip-address-whitelisting#signaling-communication\" target=\"_blank\">table</a>\n *   for the list of supported signaling regions.\n * @property {number} [duration=10000] - number of milliseconds to run test for.\n *   once connected test will run for this duration before generating the stats report.\n */\n\n/**\n * Preflight test has completed successfully.\n * @param {PreflightTestReport} report - Results of the test.\n * @event PreflightTest#completed\n */\n\n/**\n * Preflight test has encountered a failure and is now stopped.\n * @param {TwilioError|Error} error - A TwilioError or a DOMException.\n * Possible TwilioErrors include Signaling and Media related errors which can be found\n * <a href=\"https://www.twilio.com/docs/video/build-js-video-application-recommendations-and-best-practices#connection-errors\" target=\"_blank\">here</a>.\n * @param {PreflightTestReport} report - Partial results gathered during the test. Use this information to help determine the cause of failure.\n * @event PreflightTest#failed\n */\n\n/**\n * Emitted to indicate progress of the test\n * @param {PreflightProgress} progress - Indicates the status completed.\n * @event PreflightTest#progress\n */\n\n/**\n * @method\n * @name runPreflight\n * @description Run a preflight test. This method will start a test to check the quality of network connection.\n * @memberof module:twilio-video\n * @param {string} token - The Access Token string\n * @param {PreflightOptions} options - Options for the test\n * @returns {PreflightTest} preflightTest - An instance to be used to monitor progress of the test.\n * @example\n * var { runPreflight } = require('twilio-video');\n * var preflight = runPreflight(token, preflightOptions);\n * preflightTest.on('progress', progress => {\n *   console.log('preflight progress:', progress);\n * });\n *\n * preflightTest.on('failed', (error, report) => {\n *   console.error('preflight error:', error, report);\n * });\n *\n * preflightTest.on('completed', report => {\n *   console.log('preflight completed:', report));\n * });\n*/\n\n\nfunction runPreflight(token, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var preflight = new PreflightTest(token, options);\n  return preflight;\n}\n\nexports.runPreflight = runPreflight;","map":{"version":3,"mappings":"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","names":["require","WS_SERVER","Log","EventEmitter","MovingAverageDelta","EventObserver","InsightsPublisher","createSID","sessionSID","SignalingConnectionTimeoutError","MediaConnectionError","SECOND","DEFAULT_TEST_DURATION","PreflightProgress","mediaAcquired","connected","mediaSubscribed","mediaStarted","dtlsConnected","peerConnectionConnected","iceConnected","notEmpty","value","nInstances","__extends","token","options","_super","_this","timer_1","internalOptions","_a","_b","region","_c","duration","wsServer","environment","_log","constants_1","_testDuration","_instanceId","_testTiming","start","_runPreflightTest","PreflightTest","_stopped","collectedStats","stop","testTiming","getTimeMeasurement","networkTiming","dtls","_dtlsTiming","ice","_iceTiming","peerConnection","_peerConnectionTiming","connect","_connectTiming","media","_mediaTiming","stats","jitter","makestat_1","rtt","packetLoss","selectedIceCandidatePairStats","iceCandidateStats","progressEvents","_progressEvents","mos","stepName","step","timeoutError","debug","MAX_STEP_DURATION","Error","stepPromise","Promise","resolve","then","timer","timeoutPromise","_resolve","reject","setTimeout","race","result","clearTimeout","pc","dtlsTransport","addEventListener","iceConnectionState","_updateProgress","state","connectionState","senders","getSenders","transport","map","find","realm","eventPublisherOptions","eventPublisher","eventObserver","Date","now","undefinedValue","undefined","reportToInsights","report","jitterStats","rttStats","packetLossStats","mosStats","candidateTypeToProtocols","Map","forEach","candidateStats","candidateType","protocol","protocols","get","indexOf","push","set","JSON","stringify","Object","fromEntries","insightsReport","name","group","level","error","payload","preflightSID","dtlsTiming","iceTiming","peerConnectionTiming","connectTiming","mediaTiming","selectedLocalCandidate","localCandidate","selectedRemoteCandidate","remoteCandidate","emit","disconnect","localTracks","pcs","_setupInsights","elements_1","_executePreflightStep","syntheticaudio_1","syntheticvideo_1","width","height","iceServers","senderPC_1","RTCPeerConnection","iceTransportPolicy","bundlePolicy","receiverPC_1","event","candidate","addIceCandidate","addTrack","track","remoteTracksPromise","remoteTracks","length","createOffer","offer","updatedOffer","setLocalDescription","setRemoteDescription","createAnswer","answer","_collectNetworkTimings","remoteTracks_1","warn","kind","element","document","createElement","autoplay","playsInline","muted","srcObject","MediaStream","oncanplay","_collectRTCStatsForDuration","initCollectedStats","collectedStats_1","_generatePreflightReport","preflightReport","error_1","toString","close","senderPC","receiverPC","getCombinedConnectionStats_1","publisher","subscriber","combinedStats","timestamp","bytesSent","bytesReceived","packets","packetsLost","roundTripTime","hasLastData","_sentBytesMovingAverage","putSample","_receivedBytesMovingAverage","_packetLossMovingAverage","outgoingBitrate","incomingBitrate","fractionPacketLost","percentPacketsLost","Math","min","score","mos_1","startTime","STAT_INTERVAL","util_1","_collectRTCStats","remainingDuration","exports","runPreflight","preflight"],"sources":["/home/samliu/repos/ieee/tp-robot/node_modules/twilio-video/lib/preflight/preflighttest.ts"],"sourcesContent":["import { DEFAULT_ENVIRONMENT, DEFAULT_LOGGER_NAME, DEFAULT_LOG_LEVEL, DEFAULT_REALM, SDK_NAME, SDK_VERSION } from '../util/constants';\nimport { PreflightOptions, PreflightTestReport, ProgressEvent, RTCIceCandidateStats, SelectedIceCandidatePairStats, Stats } from '../../tsdef/PreflightTypes';\nimport { StatsReport } from '../../tsdef/types';\nimport { Timer } from './timer';\nimport { TwilioError } from '../../tsdef/TwilioError';\nimport { calculateMOS } from './mos';\nimport { getCombinedConnectionStats } from './getCombinedConnectionStats';\nimport { getTurnCredentials } from './getturncredentials';\nimport { makeStat } from './makestat';\nimport { syntheticAudio } from './syntheticaudio';\nimport { syntheticVideo } from './syntheticvideo';\nimport { waitForSometime } from '../util';\n\nconst { WS_SERVER } = require('../util/constants');\nconst Log = require('../util/log');\nconst EventEmitter = require('../eventemitter');\nconst MovingAverageDelta = require('../util/movingaveragedelta');\nconst EventObserver = require('../util/eventobserver');\nconst InsightsPublisher = require('../util/insightspublisher');\nconst { createSID, sessionSID } = require('../util/sid');\nconst {\n  SignalingConnectionTimeoutError,\n  MediaConnectionError\n} = require('../util/twilio-video-errors');\n\nconst SECOND = 1000;\nconst DEFAULT_TEST_DURATION = 10 * SECOND;\n\n/**\n * progress values that are sent by {@link PreflightTest#event:progress}\n * @enum {string}\n */\nconst PreflightProgress = {\n  /**\n   * {@link PreflightTest} has successfully generated synthetic tracks\n   */\n  mediaAcquired: 'mediaAcquired',\n\n  /**\n   * {@link PreflightTest} has successfully connected to twilio server and obtained turn credentials\n   */\n  connected: 'connected',\n\n  /**\n   * SubscriberParticipant successfully subscribed to media tracks.\n   */\n  mediaSubscribed: 'mediaSubscribed',\n\n  /**\n   * Media flow was detected.\n   */\n  mediaStarted: 'mediaStarted',\n\n  /**\n   * Established DTLS connection. This is measured from RTCDtlsTransport `connecting` to `connected` state.\n   * On Safari, Support for measuring this is missing, this event will be not be emitted on Safari.\n   */\n  dtlsConnected: 'dtlsConnected',\n\n  /**\n   * Established a PeerConnection, This is measured from PeerConnection `connecting` to `connected` state.\n   * On Firefox, Support for measuring this is missing, this event will be not be emitted on Firefox.\n   */\n  peerConnectionConnected: 'peerConnectionConnected',\n\n  /**\n   * Established ICE connection. This is measured from ICE connection `checking` to `connected` state.\n   */\n  iceConnected: 'iceConnected'\n};\n\ndeclare interface PreflightStats {\n  jitter: number[],\n  rtt: number[],\n  outgoingBitrate: number[],\n  incomingBitrate: number[],\n  packetLoss: number[], // fraction of packets lost.\n  mos: number[],\n  selectedIceCandidatePairStats: SelectedIceCandidatePairStats | null,\n  iceCandidateStats: RTCIceCandidateStats[],\n}\n\ndeclare interface PreflightTestReportInternal extends PreflightTestReport {\n  error?: string,\n  mos?: Stats|null\n}\n\ndeclare interface PreflightOptionsInternal extends PreflightOptions {\n  environment?: string;\n  wsServer?: string;\n}\n\nfunction notEmpty<TValue>(value: TValue | null | undefined): value is TValue {\n  return value !== null && typeof value !== 'undefined';\n}\n\nlet nInstances = 0;\n\n/**\n * A {@link PreflightTest} monitors progress of an ongoing preflight test.\n * <br><br>\n * Instance of {@link PreflightTest} is returned by calling {@link module:twilio-video.runPreflight}\n * @extends EventEmitter\n * @emits PreflightTest#completed\n * @emits PreflightTest#failed\n * @emits PreflightTest#progress\n */\nexport class PreflightTest extends EventEmitter {\n\n  private _testTiming = new Timer();\n  private _dtlsTiming = new Timer();\n  private _iceTiming = new Timer();\n  private _peerConnectionTiming = new Timer();\n  private _mediaTiming = new Timer();\n  private _connectTiming = new Timer();\n  private _sentBytesMovingAverage = new MovingAverageDelta();\n  private _packetLossMovingAverage = new MovingAverageDelta();\n  private _progressEvents: ProgressEvent[] = [];\n  private _receivedBytesMovingAverage = new MovingAverageDelta();\n  private _log: typeof Log;\n  private _testDuration: number;\n  private _instanceId: number;\n\n  /**\n   * Constructs {@link PreflightTest}.\n   * @param {string} token\n   * @param {?PreflightOptions} [options]\n   */\n  constructor(token: string, options: PreflightOptions) {\n    super();\n    const internalOptions = options as PreflightOptionsInternal;\n    const { environment = 'prod', region = 'gll', duration = DEFAULT_TEST_DURATION } = internalOptions;\n    // eslint-disable-next-line new-cap\n    const wsServer = internalOptions.wsServer || WS_SERVER(environment, region);\n\n    this._log = new Log('default', this, DEFAULT_LOG_LEVEL, DEFAULT_LOGGER_NAME);\n    this._testDuration = duration;\n    this._instanceId = nInstances++;\n    this._testTiming.start();\n    this._runPreflightTest(token, environment, wsServer);\n  }\n\n  toString(): string {\n    return `[Preflight #${this._instanceId}]`;\n  }\n\n  /**\n   * stops ongoing tests and emits error\n   */\n  stop():void {\n    this._stopped = true;\n  }\n\n  private _generatePreflightReport(collectedStats?: PreflightStats) : PreflightTestReportInternal  {\n    this._testTiming.stop();\n    return {\n      testTiming: this._testTiming.getTimeMeasurement(),\n      networkTiming: {\n        dtls: this._dtlsTiming.getTimeMeasurement(),\n        ice: this._iceTiming.getTimeMeasurement(),\n        peerConnection: this._peerConnectionTiming.getTimeMeasurement(),\n        connect: this._connectTiming.getTimeMeasurement(),\n        media: this._mediaTiming.getTimeMeasurement()\n      },\n      stats: {\n        jitter: makeStat(collectedStats?.jitter),\n        rtt: makeStat(collectedStats?.rtt),\n        packetLoss: makeStat(collectedStats?.packetLoss),\n      },\n      selectedIceCandidatePairStats: collectedStats ? collectedStats.selectedIceCandidatePairStats : null,\n      iceCandidateStats: collectedStats ? collectedStats.iceCandidateStats : [],\n      progressEvents: this._progressEvents,\n      // NOTE(mpatwardhan): internal properties.\n      mos: makeStat(collectedStats?.mos),\n    };\n  }\n\n  private async _executePreflightStep<T>(stepName: string, step: () => T|Promise<T>, timeoutError?: TwilioError|Error) : Promise<T> {\n    this._log.debug('Executing step: ', stepName);\n    const MAX_STEP_DURATION = this._testDuration + 10 * SECOND;\n    if (this._stopped) {\n      throw new Error('stopped');\n    }\n\n    const stepPromise = Promise.resolve().then(step);\n    let timer: number | null = null;\n    const timeoutPromise = new Promise((_resolve, reject) => {\n      timer = setTimeout(() => {\n        reject(timeoutError || new Error(`${stepName} timeout.`));\n      }, MAX_STEP_DURATION) as unknown as number;\n    });\n    try {\n      const result = await Promise.race([timeoutPromise, stepPromise]);\n      return result as T;\n    } finally {\n      if (timer !== null) {\n        clearTimeout(timer);\n      }\n    }\n  }\n\n  private _collectNetworkTimings(pc: RTCPeerConnection): Promise<void> {\n    return new Promise(resolve => {\n      let dtlsTransport: RTCDtlsTransport;\n\n      pc.addEventListener('iceconnectionstatechange', () => {\n        if (pc.iceConnectionState === 'checking') {\n          this._iceTiming.start();\n        }\n        if (pc.iceConnectionState === 'connected') {\n          this._iceTiming.stop();\n          this._updateProgress(PreflightProgress.iceConnected);\n          if (!dtlsTransport || dtlsTransport && dtlsTransport.state === 'connected') {\n            resolve();\n          }\n        }\n      });\n\n      // firefox does not support connectionstatechange.\n      pc.addEventListener('connectionstatechange', () => {\n        if (pc.connectionState === 'connecting') {\n          this._peerConnectionTiming.start();\n        }\n        if (pc.connectionState === 'connected') {\n          this._peerConnectionTiming.stop();\n          this._updateProgress(PreflightProgress.peerConnectionConnected);\n        }\n      });\n\n      // Safari does not expose sender.transport.\n      let senders = pc.getSenders();\n      let transport = senders.map(sender => sender.transport).find(notEmpty);\n      if (typeof transport !== 'undefined') {\n        dtlsTransport = transport as RTCDtlsTransport;\n        dtlsTransport.addEventListener('statechange', () => {\n          if (dtlsTransport.state === 'connecting') {\n            this._dtlsTiming.start();\n          }\n          if (dtlsTransport.state === 'connected') {\n            this._dtlsTiming.stop();\n            this._updateProgress(PreflightProgress.dtlsConnected);\n            if (pc.iceConnectionState === 'connected') {\n              resolve();\n            }\n          }\n        });\n      }\n    });\n  }\n\n  private _setupInsights({ token, environment = DEFAULT_ENVIRONMENT, realm = DEFAULT_REALM } : {\n    token: string,\n    environment?: string,\n    realm?: string\n  }) {\n    const eventPublisherOptions = {};\n    const eventPublisher = new InsightsPublisher(\n      token,\n      SDK_NAME,\n      SDK_VERSION,\n      environment,\n      realm,\n      eventPublisherOptions);\n\n    // event publisher requires room sid/participant sid. supply fake ones.\n    eventPublisher.connect('PREFLIGHT_ROOM_SID', 'PREFLIGHT_PARTICIPANT');\n    const eventObserver = new EventObserver(eventPublisher, Date.now(), this._log);\n\n    // eslint-disable-next-line no-undefined\n    const undefinedValue = undefined;\n    return {\n      reportToInsights: ({ report }: { report: PreflightTestReportInternal }) => {\n        const jitterStats = report.stats.jitter || undefinedValue;\n        const rttStats = report.stats.rtt || undefinedValue;\n        const packetLossStats = report.stats.packetLoss || undefinedValue;\n        const mosStats  = report.mos || undefinedValue;\n\n        // stringify important info from ice candidates.\n        const candidateTypeToProtocols = new Map<string, string[]>();\n        report.iceCandidateStats.forEach(candidateStats => {\n          if (candidateStats.candidateType && candidateStats.protocol) {\n            let protocols = candidateTypeToProtocols.get(candidateStats.candidateType) || [];\n            if (protocols.indexOf(candidateStats.protocol) < 0) {\n              protocols.push(candidateStats.protocol);\n            }\n            candidateTypeToProtocols.set(candidateStats.candidateType, protocols);\n          }\n        });\n        const iceCandidateStats = JSON.stringify(Object.fromEntries(candidateTypeToProtocols));\n\n        const insightsReport  = {\n          name: 'report',\n          group: 'preflight',\n          level: report.error ? 'error' : 'info',\n          payload: {\n            sessionSID,\n            preflightSID: createSID('PF'),\n            progressEvents: JSON.stringify(report.progressEvents),\n            testTiming: report.testTiming,\n            dtlsTiming: report.networkTiming.dtls,\n            iceTiming: report.networkTiming.ice,\n            peerConnectionTiming: report.networkTiming.peerConnection,\n            connectTiming: report.networkTiming.connect,\n            mediaTiming: report.networkTiming.media,\n            selectedLocalCandidate: report.selectedIceCandidatePairStats?.localCandidate,\n            selectedRemoteCandidate: report.selectedIceCandidatePairStats?.remoteCandidate,\n            iceCandidateStats,\n            jitterStats,\n            rttStats,\n            packetLossStats,\n            mosStats,\n            error: report.error\n          }\n        };\n        eventObserver.emit('event', insightsReport);\n        setTimeout(() => eventPublisher.disconnect(), 2000);\n      }\n    };\n  }\n\n  private async _runPreflightTest(token: string, environment: string, wsServer: string) {\n    let localTracks: MediaStreamTrack[] = [];\n    let pcs: RTCPeerConnection[] = [];\n    const { reportToInsights } = this._setupInsights({ token, environment });\n    try {\n      let elements = [];\n      localTracks = await this._executePreflightStep('Acquire media', () => [syntheticAudio(), syntheticVideo({ width: 640, height: 480 })]);\n\n      this._updateProgress(PreflightProgress.mediaAcquired);\n      this.emit('debug', { localTracks });\n\n      this._connectTiming.start();\n      let iceServers = await this._executePreflightStep('Get turn credentials', () => getTurnCredentials(token, wsServer), new SignalingConnectionTimeoutError());\n\n      this._connectTiming.stop();\n      this._updateProgress(PreflightProgress.connected);\n\n      const senderPC: RTCPeerConnection = new RTCPeerConnection({ iceServers, iceTransportPolicy: 'relay', bundlePolicy: 'max-bundle' });\n      const receiverPC: RTCPeerConnection = new RTCPeerConnection({ iceServers, bundlePolicy: 'max-bundle' });\n      pcs.push(senderPC);\n      pcs.push(receiverPC);\n\n      this._mediaTiming.start();\n      const remoteTracks = await this._executePreflightStep('Setup Peer Connections', async () => {\n        senderPC.addEventListener('icecandidate', (event: RTCPeerConnectionIceEvent) => event.candidate && receiverPC.addIceCandidate(event.candidate));\n        receiverPC.addEventListener('icecandidate', (event: RTCPeerConnectionIceEvent) => event.candidate && senderPC.addIceCandidate(event.candidate));\n\n        localTracks.forEach(track => senderPC.addTrack(track));\n\n        const remoteTracksPromise: Promise<MediaStreamTrack[]> = new Promise(resolve => {\n          let remoteTracks: MediaStreamTrack[] = [];\n          receiverPC.addEventListener('track', event => {\n            remoteTracks.push(event.track);\n            if (remoteTracks.length === localTracks.length) {\n              resolve(remoteTracks);\n            }\n          });\n        });\n\n        const offer = await senderPC.createOffer();\n        const updatedOffer = offer;\n        await senderPC.setLocalDescription(updatedOffer);\n        await receiverPC.setRemoteDescription(updatedOffer);\n\n        const answer = await receiverPC.createAnswer();\n        await receiverPC.setLocalDescription(answer);\n        await senderPC.setRemoteDescription(answer);\n        await this._collectNetworkTimings(senderPC);\n\n        return remoteTracksPromise;\n      }, new MediaConnectionError());\n      this.emit('debug', { remoteTracks });\n      remoteTracks.forEach(track => {\n        track.addEventListener('ended', () => this._log.warn(track.kind + ':ended'));\n        track.addEventListener('mute', () => this._log.warn(track.kind + ':muted'));\n        track.addEventListener('unmute', () => this._log.warn(track.kind + ':unmuted'));\n      });\n      this._updateProgress(PreflightProgress.mediaSubscribed);\n\n      await this._executePreflightStep('Wait for tracks to start', () => {\n        return new Promise(resolve => {\n          const element = document.createElement('video');\n          element.autoplay = true;\n          element.playsInline = true;\n          element.muted = true;\n          element.srcObject = new MediaStream(remoteTracks);\n          elements.push(element);\n          this.emit('debugElement', element);\n          element.oncanplay = resolve;\n        });\n      }, new MediaConnectionError());\n      this._mediaTiming.stop();\n      this._updateProgress(PreflightProgress.mediaStarted);\n\n      const collectedStats = await this._executePreflightStep('Collect stats for duration',\n        () => this._collectRTCStatsForDuration(this._testDuration, initCollectedStats(), senderPC, receiverPC));\n\n      const report = await this._executePreflightStep('Generate report', () => this._generatePreflightReport(collectedStats));\n      reportToInsights({ report });\n      this.emit('completed', report);\n\n    } catch (error) {\n      const preflightReport = this._generatePreflightReport();\n      reportToInsights({ report: { ...preflightReport, error: error?.toString() } });\n      this.emit('failed', error, preflightReport);\n    } finally {\n      pcs.forEach(pc => pc.close());\n      localTracks.forEach(track => track.stop());\n    }\n  }\n\n  private async _collectRTCStats(collectedStats: PreflightStats, senderPC: RTCPeerConnection, receiverPC: RTCPeerConnection) {\n    const combinedStats = await getCombinedConnectionStats({ publisher: senderPC, subscriber: receiverPC });\n    const { timestamp, bytesSent, bytesReceived, packets, packetsLost, roundTripTime, jitter, selectedIceCandidatePairStats, iceCandidateStats } = combinedStats;\n    const hasLastData = collectedStats.jitter.length > 0;\n    collectedStats.jitter.push(jitter);\n    collectedStats.rtt.push(roundTripTime);\n\n    this._sentBytesMovingAverage.putSample(bytesSent, timestamp);\n    this._receivedBytesMovingAverage.putSample(bytesReceived, timestamp);\n    this._packetLossMovingAverage.putSample(packetsLost, packets);\n    if (hasLastData) {\n      // convert BytesMovingAverage which is in bytes/millisecond to bits/second\n      collectedStats.outgoingBitrate.push(this._sentBytesMovingAverage.get() * 1000 * 8);\n      collectedStats.incomingBitrate.push(this._receivedBytesMovingAverage.get() * 1000 * 8);\n      const fractionPacketLost = this._packetLossMovingAverage.get();\n      const percentPacketsLost = Math.min(100, fractionPacketLost * 100);\n\n      collectedStats.packetLoss.push(percentPacketsLost);\n\n      const score = calculateMOS(roundTripTime, jitter, fractionPacketLost);\n      collectedStats.mos.push(score);\n    }\n\n    if (!collectedStats.selectedIceCandidatePairStats) {\n      collectedStats.selectedIceCandidatePairStats = selectedIceCandidatePairStats;\n    }\n\n    if (collectedStats.iceCandidateStats.length === 0) {\n      collectedStats.iceCandidateStats = iceCandidateStats;\n    }\n  }\n\n  private async _collectRTCStatsForDuration(duration: number, collectedStats: PreflightStats, senderPC: RTCPeerConnection, receiverPC: RTCPeerConnection) : Promise<PreflightStats> {\n    const startTime = Date.now();\n    const STAT_INTERVAL = Math.min(1000, duration);\n\n    await waitForSometime(STAT_INTERVAL);\n\n    await this._collectRTCStats(collectedStats, senderPC, receiverPC);\n\n    const remainingDuration = duration - (Date.now() - startTime);\n\n    if (remainingDuration > 0) {\n      collectedStats = await this._collectRTCStatsForDuration(remainingDuration, collectedStats, senderPC, receiverPC);\n    }\n    return collectedStats;\n  }\n\n  private _updateProgress(name: string): void {\n    const duration = Date.now() - this._testTiming.getTimeMeasurement().start;\n    this._progressEvents.push({ duration, name });\n    this.emit('progress', name);\n  }\n}\n\n\nexport interface InternalStatsReport extends StatsReport {\n  activeIceCandidatePair: {\n    timestamp: number;\n    bytesSent: number;\n    bytesReceived: number;\n    currentRoundTripTime?: number;\n    localCandidate: RTCIceCandidateStats;\n    remoteCandidate: RTCIceCandidateStats;\n  }\n}\n\nfunction initCollectedStats() : PreflightStats {\n  return {\n    mos: [],\n    jitter: [],\n    rtt: [],\n    outgoingBitrate: [],\n    incomingBitrate: [],\n    packetLoss: [],\n    selectedIceCandidatePairStats: null,\n    iceCandidateStats: [],\n  };\n}\n\n/**\n * Represents network timing measurements captured during preflight test\n * @typedef {object} NetworkTiming\n * @property {TimeMeasurement} [connect] - Time to establish signaling connection and acquire turn credentials\n * @property {TimeMeasurement} [media] - Time to start media. This is measured from calling connect to remote media getting started.\n * @property {TimeMeasurement} [dtls] - Time to establish dtls connection. This is measured from RTCDtlsTransport `connecting` to `connected` state. (Not available on Safari)\n * @property {TimeMeasurement} [ice] - Time to establish ice connectivity. This is measured from ICE connection `checking` to `connected` state.\n * @property {TimeMeasurement} [peerConnection] - Time to establish peer connectivity. This is measured from PeerConnection `connecting` to `connected` state. (Not available on Firefox)\n */\n\n/**\n * Represents stats for a numerical metric.\n * @typedef {object} Stats\n * @property  {number} [average] - Average value observed.\n * @property  {number} [max] - Max value observed.\n * @property  {number} [min] - Min value observed.\n */\n\n/**\n * Represents stats for a numerical metric.\n * @typedef {object} SelectedIceCandidatePairStats\n * @property  {RTCIceCandidateStats} [localCandidate] - Selected local ice candidate\n * @property  {RTCIceCandidateStats} [remoteCandidate] - Selected local ice candidate\n */\n\n/**\n * Represents RTC related stats that were observed during preflight test\n * @typedef {object} PreflightReportStats\n * @property {Stats} [jitter] - Packet delay variation in seconds\n * @property {Stats} [rtt] - Round trip time, to the server back to the client in milliseconds.\n * @property {Stats} [packetLoss] - Packet loss as a percent of total packets sent.\n*/\n\n/**\n * A {@link PreflightProgress} event with timing information.\n * @typedef {object} ProgressEvent\n * @property {number} [duration] - The duration of the event, measured from the start of the test.\n * @property {string} [name] - The {@link PreflightProgress} event name.\n */\n\n/**\n * Represents report generated by {@link PreflightTest}.\n * @typedef {object} PreflightTestReport\n * @property {TimeMeasurement} [testTiming] - Time measurements of test run time.\n * @property {NetworkTiming} [networkTiming] - Network related time measurements.\n * @property {PreflightReportStats} [stats] - RTC related stats captured during the test.\n * @property {Array<RTCIceCandidateStats>} [iceCandidateStats] - List of gathered ice candidates.\n * @property {SelectedIceCandidatePairStats} selectedIceCandidatePairStats - Stats for the ice candidates that were used for the connection.\n * @property {Array<ProgressEvent>} [progressEvents] - {@link ProgressEvent} events detected during the test.\n * Use this information to determine which steps were completed and which ones were not.\n */\n\n/**\n * You may pass these options to {@link module:twilio-video.testPreflight} in order to override the\n * default behavior.\n * @typedef {object} PreflightOptions\n * @property {string} [region='gll'] - Preferred signaling region; By default, you will be connected to the\n *   nearest signaling server determined by latency based routing. Setting a value other\n *   than <code style=\"padding:0 0\">gll</code> bypasses routing and guarantees that signaling traffic will be\n *   terminated in the region that you prefer. Please refer to this <a href=\"https://www.twilio.com/docs/video/ip-address-whitelisting#signaling-communication\" target=\"_blank\">table</a>\n *   for the list of supported signaling regions.\n * @property {number} [duration=10000] - number of milliseconds to run test for.\n *   once connected test will run for this duration before generating the stats report.\n */\n\n/**\n * Preflight test has completed successfully.\n * @param {PreflightTestReport} report - Results of the test.\n * @event PreflightTest#completed\n */\n\n/**\n * Preflight test has encountered a failure and is now stopped.\n * @param {TwilioError|Error} error - A TwilioError or a DOMException.\n * Possible TwilioErrors include Signaling and Media related errors which can be found\n * <a href=\"https://www.twilio.com/docs/video/build-js-video-application-recommendations-and-best-practices#connection-errors\" target=\"_blank\">here</a>.\n * @param {PreflightTestReport} report - Partial results gathered during the test. Use this information to help determine the cause of failure.\n * @event PreflightTest#failed\n */\n\n/**\n * Emitted to indicate progress of the test\n * @param {PreflightProgress} progress - Indicates the status completed.\n * @event PreflightTest#progress\n */\n\n/**\n * @method\n * @name runPreflight\n * @description Run a preflight test. This method will start a test to check the quality of network connection.\n * @memberof module:twilio-video\n * @param {string} token - The Access Token string\n * @param {PreflightOptions} options - Options for the test\n * @returns {PreflightTest} preflightTest - An instance to be used to monitor progress of the test.\n * @example\n * var { runPreflight } = require('twilio-video');\n * var preflight = runPreflight(token, preflightOptions);\n * preflightTest.on('progress', progress => {\n *   console.log('preflight progress:', progress);\n * });\n *\n * preflightTest.on('failed', (error, report) => {\n *   console.error('preflight error:', error, report);\n * });\n *\n * preflightTest.on('completed', report => {\n *   console.log('preflight completed:', report));\n * });\n*/\nexport function runPreflight(token: string, options: PreflightOptions = {}): PreflightTest {\n  const preflight = new PreflightTest(token, options);\n  return preflight;\n}\n\n"]},"metadata":{},"sourceType":"script"}