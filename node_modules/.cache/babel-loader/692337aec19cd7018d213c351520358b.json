{"ast":null,"code":"/**\n * Copyright (c) 2013 Tim Perry\n * Licensed under the MIT license.\n *\n * Copied from https://github.com/pimterry/loglevel (1.7.0)\n * and modified to remove browser and AMD module support, while keeping CommonJS.\n * It was causing a conflict when this is bundled using CommonJS, and then loaded via RequireJS.\n * The proper way to fix this module is to have a build that outputs CommonJS and AMD separately\n * which needs to be submitted to the original module's repo.\n */\n\n/* istanbul ignore file */\n\n/* eslint-disable */\n// Slightly dubious tricks to cut down minimized file size\nvar noop = function noop() {};\n\nvar undefinedType = \"undefined\";\nvar isIE = typeof window !== undefinedType && typeof window.navigator !== undefinedType && /Trident\\/|MSIE /.test(window.navigator.userAgent);\nvar logMethods = [\"trace\", \"debug\", \"info\", \"warn\", \"error\"]; // Cross-browser bind equivalent that works at least back to IE6\n\nfunction bindMethod(obj, methodName) {\n  var method = obj[methodName];\n\n  if (typeof method.bind === 'function') {\n    return method.bind(obj);\n  } else {\n    try {\n      return Function.prototype.bind.call(method, obj);\n    } catch (e) {\n      // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n      return function () {\n        return Function.prototype.apply.apply(method, [obj, arguments]);\n      };\n    }\n  }\n} // Trace() doesn't print the message in IE, so for that case we need to wrap it\n\n\nfunction traceForIE() {\n  if (console.log) {\n    if (console.log.apply) {\n      console.log.apply(console, arguments);\n    } else {\n      // In old IE, native console methods themselves don't have apply().\n      Function.prototype.apply.apply(console.log, [console, arguments]);\n    }\n  }\n\n  if (console.trace) console.trace();\n} // Build the best logging method possible for this env\n// Wherever possible we want to bind, not wrap, to preserve stack traces\n\n\nfunction realMethod(methodName) {\n  if (methodName === 'debug') {\n    methodName = 'log';\n  }\n\n  if (typeof console === undefinedType) {\n    return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n  } else if (methodName === 'trace' && isIE) {\n    return traceForIE;\n  } else if (console[methodName] !== undefined) {\n    return bindMethod(console, methodName);\n  } else if (console.log !== undefined) {\n    return bindMethod(console, 'log');\n  } else {\n    return noop;\n  }\n} // These private functions always need `this` to be set properly\n\n\nfunction replaceLoggingMethods(level, loggerName) {\n  /*jshint validthis:true */\n  for (var i = 0; i < logMethods.length; i++) {\n    var methodName = logMethods[i];\n    this[methodName] = i < level ? noop : this.methodFactory(methodName, level, loggerName);\n  } // Define log.log as an alias for log.debug\n\n\n  this.log = this.debug;\n} // In old IE versions, the console isn't present until you first open it.\n// We build realMethod() replacements here that regenerate logging methods\n\n\nfunction enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n  return function () {\n    if (typeof console !== undefinedType) {\n      replaceLoggingMethods.call(this, level, loggerName);\n      this[methodName].apply(this, arguments);\n    }\n  };\n} // By default, we use closely bound real methods wherever possible, and\n// otherwise we wait for a console to appear, and then try again.\n\n\nfunction defaultMethodFactory(methodName, level, loggerName) {\n  /*jshint validthis:true */\n  return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);\n}\n\nfunction Logger(name, defaultLevel, factory) {\n  var self = this;\n  var currentLevel;\n  var storageKey = \"loglevel\";\n\n  if (typeof name === \"string\") {\n    storageKey += \":\" + name;\n  } else if (typeof name === \"symbol\") {\n    storageKey = undefined;\n  }\n\n  function persistLevelIfPossible(levelNum) {\n    var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n    if (typeof window === undefinedType || !storageKey) return; // Use localStorage if available\n\n    try {\n      window.localStorage[storageKey] = levelName;\n      return;\n    } catch (ignore) {} // Use session cookie as fallback\n\n\n    try {\n      window.document.cookie = encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n    } catch (ignore) {}\n  }\n\n  function getPersistedLevel() {\n    var storedLevel;\n    if (typeof window === undefinedType || !storageKey) return;\n\n    try {\n      storedLevel = window.localStorage[storageKey];\n    } catch (ignore) {} // Fallback to cookies if local storage gives us nothing\n\n\n    if (typeof storedLevel === undefinedType) {\n      try {\n        var cookie = window.document.cookie;\n        var location = cookie.indexOf(encodeURIComponent(storageKey) + \"=\");\n\n        if (location !== -1) {\n          storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n        }\n      } catch (ignore) {}\n    } // If the stored level is not valid, treat it as if nothing was stored.\n\n\n    if (self.levels[storedLevel] === undefined) {\n      storedLevel = undefined;\n    }\n\n    return storedLevel;\n  }\n  /*\n   *\n   * Public logger API - see https://github.com/pimterry/loglevel for details\n   *\n   */\n\n\n  self.name = name;\n  self.levels = {\n    \"TRACE\": 0,\n    \"DEBUG\": 1,\n    \"INFO\": 2,\n    \"WARN\": 3,\n    \"ERROR\": 4,\n    \"SILENT\": 5\n  };\n  self.methodFactory = factory || defaultMethodFactory;\n\n  self.getLevel = function () {\n    return currentLevel;\n  };\n\n  self.setLevel = function (level, persist) {\n    if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n      level = self.levels[level.toUpperCase()];\n    }\n\n    if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n      currentLevel = level;\n\n      if (persist !== false) {\n        // defaults to true\n        persistLevelIfPossible(level);\n      }\n\n      replaceLoggingMethods.call(self, level, name);\n\n      if (typeof console === undefinedType && level < self.levels.SILENT) {\n        return \"No console available for logging\";\n      }\n    } else {\n      throw \"log.setLevel() called with invalid level: \" + level;\n    }\n  };\n\n  self.setDefaultLevel = function (level) {\n    if (!getPersistedLevel()) {\n      self.setLevel(level, false);\n    }\n  };\n\n  self.enableAll = function (persist) {\n    self.setLevel(self.levels.TRACE, persist);\n  };\n\n  self.disableAll = function (persist) {\n    self.setLevel(self.levels.SILENT, persist);\n  }; // Initialize with the right level\n\n\n  var initialLevel = getPersistedLevel();\n\n  if (initialLevel == null) {\n    initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n  }\n\n  self.setLevel(initialLevel, false);\n}\n/*\n *\n * Top-level API\n *\n */\n\n\nvar defaultLogger = new Logger();\nvar _loggersByName = {};\n\ndefaultLogger.getLogger = function getLogger(name) {\n  if (typeof name !== \"symbol\" && typeof name !== \"string\" || name === \"\") {\n    throw new TypeError(\"You must supply a name when creating a logger.\");\n  }\n\n  var logger = _loggersByName[name];\n\n  if (!logger) {\n    logger = _loggersByName[name] = new Logger(name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n  }\n\n  return logger;\n}; // Grab the current global log variable in case of overwrite\n\n\nvar _log = typeof window !== undefinedType ? window.log : undefined;\n\ndefaultLogger.noConflict = function () {\n  if (typeof window !== undefinedType && window.log === defaultLogger) {\n    window.log = _log;\n  }\n\n  return defaultLogger;\n};\n\ndefaultLogger.getLoggers = function getLoggers() {\n  return _loggersByName;\n}; // ES6 default export, for compatibility\n\n\ndefaultLogger['default'] = defaultLogger;\nmodule.exports = defaultLogger;","map":{"version":3,"mappings":"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","names":["noop","undefinedType","isIE","window","navigator","test","userAgent","logMethods","bindMethod","obj","methodName","method","bind","Function","prototype","call","e","apply","arguments","traceForIE","console","log","trace","realMethod","undefined","replaceLoggingMethods","level","loggerName","i","length","methodFactory","debug","enableLoggingWhenConsoleArrives","defaultMethodFactory","Logger","name","defaultLevel","factory","self","currentLevel","storageKey","persistLevelIfPossible","levelNum","levelName","toUpperCase","localStorage","ignore","document","cookie","encodeURIComponent","getPersistedLevel","storedLevel","location","indexOf","exec","slice","levels","getLevel","setLevel","persist","SILENT","setDefaultLevel","enableAll","TRACE","disableAll","initialLevel","defaultLogger","_loggersByName","getLogger","TypeError","logger","_log","noConflict","getLoggers","module","exports"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/vendor/loglevel.js"],"sourcesContent":["/**\n * Copyright (c) 2013 Tim Perry\n * Licensed under the MIT license.\n *\n * Copied from https://github.com/pimterry/loglevel (1.7.0)\n * and modified to remove browser and AMD module support, while keeping CommonJS.\n * It was causing a conflict when this is bundled using CommonJS, and then loaded via RequireJS.\n * The proper way to fix this module is to have a build that outputs CommonJS and AMD separately\n * which needs to be submitted to the original module's repo.\n */\n\n/* istanbul ignore file */\n/* eslint-disable */\n// Slightly dubious tricks to cut down minimized file size\nvar noop = function() {};\nvar undefinedType = \"undefined\";\nvar isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n    /Trident\\/|MSIE /.test(window.navigator.userAgent)\n);\n\nvar logMethods = [\n    \"trace\",\n    \"debug\",\n    \"info\",\n    \"warn\",\n    \"error\"\n];\n\n// Cross-browser bind equivalent that works at least back to IE6\nfunction bindMethod(obj, methodName) {\n    var method = obj[methodName];\n    if (typeof method.bind === 'function') {\n        return method.bind(obj);\n    } else {\n        try {\n            return Function.prototype.bind.call(method, obj);\n        } catch (e) {\n            // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n            return function() {\n                return Function.prototype.apply.apply(method, [obj, arguments]);\n            };\n        }\n    }\n}\n\n// Trace() doesn't print the message in IE, so for that case we need to wrap it\nfunction traceForIE() {\n    if (console.log) {\n        if (console.log.apply) {\n            console.log.apply(console, arguments);\n        } else {\n            // In old IE, native console methods themselves don't have apply().\n            Function.prototype.apply.apply(console.log, [console, arguments]);\n        }\n    }\n    if (console.trace) console.trace();\n}\n\n// Build the best logging method possible for this env\n// Wherever possible we want to bind, not wrap, to preserve stack traces\nfunction realMethod(methodName) {\n    if (methodName === 'debug') {\n        methodName = 'log';\n    }\n\n    if (typeof console === undefinedType) {\n        return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n    } else if (methodName === 'trace' && isIE) {\n        return traceForIE;\n    } else if (console[methodName] !== undefined) {\n        return bindMethod(console, methodName);\n    } else if (console.log !== undefined) {\n        return bindMethod(console, 'log');\n    } else {\n        return noop;\n    }\n}\n\n// These private functions always need `this` to be set properly\n\nfunction replaceLoggingMethods(level, loggerName) {\n    /*jshint validthis:true */\n    for (var i = 0; i < logMethods.length; i++) {\n        var methodName = logMethods[i];\n        this[methodName] = (i < level) ?\n            noop :\n            this.methodFactory(methodName, level, loggerName);\n    }\n\n    // Define log.log as an alias for log.debug\n    this.log = this.debug;\n}\n\n// In old IE versions, the console isn't present until you first open it.\n// We build realMethod() replacements here that regenerate logging methods\nfunction enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n    return function () {\n        if (typeof console !== undefinedType) {\n            replaceLoggingMethods.call(this, level, loggerName);\n            this[methodName].apply(this, arguments);\n        }\n    };\n}\n\n// By default, we use closely bound real methods wherever possible, and\n// otherwise we wait for a console to appear, and then try again.\nfunction defaultMethodFactory(methodName, level, loggerName) {\n    /*jshint validthis:true */\n    return realMethod(methodName) ||\n           enableLoggingWhenConsoleArrives.apply(this, arguments);\n}\n\nfunction Logger(name, defaultLevel, factory) {\n  var self = this;\n  var currentLevel;\n\n  var storageKey = \"loglevel\";\n  if (typeof name === \"string\") {\n    storageKey += \":\" + name;\n  } else if (typeof name === \"symbol\") {\n    storageKey = undefined;\n  }\n\n  function persistLevelIfPossible(levelNum) {\n      var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n      if (typeof window === undefinedType || !storageKey) return;\n\n      // Use localStorage if available\n      try {\n          window.localStorage[storageKey] = levelName;\n          return;\n      } catch (ignore) {}\n\n      // Use session cookie as fallback\n      try {\n          window.document.cookie =\n            encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n      } catch (ignore) {}\n  }\n\n  function getPersistedLevel() {\n      var storedLevel;\n\n      if (typeof window === undefinedType || !storageKey) return;\n\n      try {\n          storedLevel = window.localStorage[storageKey];\n      } catch (ignore) {}\n\n      // Fallback to cookies if local storage gives us nothing\n      if (typeof storedLevel === undefinedType) {\n          try {\n              var cookie = window.document.cookie;\n              var location = cookie.indexOf(\n                  encodeURIComponent(storageKey) + \"=\");\n              if (location !== -1) {\n                  storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n              }\n          } catch (ignore) {}\n      }\n\n      // If the stored level is not valid, treat it as if nothing was stored.\n      if (self.levels[storedLevel] === undefined) {\n          storedLevel = undefined;\n      }\n\n      return storedLevel;\n  }\n\n  /*\n   *\n   * Public logger API - see https://github.com/pimterry/loglevel for details\n   *\n   */\n\n  self.name = name;\n\n  self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n      \"ERROR\": 4, \"SILENT\": 5};\n\n  self.methodFactory = factory || defaultMethodFactory;\n\n  self.getLevel = function () {\n      return currentLevel;\n  };\n\n  self.setLevel = function (level, persist) {\n      if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n          level = self.levels[level.toUpperCase()];\n      }\n      if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n          currentLevel = level;\n          if (persist !== false) {  // defaults to true\n              persistLevelIfPossible(level);\n          }\n          replaceLoggingMethods.call(self, level, name);\n          if (typeof console === undefinedType && level < self.levels.SILENT) {\n              return \"No console available for logging\";\n          }\n      } else {\n          throw \"log.setLevel() called with invalid level: \" + level;\n      }\n  };\n\n  self.setDefaultLevel = function (level) {\n      if (!getPersistedLevel()) {\n          self.setLevel(level, false);\n      }\n  };\n\n  self.enableAll = function(persist) {\n      self.setLevel(self.levels.TRACE, persist);\n  };\n\n  self.disableAll = function(persist) {\n      self.setLevel(self.levels.SILENT, persist);\n  };\n\n  // Initialize with the right level\n  var initialLevel = getPersistedLevel();\n  if (initialLevel == null) {\n      initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n  }\n  self.setLevel(initialLevel, false);\n}\n\n/*\n *\n * Top-level API\n *\n */\n\nvar defaultLogger = new Logger();\n\nvar _loggersByName = {};\ndefaultLogger.getLogger = function getLogger(name) {\n    if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n      throw new TypeError(\"You must supply a name when creating a logger.\");\n    }\n\n    var logger = _loggersByName[name];\n    if (!logger) {\n      logger = _loggersByName[name] = new Logger(\n        name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n    }\n    return logger;\n};\n\n// Grab the current global log variable in case of overwrite\nvar _log = (typeof window !== undefinedType) ? window.log : undefined;\ndefaultLogger.noConflict = function() {\n    if (typeof window !== undefinedType &&\n           window.log === defaultLogger) {\n        window.log = _log;\n    }\n\n    return defaultLogger;\n};\n\ndefaultLogger.getLoggers = function getLoggers() {\n    return _loggersByName;\n};\n\n// ES6 default export, for compatibility\ndefaultLogger['default'] = defaultLogger;\n\nmodule.exports = defaultLogger;\n"]},"metadata":{},"sourceType":"script"}