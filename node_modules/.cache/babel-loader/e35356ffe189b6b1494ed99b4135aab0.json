{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar LocalParticipantSignaling = require('../localparticipant');\n\nvar LocalTrackPublicationV2 = require('./localtrackpublication');\n\nvar DEFAULT_LOG_LEVEL = require('../../util/constants').DEFAULT_LOG_LEVEL;\n\nvar Log = require('../../util/log');\n\nvar _a = require('../../util'),\n    buildLogLevels = _a.buildLogLevels,\n    isDeepEqual = _a.isDeepEqual;\n/**\n * @extends ParticipantSignaling\n * @property {BandwidthProfileOptions} bandwidthProfile\n * @property {NetworkQualityConfigurationImpl} networkQualityConfiguration\n * @property {number} revision\n * @emits LocalParticipantV2#updated\n */\n\n\nvar LocalParticipantV2 =\n/** @class */\nfunction (_super) {\n  __extends(LocalParticipantV2, _super);\n  /**\n   * Construct a {@link LocalParticipantV2}.\n   * @param {EncodingParametersImpl} encodingParameters\n   * @param {NetworkQualityConfigurationImpl} networkQualityConfiguration\n   * @param {object} [options]\n   */\n\n\n  function LocalParticipantV2(encodingParameters, networkQualityConfiguration, options) {\n    var _this = this;\n\n    options = Object.assign({\n      logLevel: DEFAULT_LOG_LEVEL,\n      LocalTrackPublicationV2: LocalTrackPublicationV2\n    }, options);\n    _this = _super.call(this) || this;\n    var logLevels = buildLogLevels(options.logLevel);\n    Object.defineProperties(_this, {\n      _bandwidthProfile: {\n        value: null,\n        writable: true\n      },\n      _bandwidthProfileRevision: {\n        value: 0,\n        writable: true\n      },\n      _encodingParameters: {\n        value: encodingParameters\n      },\n      _removeListeners: {\n        value: new Map()\n      },\n      _LocalTrackPublicationV2: {\n        value: options.LocalTrackPublicationV2\n      },\n      _log: {\n        value: options.log ? options.log.createLog('default', _this) : new Log('default', _this, logLevels, options.loggerName)\n      },\n      _publishedRevision: {\n        writable: true,\n        value: 0\n      },\n      _revision: {\n        writable: true,\n        value: 1\n      },\n      _signalingRegion: {\n        value: null,\n        writable: true\n      },\n      bandwidthProfile: {\n        enumerable: true,\n        get: function get() {\n          return this._bandwidthProfile;\n        }\n      },\n      bandwidthProfileRevision: {\n        enumerable: true,\n        get: function get() {\n          return this._bandwidthProfileRevision;\n        }\n      },\n      networkQualityConfiguration: {\n        enumerable: true,\n        value: networkQualityConfiguration\n      },\n      revision: {\n        enumerable: true,\n        get: function get() {\n          return this._revision;\n        }\n      },\n      signalingRegion: {\n        enumerable: true,\n        get: function get() {\n          return this._signalingRegion;\n        }\n      }\n    });\n    return _this;\n  }\n\n  LocalParticipantV2.prototype.toString = function () {\n    return \"[LocalParticipantSignaling: \" + this.sid + \"]\";\n  };\n  /**\n   * Set the signalingRegion.\n   * @param {string} signalingRegion.\n   */\n\n\n  LocalParticipantV2.prototype.setSignalingRegion = function (signalingRegion) {\n    if (!this._signalingRegion) {\n      this._signalingRegion = signalingRegion;\n    }\n  };\n  /**\n   * Update the {@link BandwidthProfileOptions}.\n   * @param {BandwidthProfileOptions} bandwidthProfile\n   */\n\n\n  LocalParticipantV2.prototype.setBandwidthProfile = function (bandwidthProfile) {\n    if (!isDeepEqual(this._bandwidthProfile, bandwidthProfile)) {\n      // NOTE(mmalavalli): Object.assign() copies the values of only\n      // the top level properties. In order to deep copy the object, we\n      // stringify and parse the object.\n      this._bandwidthProfile = JSON.parse(JSON.stringify(bandwidthProfile));\n      this._bandwidthProfileRevision++;\n      this.didUpdate();\n    }\n  };\n  /**\n   * returns current {@link EncodingParametersImpl}.\n   * @returns {EncodingParametersImpl}\n   */\n\n\n  LocalParticipantV2.prototype.getParameters = function () {\n    return this._encodingParameters;\n  };\n  /**\n   * Set the {@link EncodingParameters}.\n   * @param {?EncodingParameters} encodingParameters\n   * @returns {this}\n   */\n\n\n  LocalParticipantV2.prototype.setParameters = function (encodingParameters) {\n    this._encodingParameters.update(encodingParameters);\n\n    return this;\n  };\n  /**\n   * Update the {@link LocalParticipantV2} with the new state.\n   * @param {Published} published\n   * @returns {this}\n   */\n\n\n  LocalParticipantV2.prototype.update = function (published) {\n    if (this._publishedRevision >= published.revision) {\n      return this;\n    }\n\n    this._publishedRevision = published.revision;\n    published.tracks.forEach(function (publicationState) {\n      var localTrackPublicationV2 = this.tracks.get(publicationState.id);\n\n      if (localTrackPublicationV2) {\n        localTrackPublicationV2.update(publicationState);\n      }\n    }, this);\n    return this;\n  };\n\n  LocalParticipantV2.prototype.updateMediaStates = function (mediaStates) {\n    if (!mediaStates || !mediaStates.tracks) {\n      return this;\n    }\n\n    Array.from(this.tracks.values()).forEach(function (publication) {\n      var states = mediaStates.tracks[publication.sid];\n\n      if (states) {\n        publication.updateMediaStates(states);\n      }\n    });\n    return this;\n  };\n  /**\n   * @protected\n   * @param {DataTrackSender|MediaTrackSender} trackSender\n   * @param {string} name\n   * @param {Track.Priority} priority\n   * @returns {LocalTrackPublicationV2}\n   */\n\n\n  LocalParticipantV2.prototype._createLocalTrackPublicationSignaling = function (trackSender, name, priority) {\n    return new this._LocalTrackPublicationV2(trackSender, name, priority, {\n      log: this._log\n    });\n  };\n  /**\n   * Add a {@link LocalTrackPublicationV2} for the given {@link DataTrackSender}\n   * or {@link MediaTrackSender} to the {@link LocalParticipantV2}.\n   * @param {DataTrackSender|MediaTrackSender} trackSender\n   * @param {string} name\n   * @param {Track.Priority} priority\n   * @returns {this}\n   */\n\n\n  LocalParticipantV2.prototype.addTrack = function (trackSender, name, priority) {\n    var _this = this;\n\n    _super.prototype.addTrack.call(this, trackSender, name, priority);\n\n    var publication = this.getPublication(trackSender);\n    var isEnabled = publication.isEnabled,\n        updatedPriority = publication.updatedPriority;\n\n    var updated = function updated() {\n      // NOTE(mmalavalli): The LocalParticipantV2's state is only published if\n      // the \"updated\" event is emitted due to LocalTrackPublicationV2's\n      // .isEnabled or .updatedPriority being changed. We do not publish if it is fired due to the\n      // LocalTrackPublicationV2's .sid being set.\n      if (isEnabled !== publication.isEnabled || updatedPriority !== publication.updatedPriority) {\n        _this.didUpdate();\n\n        isEnabled = publication.isEnabled;\n        updatedPriority = publication.updatedPriority;\n      }\n    };\n\n    publication.on('updated', updated);\n\n    this._removeListener(publication);\n\n    this._removeListeners.set(publication, function () {\n      return publication.removeListener('updated', updated);\n    });\n\n    this.didUpdate();\n    return this;\n  };\n  /**\n   * @private\n   * @param {LocalTrackPublicationV2} publication\n   * @returns {void}\n   */\n\n\n  LocalParticipantV2.prototype._removeListener = function (publication) {\n    var removeListener = this._removeListeners.get(publication);\n\n    if (removeListener) {\n      removeListener();\n    }\n  };\n  /**\n   * Get the current state of the {@link LocalParticipantV2}.\n   * @returns {object}\n   */\n\n\n  LocalParticipantV2.prototype.getState = function () {\n    return {\n      revision: this.revision,\n      tracks: Array.from(this.tracks.values()).map(function (track) {\n        return track.getState();\n      })\n    };\n  };\n  /**\n   * Increment the revision for the {@link LocalParticipantV2}.\n   * @private\n   * @returns {void}\n   */\n\n\n  LocalParticipantV2.prototype.didUpdate = function () {\n    this._revision++;\n    this.emit('updated');\n  };\n  /**\n   * Remove the {@link LocalTrackPublicationV2} for the given {@link DataTrackSender}\n   * or {@link MediaTrackSender} from the {@link LocalParticipantV2}.\n   * @param {DataTrackSender|MediaTrackSender} trackSender\n   * @returns {?LocalTrackPublicationV2}\n   */\n\n\n  LocalParticipantV2.prototype.removeTrack = function (trackSender) {\n    var publication = _super.prototype.removeTrack.call(this, trackSender);\n\n    if (publication) {\n      trackSender.removeClone(publication.trackTransceiver);\n\n      this._removeListener(publication);\n\n      this.didUpdate();\n    }\n\n    return publication;\n  };\n  /**\n   * Updates the verbosity of network quality information.\n   * @param {NetworkQualityConfiguration} networkQualityConfiguration\n   * @returns {void}\n   */\n\n\n  LocalParticipantV2.prototype.setNetworkQualityConfiguration = function (networkQualityConfiguration) {\n    this.networkQualityConfiguration.update(networkQualityConfiguration);\n  };\n  /**\n   * updates encodings for simulcast layers.\n   * @param {Track.SID} trackSid\n   * @param {Array<{enabled: boolean, layer_index: number}>} encodings\n   * @returns {Promise<string>} string indicating result of the operation. can be one of\n   *  \"OK\", \"INVALID_HINT\", \"COULD_NOT_APPLY_HINT\", \"UNKNOWN_TRACK\"\n   */\n\n\n  LocalParticipantV2.prototype.setPublisherHint = function (trackSid, encodings) {\n    var trackSignaling = Array.from(this.tracks.values()).find(function (trackPub) {\n      return trackPub.sid === trackSid;\n    });\n\n    if (!trackSignaling) {\n      this._log.warn(\"track:\" + trackSid + \" not found\");\n\n      return Promise.resolve('UNKNOWN_TRACK');\n    }\n\n    return trackSignaling.trackTransceiver.setPublisherHint(encodings);\n  };\n\n  return LocalParticipantV2;\n}(LocalParticipantSignaling);\n/**\n * @interface Published\n * @property {number} revision\n * @property {Array<PublishedTrack>} tracks\n */\n\n/**\n * @typedef {CreatedTrack|ReadyTrack|FailedTrack} PublishedTrack\n */\n\n/**\n * @interface CreatedTrack\n * @property {Track.ID} id\n * @property {string} state - \"created\"\n */\n\n/**\n * @interface ReadyTrack\n * @property {Track.ID} id\n * @property {Track.SID} sid\n * @property {string} state - \"ready\"\n */\n\n/**\n * @interface FailedTrack\n * @property {Track.ID} id\n * @property {TrackError} error\n * @property {string} state - \"failed\"\n */\n\n/**\n * @interface TrackError\n * @property {number} code\n * @property {string} message\n */\n\n/**\n * @event LocalParticipantV2#updated\n */\n\n\nmodule.exports = LocalParticipantV2;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,yBAAyB,GAAGC,OAAO,CAAC,qBAAD,CAAzC;;AACA,IAAMC,uBAAuB,GAAGD,OAAO,CAAC,yBAAD,CAAvC;;AACQ,qBAAiB,GAAKA,OAAO,CAAC,sBAAD,CAAP,CAA+BE,iBAArD;;AACR,IAAMC,GAAG,GAAGH,OAAO,CAAC,gBAAD,CAAnB;;AACM,SAAkCA,OAAO,CAAC,YAAD,CAAzC;AAAA,IAAEI,cAAc,oBAAhB;AAAA,IAAkBC,WAAW,iBAA7B;AAEN;;;;;;;;;AAOA;AAAA;AAAA;EAAiCC;EAC/B;;;;;;;;EAMA,4BAAYC,kBAAZ,EAAgCC,2BAAhC,EAA6DC,OAA7D,EAAoE;IAApE;;IACEA,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc;MACtBC,QAAQ,EAAEV,iBADY;MAEtBD,uBAAuB;IAFD,CAAd,EAGPQ,OAHO,CAAV;IAKAI,6BAAO,IAAP;IAEA,IAAMC,SAAS,GAAGV,cAAc,CAACK,OAAO,CAACG,QAAT,CAAhC;IAEAF,MAAM,CAACK,gBAAP,CAAwBF,KAAxB,EAA8B;MAC5BG,iBAAiB,EAAE;QACjBC,KAAK,EAAE,IADU;QAEjBC,QAAQ,EAAE;MAFO,CADS;MAK5BC,yBAAyB,EAAE;QACzBF,KAAK,EAAE,CADkB;QAEzBC,QAAQ,EAAE;MAFe,CALC;MAS5BE,mBAAmB,EAAE;QACnBH,KAAK,EAAEV;MADY,CATO;MAY5Bc,gBAAgB,EAAE;QAChBJ,KAAK,EAAE,IAAIK,GAAJ;MADS,CAZU;MAe5BC,wBAAwB,EAAE;QACxBN,KAAK,EAAER,OAAO,CAACR;MADS,CAfE;MAkB5BuB,IAAI,EAAE;QACJP,KAAK,EAAER,OAAO,CAACgB,GAAR,GACHhB,OAAO,CAACgB,GAAR,CAAYC,SAAZ,CAAsB,SAAtB,EAAiCb,KAAjC,CADG,GAEH,IAAIV,GAAJ,CAAQ,SAAR,EAAmBU,KAAnB,EAAyBC,SAAzB,EAAoCL,OAAO,CAACkB,UAA5C;MAHA,CAlBsB;MAuB5BC,kBAAkB,EAAE;QAClBV,QAAQ,EAAE,IADQ;QAElBD,KAAK,EAAE;MAFW,CAvBQ;MA2B5BY,SAAS,EAAE;QACTX,QAAQ,EAAE,IADD;QAETD,KAAK,EAAE;MAFE,CA3BiB;MA+B5Ba,gBAAgB,EAAE;QAChBb,KAAK,EAAE,IADS;QAEhBC,QAAQ,EAAE;MAFM,CA/BU;MAmC5Ba,gBAAgB,EAAE;QAChBC,UAAU,EAAE,IADI;QAEhBC,GAAG;UACD,OAAO,KAAKjB,iBAAZ;QACD;MAJe,CAnCU;MAyC5BkB,wBAAwB,EAAE;QACxBF,UAAU,EAAE,IADY;QAExBC,GAAG;UACD,OAAO,KAAKd,yBAAZ;QACD;MAJuB,CAzCE;MA+C5BX,2BAA2B,EAAE;QAC3BwB,UAAU,EAAE,IADe;QAE3Bf,KAAK,EAAET;MAFoB,CA/CD;MAmD5B2B,QAAQ,EAAE;QACRH,UAAU,EAAE,IADJ;QAERC,GAAG;UACD,OAAO,KAAKJ,SAAZ;QACD;MAJO,CAnDkB;MAyD5BO,eAAe,EAAE;QACfJ,UAAU,EAAE,IADG;QAEfC,GAAG;UACD,OAAO,KAAKH,gBAAZ;QACD;MAJc;IAzDW,CAA9B;;EAgED;;EAEDO;IACE,OAAO,iCAA+B,KAAKC,GAApC,GAAuC,GAA9C;EACD,CAFD;EAIA;;;;;;EAIAD,4DAAmBD,eAAnB,EAAkC;IAChC,IAAI,CAAC,KAAKN,gBAAV,EAA4B;MAC1B,KAAKA,gBAAL,GAAwBM,eAAxB;IACD;EACF,CAJD;EAMA;;;;;;EAIAC,6DAAoBN,gBAApB,EAAoC;IAClC,IAAI,CAAC1B,WAAW,CAAC,KAAKW,iBAAN,EAAyBe,gBAAzB,CAAhB,EAA4D;MAC1D;MACA;MACA;MACA,KAAKf,iBAAL,GAAyBuB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeV,gBAAf,CAAX,CAAzB;MACA,KAAKZ,yBAAL;MACA,KAAKuB,SAAL;IACD;EACF,CATD;EAWA;;;;;;EAIAL;IACE,OAAO,KAAKjB,mBAAZ;EACD,CAFD;EAIA;;;;;;;EAKAiB,uDAAc9B,kBAAd,EAAgC;IAC9B,KAAKa,mBAAL,CAAyBuB,MAAzB,CAAgCpC,kBAAhC;;IACA,OAAO,IAAP;EACD,CAHD;EAKA;;;;;;;EAKA8B,gDAAOO,SAAP,EAAgB;IACd,IAAI,KAAKhB,kBAAL,IAA2BgB,SAAS,CAACT,QAAzC,EAAmD;MACjD,OAAO,IAAP;IACD;;IAED,KAAKP,kBAAL,GAA0BgB,SAAS,CAACT,QAApC;IAEAS,SAAS,CAACC,MAAV,CAAiBC,OAAjB,CAAyB,UAASC,gBAAT,EAAyB;MAChD,IAAMC,uBAAuB,GAAG,KAAKH,MAAL,CAAYZ,GAAZ,CAAgBc,gBAAgB,CAACE,EAAjC,CAAhC;;MACA,IAAID,uBAAJ,EAA6B;QAC3BA,uBAAuB,CAACL,MAAxB,CAA+BI,gBAA/B;MACD;IACF,CALD,EAKG,IALH;IAOA,OAAO,IAAP;EACD,CAfD;;EAiBAV,2DAAkBa,WAAlB,EAA6B;IAC3B,IAAI,CAACA,WAAD,IAAgB,CAACA,WAAW,CAACL,MAAjC,EAAyC;MACvC,OAAO,IAAP;IACD;;IAEDM,KAAK,CAACC,IAAN,CAAW,KAAKP,MAAL,CAAYQ,MAAZ,EAAX,EAAiCP,OAAjC,CAAyC,uBAAW;MAClD,IAAMQ,MAAM,GAAGJ,WAAW,CAACL,MAAZ,CAAmBU,WAAW,CAACjB,GAA/B,CAAf;;MACA,IAAIgB,MAAJ,EAAY;QACVC,WAAW,CAACC,iBAAZ,CAA8BF,MAA9B;MACD;IACF,CALD;IAMA,OAAO,IAAP;EACD,CAZD;EAcA;;;;;;;;;EAOAjB,+EAAsCoB,WAAtC,EAAmDC,IAAnD,EAAyDC,QAAzD,EAAiE;IAC/D,OAAO,IAAI,KAAKpC,wBAAT,CAAkCkC,WAAlC,EAA+CC,IAA/C,EAAqDC,QAArD,EAA+D;MAAElC,GAAG,EAAE,KAAKD;IAAZ,CAA/D,CAAP;EACD,CAFD;EAIA;;;;;;;;;;EAQAa,kDAASoB,WAAT,EAAsBC,IAAtB,EAA4BC,QAA5B,EAAoC;IAApC;;IACEC,iBAAMC,QAAN,CAAcC,IAAd,CAAc,IAAd,EAAeL,WAAf,EAA4BC,IAA5B,EAAkCC,QAAlC;;IACA,IAAMJ,WAAW,GAAG,KAAKQ,cAAL,CAAoBN,WAApB,CAApB;IAGE,aAAS,GAEPF,WAAW,UAFb;IAAA,IACAS,eAAe,GACbT,WAAW,gBAFb;;IAIF,IAAMU,OAAO,GAAG,SAAVA,OAAU;MACd;MACA;MACA;MACA;MACA,IAAIC,SAAS,KAAKX,WAAW,CAACW,SAA1B,IAAuCF,eAAe,KAAKT,WAAW,CAACS,eAA3E,EAA4F;QAC1FnD,KAAI,CAAC6B,SAAL;;QACAwB,SAAS,GAAGX,WAAW,CAACW,SAAxB;QACAF,eAAe,GAAGT,WAAW,CAACS,eAA9B;MACD;IACF,CAVD;;IAYAT,WAAW,CAACY,EAAZ,CAAe,SAAf,EAA0BF,OAA1B;;IAEA,KAAKG,eAAL,CAAqBb,WAArB;;IACA,KAAKlC,gBAAL,CAAsBgD,GAAtB,CAA0Bd,WAA1B,EAAuC;MAAM,kBAAW,CAACe,cAAZ,CAA2B,SAA3B,EAAsCL,OAAtC;IAA8C,CAA3F;;IAEA,KAAKvB,SAAL;IAEA,OAAO,IAAP;EACD,CA7BD;EA+BA;;;;;;;EAKAL,yDAAgBkB,WAAhB,EAA2B;IACzB,IAAMe,cAAc,GAAG,KAAKjD,gBAAL,CAAsBY,GAAtB,CAA0BsB,WAA1B,CAAvB;;IACA,IAAIe,cAAJ,EAAoB;MAClBA,cAAc;IACf;EACF,CALD;EAOA;;;;;;EAIAjC;IACE,OAAO;MACLF,QAAQ,EAAE,KAAKA,QADV;MAELU,MAAM,EAAEM,KAAK,CAACC,IAAN,CAAW,KAAKP,MAAL,CAAYQ,MAAZ,EAAX,EAAiCkB,GAAjC,CAAqC,iBAAK;QAAI,YAAK,CAACC,QAAN;MAAgB,CAA9D;IAFH,CAAP;EAID,CALD;EAOA;;;;;;;EAKAnC;IACE,KAAKR,SAAL;IACA,KAAK4C,IAAL,CAAU,SAAV;EACD,CAHD;EAKA;;;;;;;;EAMApC,qDAAYoB,WAAZ,EAAuB;IACrB,IAAMF,WAAW,GAAGK,iBAAMc,WAAN,CAAiBZ,IAAjB,CAAiB,IAAjB,EAAkBL,WAAlB,CAApB;;IACA,IAAIF,WAAJ,EAAiB;MACfE,WAAW,CAACkB,WAAZ,CAAwBpB,WAAW,CAACqB,gBAApC;;MACA,KAAKR,eAAL,CAAqBb,WAArB;;MACA,KAAKb,SAAL;IACD;;IACD,OAAOa,WAAP;EACD,CARD;EAUA;;;;;;;EAKAlB,wEAA+B7B,2BAA/B,EAA0D;IACxD,KAAKA,2BAAL,CAAiCmC,MAAjC,CAAwCnC,2BAAxC;EACD,CAFD;EAIA;;;;;;;;;EAOA6B,0DAAiBwC,QAAjB,EAA2BC,SAA3B,EAAoC;IAClC,IAAMC,cAAc,GAAG5B,KAAK,CAACC,IAAN,CAAW,KAAKP,MAAL,CAAYQ,MAAZ,EAAX,EAAiC2B,IAAjC,CAAsC,oBAAQ;MAAI,eAAQ,CAAC1C,GAAT,KAAiBuC,QAAjB;IAAyB,CAA3E,CAAvB;;IACA,IAAI,CAACE,cAAL,EAAqB;MACnB,KAAKvD,IAAL,CAAUyD,IAAV,CAAe,WAASJ,QAAT,GAAiB,YAAhC;;MACA,OAAOK,OAAO,CAACC,OAAR,CAAgB,eAAhB,CAAP;IACD;;IACD,OAAOJ,cAAc,CAACH,gBAAf,CAAgCQ,gBAAhC,CAAiDN,SAAjD,CAAP;EACD,CAPD;;EAQF;AAAC,CAjSD,CAAiC/E,yBAAjC;AAoSA;;;;;;AAMA;;;;AAIA;;;;;;AAMA;;;;;;;AAOA;;;;;;;AAOA;;;;;;AAMA;;;;;AAIAsF,MAAM,CAACC,OAAP,GAAiBjD,kBAAjB","names":["LocalParticipantSignaling","require","LocalTrackPublicationV2","DEFAULT_LOG_LEVEL","Log","buildLogLevels","isDeepEqual","__extends","encodingParameters","networkQualityConfiguration","options","Object","assign","logLevel","_this","logLevels","defineProperties","_bandwidthProfile","value","writable","_bandwidthProfileRevision","_encodingParameters","_removeListeners","Map","_LocalTrackPublicationV2","_log","log","createLog","loggerName","_publishedRevision","_revision","_signalingRegion","bandwidthProfile","enumerable","get","bandwidthProfileRevision","revision","signalingRegion","LocalParticipantV2","sid","JSON","parse","stringify","didUpdate","update","published","tracks","forEach","publicationState","localTrackPublicationV2","id","mediaStates","Array","from","values","states","publication","updateMediaStates","trackSender","name","priority","_super","addTrack","call","getPublication","updatedPriority","updated","isEnabled","on","_removeListener","set","removeListener","map","getState","emit","removeTrack","removeClone","trackTransceiver","trackSid","encodings","trackSignaling","find","warn","Promise","resolve","setPublisherHint","module","exports"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/signaling/v2/localparticipant.js"],"sourcesContent":["'use strict';\n\nconst LocalParticipantSignaling = require('../localparticipant');\nconst LocalTrackPublicationV2 = require('./localtrackpublication');\nconst { DEFAULT_LOG_LEVEL } = require('../../util/constants');\nconst Log = require('../../util/log');\nconst { buildLogLevels, isDeepEqual } = require('../../util');\n\n/**\n * @extends ParticipantSignaling\n * @property {BandwidthProfileOptions} bandwidthProfile\n * @property {NetworkQualityConfigurationImpl} networkQualityConfiguration\n * @property {number} revision\n * @emits LocalParticipantV2#updated\n */\nclass LocalParticipantV2 extends LocalParticipantSignaling {\n  /**\n   * Construct a {@link LocalParticipantV2}.\n   * @param {EncodingParametersImpl} encodingParameters\n   * @param {NetworkQualityConfigurationImpl} networkQualityConfiguration\n   * @param {object} [options]\n   */\n  constructor(encodingParameters, networkQualityConfiguration, options) {\n    options = Object.assign({\n      logLevel: DEFAULT_LOG_LEVEL,\n      LocalTrackPublicationV2\n    }, options);\n\n    super();\n\n    const logLevels = buildLogLevels(options.logLevel);\n\n    Object.defineProperties(this, {\n      _bandwidthProfile: {\n        value: null,\n        writable: true\n      },\n      _bandwidthProfileRevision: {\n        value: 0,\n        writable: true\n      },\n      _encodingParameters: {\n        value: encodingParameters\n      },\n      _removeListeners: {\n        value: new Map()\n      },\n      _LocalTrackPublicationV2: {\n        value: options.LocalTrackPublicationV2\n      },\n      _log: {\n        value: options.log\n          ? options.log.createLog('default', this)\n          : new Log('default', this, logLevels, options.loggerName)\n      },\n      _publishedRevision: {\n        writable: true,\n        value: 0\n      },\n      _revision: {\n        writable: true,\n        value: 1\n      },\n      _signalingRegion: {\n        value: null,\n        writable: true\n      },\n      bandwidthProfile: {\n        enumerable: true,\n        get() {\n          return this._bandwidthProfile;\n        }\n      },\n      bandwidthProfileRevision: {\n        enumerable: true,\n        get() {\n          return this._bandwidthProfileRevision;\n        }\n      },\n      networkQualityConfiguration: {\n        enumerable: true,\n        value: networkQualityConfiguration\n      },\n      revision: {\n        enumerable: true,\n        get() {\n          return this._revision;\n        }\n      },\n      signalingRegion: {\n        enumerable: true,\n        get() {\n          return this._signalingRegion;\n        }\n      }\n    });\n  }\n\n  toString() {\n    return `[LocalParticipantSignaling: ${this.sid}]`;\n  }\n\n  /**\n   * Set the signalingRegion.\n   * @param {string} signalingRegion.\n   */\n  setSignalingRegion(signalingRegion) {\n    if (!this._signalingRegion) {\n      this._signalingRegion = signalingRegion;\n    }\n  }\n\n  /**\n   * Update the {@link BandwidthProfileOptions}.\n   * @param {BandwidthProfileOptions} bandwidthProfile\n   */\n  setBandwidthProfile(bandwidthProfile) {\n    if (!isDeepEqual(this._bandwidthProfile, bandwidthProfile)) {\n      // NOTE(mmalavalli): Object.assign() copies the values of only\n      // the top level properties. In order to deep copy the object, we\n      // stringify and parse the object.\n      this._bandwidthProfile = JSON.parse(JSON.stringify(bandwidthProfile));\n      this._bandwidthProfileRevision++;\n      this.didUpdate();\n    }\n  }\n\n  /**\n   * returns current {@link EncodingParametersImpl}.\n   * @returns {EncodingParametersImpl}\n   */\n  getParameters() {\n    return this._encodingParameters;\n  }\n\n  /**\n   * Set the {@link EncodingParameters}.\n   * @param {?EncodingParameters} encodingParameters\n   * @returns {this}\n   */\n  setParameters(encodingParameters) {\n    this._encodingParameters.update(encodingParameters);\n    return this;\n  }\n\n  /**\n   * Update the {@link LocalParticipantV2} with the new state.\n   * @param {Published} published\n   * @returns {this}\n   */\n  update(published) {\n    if (this._publishedRevision >= published.revision) {\n      return this;\n    }\n\n    this._publishedRevision = published.revision;\n\n    published.tracks.forEach(function(publicationState) {\n      const localTrackPublicationV2 = this.tracks.get(publicationState.id);\n      if (localTrackPublicationV2) {\n        localTrackPublicationV2.update(publicationState);\n      }\n    }, this);\n\n    return this;\n  }\n\n  updateMediaStates(mediaStates) {\n    if (!mediaStates || !mediaStates.tracks) {\n      return this;\n    }\n\n    Array.from(this.tracks.values()).forEach(publication => {\n      const states = mediaStates.tracks[publication.sid];\n      if (states) {\n        publication.updateMediaStates(states);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @protected\n   * @param {DataTrackSender|MediaTrackSender} trackSender\n   * @param {string} name\n   * @param {Track.Priority} priority\n   * @returns {LocalTrackPublicationV2}\n   */\n  _createLocalTrackPublicationSignaling(trackSender, name, priority) {\n    return new this._LocalTrackPublicationV2(trackSender, name, priority, { log: this._log });\n  }\n\n  /**\n   * Add a {@link LocalTrackPublicationV2} for the given {@link DataTrackSender}\n   * or {@link MediaTrackSender} to the {@link LocalParticipantV2}.\n   * @param {DataTrackSender|MediaTrackSender} trackSender\n   * @param {string} name\n   * @param {Track.Priority} priority\n   * @returns {this}\n   */\n  addTrack(trackSender, name, priority) {\n    super.addTrack(trackSender, name, priority);\n    const publication = this.getPublication(trackSender);\n\n    let {\n      isEnabled,\n      updatedPriority\n    } = publication;\n\n    const updated = () => {\n      // NOTE(mmalavalli): The LocalParticipantV2's state is only published if\n      // the \"updated\" event is emitted due to LocalTrackPublicationV2's\n      // .isEnabled or .updatedPriority being changed. We do not publish if it is fired due to the\n      // LocalTrackPublicationV2's .sid being set.\n      if (isEnabled !== publication.isEnabled || updatedPriority !== publication.updatedPriority) {\n        this.didUpdate();\n        isEnabled = publication.isEnabled;\n        updatedPriority = publication.updatedPriority;\n      }\n    };\n\n    publication.on('updated', updated);\n\n    this._removeListener(publication);\n    this._removeListeners.set(publication, () => publication.removeListener('updated', updated));\n\n    this.didUpdate();\n\n    return this;\n  }\n\n  /**\n   * @private\n   * @param {LocalTrackPublicationV2} publication\n   * @returns {void}\n   */\n  _removeListener(publication) {\n    const removeListener = this._removeListeners.get(publication);\n    if (removeListener) {\n      removeListener();\n    }\n  }\n\n  /**\n   * Get the current state of the {@link LocalParticipantV2}.\n   * @returns {object}\n   */\n  getState() {\n    return {\n      revision: this.revision,\n      tracks: Array.from(this.tracks.values()).map(track => track.getState())\n    };\n  }\n\n  /**\n   * Increment the revision for the {@link LocalParticipantV2}.\n   * @private\n   * @returns {void}\n   */\n  didUpdate() {\n    this._revision++;\n    this.emit('updated');\n  }\n\n  /**\n   * Remove the {@link LocalTrackPublicationV2} for the given {@link DataTrackSender}\n   * or {@link MediaTrackSender} from the {@link LocalParticipantV2}.\n   * @param {DataTrackSender|MediaTrackSender} trackSender\n   * @returns {?LocalTrackPublicationV2}\n   */\n  removeTrack(trackSender) {\n    const publication = super.removeTrack(trackSender);\n    if (publication) {\n      trackSender.removeClone(publication.trackTransceiver);\n      this._removeListener(publication);\n      this.didUpdate();\n    }\n    return publication;\n  }\n\n  /**\n   * Updates the verbosity of network quality information.\n   * @param {NetworkQualityConfiguration} networkQualityConfiguration\n   * @returns {void}\n   */\n  setNetworkQualityConfiguration(networkQualityConfiguration) {\n    this.networkQualityConfiguration.update(networkQualityConfiguration);\n  }\n\n  /**\n   * updates encodings for simulcast layers.\n   * @param {Track.SID} trackSid\n   * @param {Array<{enabled: boolean, layer_index: number}>} encodings\n   * @returns {Promise<string>} string indicating result of the operation. can be one of\n   *  \"OK\", \"INVALID_HINT\", \"COULD_NOT_APPLY_HINT\", \"UNKNOWN_TRACK\"\n   */\n  setPublisherHint(trackSid, encodings) {\n    const trackSignaling = Array.from(this.tracks.values()).find(trackPub => trackPub.sid === trackSid);\n    if (!trackSignaling) {\n      this._log.warn(`track:${trackSid} not found`);\n      return Promise.resolve('UNKNOWN_TRACK');\n    }\n    return trackSignaling.trackTransceiver.setPublisherHint(encodings);\n  }\n}\n\n\n/**\n * @interface Published\n * @property {number} revision\n * @property {Array<PublishedTrack>} tracks\n */\n\n/**\n * @typedef {CreatedTrack|ReadyTrack|FailedTrack} PublishedTrack\n */\n\n/**\n * @interface CreatedTrack\n * @property {Track.ID} id\n * @property {string} state - \"created\"\n */\n\n/**\n * @interface ReadyTrack\n * @property {Track.ID} id\n * @property {Track.SID} sid\n * @property {string} state - \"ready\"\n */\n\n/**\n * @interface FailedTrack\n * @property {Track.ID} id\n * @property {TrackError} error\n * @property {string} state - \"failed\"\n */\n\n/**\n * @interface TrackError\n * @property {number} code\n * @property {string} message\n */\n\n/**\n * @event LocalParticipantV2#updated\n */\n\nmodule.exports = LocalParticipantV2;\n"]},"metadata":{},"sourceType":"script"}