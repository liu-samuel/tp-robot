{"ast":null,"code":"/* eslint new-cap:0 */\n'use strict';\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nvar defaultGetLogger = require('../vendor/loglevel').getLogger;\n\nvar constants = require('./constants');\n\nvar DEFAULT_LOG_LEVEL = constants.DEFAULT_LOG_LEVEL,\n    DEFAULT_LOGGER_NAME = constants.DEFAULT_LOGGER_NAME;\n\nvar E = require('./constants').typeErrors;\n\nvar deprecationWarningsByComponentConstructor;\n\nfunction getDeprecationWarnings(componentConstructor) {\n  deprecationWarningsByComponentConstructor = deprecationWarningsByComponentConstructor || new Map();\n\n  if (deprecationWarningsByComponentConstructor.has(componentConstructor)) {\n    return deprecationWarningsByComponentConstructor.get(componentConstructor);\n  }\n\n  var deprecationWarnings = new Set();\n  deprecationWarningsByComponentConstructor.set(componentConstructor, deprecationWarnings);\n  return deprecationWarnings;\n}\n/**\n * Selectively outputs messages to console based on specified minimum module\n * specific log levels.\n *\n * NOTE: The values in the logLevels object passed to the constructor is changed\n *       by subsequent calls to {@link Log#setLevels}.\n */\n\n\nvar Log =\n/** @class */\nfunction () {\n  /**\n   * Construct a new {@link Log} object.\n   * @param {String} moduleName - Name of the logging module (webrtc/media/signaling)\n   * @param {object} component - Component owning this instance of {@link Log}\n   * @param {LogLevels} logLevels - Logging levels. See {@link LogLevels}\n   * @param {String} loggerName - Name of the logger instance. Used when calling getLogger from loglevel module\n   * @param {Function} [getLogger] - optional method used internally.\n   */\n  function Log(moduleName, component, logLevels, loggerName, getLogger) {\n    if (typeof moduleName !== 'string') {\n      throw E.INVALID_TYPE('moduleName', 'string');\n    }\n\n    if (!component) {\n      throw E.REQUIRED_ARGUMENT('component');\n    }\n\n    if (typeof logLevels !== 'object') {\n      logLevels = {};\n    }\n\n    getLogger = getLogger || defaultGetLogger;\n    validateLogLevels(logLevels);\n    /* istanbul ignore next */\n\n    Object.defineProperties(this, {\n      _component: {\n        value: component\n      },\n      _logLevels: {\n        value: logLevels\n      },\n      _warnings: {\n        value: new Set()\n      },\n      _loggerName: {\n        get: function get() {\n          var name = loggerName && typeof loggerName === 'string' ? loggerName : DEFAULT_LOGGER_NAME;\n\n          if (!this._logLevelsEqual) {\n            name = name + \"-\" + moduleName;\n          }\n\n          return name;\n        }\n      },\n      _logger: {\n        get: function get() {\n          var logger = getLogger(this._loggerName);\n          var level = this._logLevels[moduleName] || DEFAULT_LOG_LEVEL; // There is no 'off' in the logger module. It uses 'silent' instead\n\n          level = level === 'off' ? 'silent' : level;\n          logger.setDefaultLevel(level);\n          return logger;\n        }\n      },\n      _logLevelsEqual: {\n        get: function get() {\n          // True if all levels are the same\n          return new Set(Object.values(this._logLevels)).size === 1;\n        }\n      },\n      logLevel: {\n        get: function get() {\n          return Log.getLevelByName(logLevels[moduleName] || DEFAULT_LOG_LEVEL);\n        }\n      },\n      name: {\n        get: component.toString.bind(component)\n      }\n    });\n  }\n  /**\n   * Get the log level (number) by its name (string)\n   * @param {String} name - Name of the log level\n   * @returns {Number} Requested log level\n   * @throws {TwilioError} INVALID_LOG_LEVEL (32056)\n   * @public\n   */\n\n\n  Log.getLevelByName = function (name) {\n    if (!isNaN(name)) {\n      return parseInt(name, 10);\n    }\n\n    name = name.toUpperCase();\n    validateLogLevel(name);\n    return Log[name];\n  };\n  /**\n   * Create a child {@link Log} instance with this._logLevels\n   * @param moduleName - Name of the logging module\n   * @param component - Component owning this instance of {@link Log}\n   * @returns {Log} this\n   */\n\n\n  Log.prototype.createLog = function (moduleName, component) {\n    var name = this._loggerName; // Grab the original logger name\n\n    if (!this._logLevelsEqual) {\n      name = name.substring(0, name.lastIndexOf('-'));\n    }\n\n    return new Log(moduleName, component, this._logLevels, name);\n  };\n  /**\n   * Set new log levels.\n   * This changes the levels for all its ancestors,\n   * siblings, and children and descendants instances of {@link Log}.\n   * @param {LogLevels} levels - New log levels\n   * @throws {TwilioError} INVALID_ARGUMENT\n   * @returns {Log} this\n   */\n\n\n  Log.prototype.setLevels = function (levels) {\n    validateLogLevels(levels);\n    Object.assign(this._logLevels, levels);\n    return this;\n  };\n  /**\n   * Log a message using the logger method appropriate for the specified logLevel\n   * @param {Number} logLevel - Log level of the message being logged\n   * @param {Array} messages - Message(s) to log\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n\n\n  Log.prototype.log = function (logLevel, messages) {\n    var name = Log._levels[logLevel]; // eslint-disable-next-line no-use-before-define\n\n    if (!name) {\n      throw E.INVALID_VALUE('logLevel', LOG_LEVEL_VALUES);\n    }\n\n    name = name.toLowerCase();\n    var prefix = [new Date().toISOString(), name, this.name];\n    (this._logger[name] || function noop() {}).apply(void 0, __spreadArray([], __read(prefix.concat(messages))));\n    return this;\n  };\n  /**\n   * Log a debug message\n   * @param {...String} messages - Message(s) to pass to the logger\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n\n\n  Log.prototype.debug = function () {\n    return this.log(Log.DEBUG, [].slice.call(arguments));\n  };\n  /**\n   * Log a deprecation warning. Deprecation warnings are logged as warnings and\n   * they are only ever logged once.\n   * @param {String} deprecationWarning - The deprecation warning\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n\n\n  Log.prototype.deprecated = function (deprecationWarning) {\n    var deprecationWarnings = getDeprecationWarnings(this._component.constructor);\n\n    if (deprecationWarnings.has(deprecationWarning)) {\n      return this;\n    }\n\n    deprecationWarnings.add(deprecationWarning);\n    return this.warn(deprecationWarning);\n  };\n  /**\n   * Log an info message\n   * @param {...String} messages - Message(s) to pass to the logger\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n\n\n  Log.prototype.info = function () {\n    return this.log(Log.INFO, [].slice.call(arguments));\n  };\n  /**\n   * Log a warn message\n   * @param {...String} messages - Message(s) to pass to the logger\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n\n\n  Log.prototype.warn = function () {\n    return this.log(Log.WARN, [].slice.call(arguments));\n  };\n  /**\n   * Log a warning once.\n   * @param {String} warning\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n\n\n  Log.prototype.warnOnce = function (warning) {\n    if (this._warnings.has(warning)) {\n      return this;\n    }\n\n    this._warnings.add(warning);\n\n    return this.warn(warning);\n  };\n  /**\n   * Log an error message\n   * @param {...String} messages - Message(s) to pass to the logger\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n\n\n  Log.prototype.error = function () {\n    return this.log(Log.ERROR, [].slice.call(arguments));\n  };\n  /**\n   * Log an error message and throw an exception\n   * @param {TwilioError} error - Error to throw\n   * @param {String} customMessage - Custom message for the error\n   * @public\n   */\n\n\n  Log.prototype.throw = function (error, customMessage) {\n    if (error.clone) {\n      error = error.clone(customMessage);\n    }\n\n    this.log(Log.ERROR, error);\n    throw error;\n  };\n\n  return Log;\n}(); // Singleton Constants\n\n/* eslint key-spacing:0 */\n\n/* istanbul ignore next */\n\n\nObject.defineProperties(Log, {\n  DEBUG: {\n    value: 0\n  },\n  INFO: {\n    value: 1\n  },\n  WARN: {\n    value: 2\n  },\n  ERROR: {\n    value: 3\n  },\n  OFF: {\n    value: 4\n  },\n  _levels: {\n    value: ['DEBUG', 'INFO', 'WARN', 'ERROR', 'OFF']\n  }\n});\nvar LOG_LEVELS_SET = {};\nvar LOG_LEVEL_VALUES = [];\n\nvar LOG_LEVEL_NAMES = Log._levels.map(function (level, i) {\n  LOG_LEVELS_SET[level] = true;\n  LOG_LEVEL_VALUES.push(i);\n  return level;\n});\n\nfunction validateLogLevel(level) {\n  if (!(level in LOG_LEVELS_SET)) {\n    throw E.INVALID_VALUE('level', LOG_LEVEL_NAMES);\n  }\n}\n\nfunction validateLogLevels(levels) {\n  Object.keys(levels).forEach(function (moduleName) {\n    validateLogLevel(levels[moduleName].toUpperCase());\n  });\n}\n\nmodule.exports = Log;","map":{"version":3,"mappings":"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","names":["defaultGetLogger","require","getLogger","constants","DEFAULT_LOGGER_NAME","E","typeErrors","deprecationWarningsByComponentConstructor","getDeprecationWarnings","componentConstructor","Map","has","get","deprecationWarnings","Set","set","moduleName","component","logLevels","loggerName","INVALID_TYPE","REQUIRED_ARGUMENT","validateLogLevels","Object","defineProperties","_component","value","_logLevels","_warnings","_loggerName","name","_logLevelsEqual","_logger","logger","level","DEFAULT_LOG_LEVEL","setDefaultLevel","values","size","logLevel","Log","getLevelByName","toString","bind","isNaN","parseInt","toUpperCase","validateLogLevel","substring","lastIndexOf","levels","assign","messages","_levels","INVALID_VALUE","LOG_LEVEL_VALUES","toLowerCase","prefix","Date","toISOString","noop","apply","__spreadArray","concat","log","DEBUG","slice","call","arguments","deprecationWarning","constructor","add","warn","INFO","WARN","warning","ERROR","error","customMessage","clone","OFF","LOG_LEVELS_SET","LOG_LEVEL_NAMES","map","i","push","keys","forEach","module","exports"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/util/log.js"],"sourcesContent":["/* eslint new-cap:0 */\n'use strict';\n\nconst defaultGetLogger = require('../vendor/loglevel').getLogger;\nconst constants = require('./constants');\nconst { DEFAULT_LOG_LEVEL, DEFAULT_LOGGER_NAME } = constants;\nconst E = require('./constants').typeErrors;\n\nlet deprecationWarningsByComponentConstructor;\n\nfunction getDeprecationWarnings(componentConstructor) {\n  deprecationWarningsByComponentConstructor = deprecationWarningsByComponentConstructor || new Map();\n  if (deprecationWarningsByComponentConstructor.has(componentConstructor)) {\n    return deprecationWarningsByComponentConstructor.get(componentConstructor);\n  }\n  const deprecationWarnings = new Set();\n  deprecationWarningsByComponentConstructor.set(componentConstructor, deprecationWarnings);\n  return deprecationWarnings;\n}\n\n/**\n * Selectively outputs messages to console based on specified minimum module\n * specific log levels.\n *\n * NOTE: The values in the logLevels object passed to the constructor is changed\n *       by subsequent calls to {@link Log#setLevels}.\n */\nclass Log {\n  /**\n   * Construct a new {@link Log} object.\n   * @param {String} moduleName - Name of the logging module (webrtc/media/signaling)\n   * @param {object} component - Component owning this instance of {@link Log}\n   * @param {LogLevels} logLevels - Logging levels. See {@link LogLevels}\n   * @param {String} loggerName - Name of the logger instance. Used when calling getLogger from loglevel module\n   * @param {Function} [getLogger] - optional method used internally.\n   */\n  constructor(moduleName, component, logLevels, loggerName, getLogger) {\n    if (typeof moduleName !== 'string') {\n      throw E.INVALID_TYPE('moduleName', 'string');\n    }\n\n    if (!component) {\n      throw E.REQUIRED_ARGUMENT('component');\n    }\n\n    if (typeof logLevels !== 'object') {\n      logLevels = {};\n    }\n\n    getLogger = getLogger || defaultGetLogger;\n\n    validateLogLevels(logLevels);\n\n    /* istanbul ignore next */\n    Object.defineProperties(this, {\n      _component: {\n        value: component\n      },\n      _logLevels: {\n        value: logLevels\n      },\n      _warnings: {\n        value: new Set()\n      },\n      _loggerName: {\n        get: function get() {\n          let name = loggerName && typeof loggerName === 'string' ? loggerName : DEFAULT_LOGGER_NAME;\n\n          if (!this._logLevelsEqual) {\n            name = `${name}-${moduleName}`;\n          }\n          return name;\n        }\n      },\n      _logger: {\n        get: function get() {\n          const logger = getLogger(this._loggerName);\n          let level = this._logLevels[moduleName] || DEFAULT_LOG_LEVEL;\n\n          // There is no 'off' in the logger module. It uses 'silent' instead\n          level = level === 'off' ? 'silent' : level;\n\n          logger.setDefaultLevel(level);\n          return logger;\n        }\n      },\n      _logLevelsEqual: {\n        get: function get() {\n          // True if all levels are the same\n          return (new Set(Object.values(this._logLevels)).size) === 1;\n        }\n      },\n      logLevel: {\n        get: function get() {\n          return Log.getLevelByName(logLevels[moduleName] || DEFAULT_LOG_LEVEL);\n        }\n      },\n      name: { get: component.toString.bind(component) }\n    });\n  }\n\n  /**\n   * Get the log level (number) by its name (string)\n   * @param {String} name - Name of the log level\n   * @returns {Number} Requested log level\n   * @throws {TwilioError} INVALID_LOG_LEVEL (32056)\n   * @public\n   */\n  static getLevelByName(name) {\n    if (!isNaN(name)) {\n      return parseInt(name, 10);\n    }\n    name = name.toUpperCase();\n    validateLogLevel(name);\n    return Log[name];\n  }\n\n  /**\n   * Create a child {@link Log} instance with this._logLevels\n   * @param moduleName - Name of the logging module\n   * @param component - Component owning this instance of {@link Log}\n   * @returns {Log} this\n   */\n  createLog(moduleName, component) {\n    let name = this._loggerName;\n    // Grab the original logger name\n    if (!this._logLevelsEqual) {\n      name = name.substring(0, name.lastIndexOf('-'));\n    }\n    return new Log(moduleName, component, this._logLevels, name);\n  }\n\n  /**\n   * Set new log levels.\n   * This changes the levels for all its ancestors,\n   * siblings, and children and descendants instances of {@link Log}.\n   * @param {LogLevels} levels - New log levels\n   * @throws {TwilioError} INVALID_ARGUMENT\n   * @returns {Log} this\n   */\n  setLevels(levels) {\n    validateLogLevels(levels);\n    Object.assign(this._logLevels, levels);\n    return this;\n  }\n\n  /**\n   * Log a message using the logger method appropriate for the specified logLevel\n   * @param {Number} logLevel - Log level of the message being logged\n   * @param {Array} messages - Message(s) to log\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n  log(logLevel, messages) {\n    let name = Log._levels[logLevel];\n    // eslint-disable-next-line no-use-before-define\n    if (!name) { throw E.INVALID_VALUE('logLevel', LOG_LEVEL_VALUES); }\n\n    name = name.toLowerCase();\n    const prefix = [new Date().toISOString(), name, this.name];\n\n    (this._logger[name] || function noop() {})(...prefix.concat(messages));\n\n    return this;\n  }\n\n  /**\n   * Log a debug message\n   * @param {...String} messages - Message(s) to pass to the logger\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n  debug() {\n    return this.log(Log.DEBUG, [].slice.call(arguments));\n  }\n\n  /**\n   * Log a deprecation warning. Deprecation warnings are logged as warnings and\n   * they are only ever logged once.\n   * @param {String} deprecationWarning - The deprecation warning\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n  deprecated(deprecationWarning) {\n    const deprecationWarnings = getDeprecationWarnings(this._component.constructor);\n    if (deprecationWarnings.has(deprecationWarning)) {\n      return this;\n    }\n    deprecationWarnings.add(deprecationWarning);\n    return this.warn(deprecationWarning);\n  }\n\n  /**\n   * Log an info message\n   * @param {...String} messages - Message(s) to pass to the logger\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n  info() {\n    return this.log(Log.INFO, [].slice.call(arguments));\n  }\n\n  /**\n   * Log a warn message\n   * @param {...String} messages - Message(s) to pass to the logger\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n  warn() {\n    return this.log(Log.WARN, [].slice.call(arguments));\n  }\n\n  /**\n   * Log a warning once.\n   * @param {String} warning\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n  warnOnce(warning) {\n    if (this._warnings.has(warning)) {\n      return this;\n    }\n    this._warnings.add(warning);\n    return this.warn(warning);\n  }\n\n  /**\n   * Log an error message\n   * @param {...String} messages - Message(s) to pass to the logger\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n  error() {\n    return this.log(Log.ERROR, [].slice.call(arguments));\n  }\n\n  /**\n   * Log an error message and throw an exception\n   * @param {TwilioError} error - Error to throw\n   * @param {String} customMessage - Custom message for the error\n   * @public\n   */\n  throw(error, customMessage) {\n    if (error.clone) {\n      error = error.clone(customMessage);\n    }\n\n    this.log(Log.ERROR, error);\n    throw error;\n  }\n}\n\n// Singleton Constants\n/* eslint key-spacing:0 */\n/* istanbul ignore next */\nObject.defineProperties(Log, {\n  DEBUG: { value: 0 },\n  INFO:  { value: 1 },\n  WARN:  { value: 2 },\n  ERROR: { value: 3 },\n  OFF:   { value: 4 },\n  _levels: {\n    value: [\n      'DEBUG',\n      'INFO',\n      'WARN',\n      'ERROR',\n      'OFF',\n    ]\n  }\n});\n\nconst LOG_LEVELS_SET = {};\nconst LOG_LEVEL_VALUES = [];\n\nconst LOG_LEVEL_NAMES = Log._levels.map((level, i) => {\n  LOG_LEVELS_SET[level] = true;\n  LOG_LEVEL_VALUES.push(i);\n  return level;\n});\n\nfunction validateLogLevel(level) {\n  if (!(level in LOG_LEVELS_SET)) {\n    throw E.INVALID_VALUE('level', LOG_LEVEL_NAMES);\n  }\n}\n\nfunction validateLogLevels(levels) {\n  Object.keys(levels).forEach(moduleName => {\n    validateLogLevel(levels[moduleName].toUpperCase());\n  });\n}\n\nmodule.exports = Log;\n"]},"metadata":{},"sourceType":"script"}