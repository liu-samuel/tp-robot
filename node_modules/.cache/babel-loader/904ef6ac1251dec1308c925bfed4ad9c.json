{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar RemoteParticipantSignaling = require('../remoteparticipant');\n\nvar RemoteTrackPublicationV2 = require('./remotetrackpublication');\n/**\n * @extends RemoteParticipantSignaling\n * @property {?number} revision\n */\n\n\nvar RemoteParticipantV2 =\n/** @class */\nfunction (_super) {\n  __extends(RemoteParticipantV2, _super);\n  /**\n   * Construct a {@link RemoteParticipantV2}.\n   * @param {object} participantState\n   * @param {function(Track.SID): boolean} getInitialTrackSwitchOffState\n   * @param {function(Track.SID, Track.Priority): boolean} setPriority\n   * @param {function(Track.SID, ClientRenderHint): Promise<void>} setRenderHint\n   * @param {function(Track.SID): void} clearTrackHint\n   * @param {object} [options]\n   */\n\n\n  function RemoteParticipantV2(participantState, getInitialTrackSwitchOffState, setPriority, setRenderHint, clearTrackHint, options) {\n    var _this = _super.call(this, participantState.sid, participantState.identity) || this;\n\n    options = Object.assign({\n      RemoteTrackPublicationV2: RemoteTrackPublicationV2\n    }, options);\n    Object.defineProperties(_this, {\n      _revision: {\n        writable: true,\n        value: null\n      },\n      _RemoteTrackPublicationV2: {\n        value: options.RemoteTrackPublicationV2\n      },\n      _getInitialTrackSwitchOffState: {\n        value: getInitialTrackSwitchOffState\n      },\n      updateSubscriberTrackPriority: {\n        value: function (trackSid, priority) {\n          return setPriority(trackSid, priority);\n        }\n      },\n      updateTrackRenderHint: {\n        value: function (trackSid, renderHint) {\n          return setRenderHint(trackSid, renderHint);\n        }\n      },\n      clearTrackHint: {\n        value: function (trackSid) {\n          return clearTrackHint(trackSid);\n        }\n      },\n      revision: {\n        enumerable: true,\n        get: function () {\n          return this._revision;\n        }\n      }\n    });\n    return _this.update(participantState);\n  }\n  /**\n   * @private\n   */\n\n\n  RemoteParticipantV2.prototype._getOrCreateTrack = function (trackState) {\n    var RemoteTrackPublicationV2 = this._RemoteTrackPublicationV2;\n    var track = this.tracks.get(trackState.sid);\n\n    if (!track) {\n      var isSwitchedOff = this._getInitialTrackSwitchOffState(trackState.sid);\n\n      track = new RemoteTrackPublicationV2(trackState, isSwitchedOff);\n      this.addTrack(track);\n    }\n\n    return track;\n  };\n  /**\n   * Update the {@link RemoteParticipantV2} with the new state.\n   * @param {object} participantState\n   * @returns {this}\n   */\n\n\n  RemoteParticipantV2.prototype.update = function (participantState) {\n    var _this = this;\n\n    if (this.revision !== null && participantState.revision <= this.revision) {\n      return this;\n    }\n\n    this._revision = participantState.revision;\n    var tracksToKeep = new Set();\n    participantState.tracks.forEach(function (trackState) {\n      var track = _this._getOrCreateTrack(trackState);\n\n      track.update(trackState);\n      tracksToKeep.add(track);\n    });\n    this.tracks.forEach(function (track) {\n      if (!tracksToKeep.has(track)) {\n        _this.removeTrack(track);\n      }\n    });\n\n    switch (participantState.state) {\n      case 'disconnected':\n        this.disconnect();\n        break;\n\n      case 'reconnecting':\n        this.reconnecting();\n        break;\n\n      case 'connected':\n        this.connect(this.sid, this.identity);\n        break;\n    }\n\n    return this;\n  };\n\n  return RemoteParticipantV2;\n}(RemoteParticipantSignaling);\n\nmodule.exports = RemoteParticipantV2;","map":{"version":3,"mappings":"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","names":["RemoteParticipantSignaling","require","RemoteTrackPublicationV2","__extends","participantState","getInitialTrackSwitchOffState","setPriority","setRenderHint","clearTrackHint","options","_super","sid","identity","Object","assign","defineProperties","_this","_revision","writable","value","_RemoteTrackPublicationV2","_getInitialTrackSwitchOffState","updateSubscriberTrackPriority","trackSid","priority","updateTrackRenderHint","renderHint","revision","enumerable","get","update","RemoteParticipantV2","trackState","track","tracks","isSwitchedOff","addTrack","tracksToKeep","Set","forEach","_getOrCreateTrack","add","has","removeTrack","state","disconnect","reconnecting","connect","module","exports"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/signaling/v2/remoteparticipant.js"],"sourcesContent":["'use strict';\n\nconst RemoteParticipantSignaling = require('../remoteparticipant');\nconst RemoteTrackPublicationV2 = require('./remotetrackpublication');\n\n/**\n * @extends RemoteParticipantSignaling\n * @property {?number} revision\n */\nclass RemoteParticipantV2 extends RemoteParticipantSignaling {\n  /**\n   * Construct a {@link RemoteParticipantV2}.\n   * @param {object} participantState\n   * @param {function(Track.SID): boolean} getInitialTrackSwitchOffState\n   * @param {function(Track.SID, Track.Priority): boolean} setPriority\n   * @param {function(Track.SID, ClientRenderHint): Promise<void>} setRenderHint\n   * @param {function(Track.SID): void} clearTrackHint\n   * @param {object} [options]\n   */\n  constructor(participantState, getInitialTrackSwitchOffState, setPriority, setRenderHint, clearTrackHint, options) {\n    super(participantState.sid, participantState.identity);\n\n    options = Object.assign({\n      RemoteTrackPublicationV2\n    }, options);\n\n    Object.defineProperties(this, {\n      _revision: {\n        writable: true,\n        value: null\n      },\n      _RemoteTrackPublicationV2: {\n        value: options.RemoteTrackPublicationV2\n      },\n      _getInitialTrackSwitchOffState: {\n        value: getInitialTrackSwitchOffState\n      },\n      updateSubscriberTrackPriority: {\n        value: (trackSid, priority) => setPriority(trackSid, priority)\n      },\n      updateTrackRenderHint: {\n        value: (trackSid, renderHint) => setRenderHint(trackSid, renderHint)\n      },\n      clearTrackHint: {\n        value: trackSid => clearTrackHint(trackSid)\n      },\n      revision: {\n        enumerable: true,\n        get() {\n          return this._revision;\n        }\n      }\n    });\n\n    return this.update(participantState);\n  }\n\n  /**\n   * @private\n   */\n  _getOrCreateTrack(trackState) {\n    const RemoteTrackPublicationV2 = this._RemoteTrackPublicationV2;\n    let track = this.tracks.get(trackState.sid);\n    if (!track) {\n      const isSwitchedOff = this._getInitialTrackSwitchOffState(trackState.sid);\n      track = new RemoteTrackPublicationV2(trackState, isSwitchedOff);\n      this.addTrack(track);\n    }\n    return track;\n  }\n\n  /**\n   * Update the {@link RemoteParticipantV2} with the new state.\n   * @param {object} participantState\n   * @returns {this}\n   */\n  update(participantState) {\n    if (this.revision !== null && participantState.revision <= this.revision) {\n      return this;\n    }\n    this._revision = participantState.revision;\n\n    const tracksToKeep = new Set();\n\n    participantState.tracks.forEach(trackState => {\n      const track = this._getOrCreateTrack(trackState);\n      track.update(trackState);\n      tracksToKeep.add(track);\n    });\n\n    this.tracks.forEach(track => {\n      if (!tracksToKeep.has(track)) {\n        this.removeTrack(track);\n      }\n    });\n\n    switch (participantState.state) {\n      case 'disconnected':\n        this.disconnect();\n        break;\n      case 'reconnecting':\n        this.reconnecting();\n        break;\n      case 'connected':\n        this.connect(this.sid, this.identity);\n        break;\n    }\n\n    return this;\n  }\n}\n\nmodule.exports = RemoteParticipantV2;\n"]},"metadata":{},"sourceType":"script"}