{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nvar EventEmitter = require('./eventemitter');\n\nvar RemoteParticipant = require('./remoteparticipant');\n\nvar StatsReport = require('./stats/statsreport');\n\nvar valueToJSON = require('./util').valueToJSON;\n\nvar nInstances = 0;\n/**\n * A {@link Room} represents communication between you and one or more\n * {@link RemoteParticipant}s sharing {@link AudioTrack}s and\n * {@link VideoTrack}s.\n * <br><br>\n * You can connect to a {@link Room} by calling {@link module:twilio-video.connect}.\n * @extends EventEmitter\n * @property {?RemoteParticipant} dominantSpeaker - The Dominant Speaker in the\n *   {@link Room}, if any\n * @property {boolean} isRecording - Whether or not the {@link Room} is being\n *   recorded\n * @property {LocalParticipant} localParticipant - Your {@link LocalParticipant}\n *   in the {@link Room}\n * @property {string} mediaRegion - String indicating geographical region\n *    where  media is processed for the {@link Room}.\n * @property {string} name - The {@link Room}'s name\n * @property {Map<Participant.SID, RemoteParticipant>} participants -\n *   The {@link RemoteParticipant}s participating in this {@link Room}\n * @property {Room.SID} sid - The {@link Room}'s SID\n * @property {string} state - \"connected\", \"reconnecting\", or \"disconnected\"\n * @throws {SignalingConnectionDisconnectedError}\n * @emits Room#disconnected\n * @emits Room#participantConnected\n * @emits Room#participantDisconnected\n * @emits Room#participantReconnected\n * @emits Room#participantReconnecting\n * @emits Room#reconnected\n * @emits Room#reconnecting\n * @emits Room#recordingStarted\n * @emits Room#recordingStopped\n * @emits Room#trackDimensionsChanged\n * @emits Room#trackDisabled\n * @emits Room#trackEnabled\n * @emits Room#trackMessage\n * @emits Room#trackPublished\n * @emits Room#trackPublishPriorityChanged\n * @emits Room#trackStarted\n * @emits Room#trackSubscribed\n * @emits Room#trackSwitchedOff\n * @emits Room#trackSwitchedOn\n * @emits Room#trackUnpublished\n * @emits Room#trackUnsubscribed\n */\n\nvar Room =\n/** @class */\nfunction (_super) {\n  __extends(Room, _super);\n  /**\n   * Construct a {@link Room}.\n   * @param {RoomSignaling} signaling\n   * @param {?object} [options={}]\n   */\n\n\n  function Room(localParticipant, signaling, options) {\n    var _this = _super.call(this) || this;\n\n    var log = options.log.createLog('default', _this);\n    var participants = new Map();\n    /* istanbul ignore next */\n\n    Object.defineProperties(_this, {\n      _log: {\n        value: log\n      },\n      _clientTrackSwitchOffControl: {\n        value: options.clientTrackSwitchOffControl || 'disabled'\n      },\n      _contentPreferencesMode: {\n        value: options.contentPreferencesMode || 'disabled'\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _options: {\n        value: options\n      },\n      _participants: {\n        value: participants\n      },\n      _signaling: {\n        value: signaling\n      },\n      dominantSpeaker: {\n        enumerable: true,\n        get: function () {\n          return this.participants.get(signaling.dominantSpeakerSid) || null;\n        }\n      },\n      isRecording: {\n        enumerable: true,\n        get: function () {\n          return signaling.recording.isEnabled || false;\n        }\n      },\n      localParticipant: {\n        enumerable: true,\n        value: localParticipant\n      },\n      name: {\n        enumerable: true,\n        value: signaling.name\n      },\n      participants: {\n        enumerable: true,\n        value: participants\n      },\n      sid: {\n        enumerable: true,\n        value: signaling.sid\n      },\n      state: {\n        enumerable: true,\n        get: function () {\n          return signaling.state;\n        }\n      },\n      mediaRegion: {\n        enumerable: true,\n        value: signaling.mediaRegion\n      }\n    });\n    handleRecordingEvents(_this, signaling.recording);\n    handleSignalingEvents(_this, signaling);\n    log.info('Created a new Room:', _this.name);\n    log.debug('Initial RemoteParticipants:', Array.from(_this._participants.values()));\n    return _this;\n  }\n\n  Room.prototype.toString = function () {\n    return \"[Room #\" + this._instanceId + \": \" + this.sid + \"]\";\n  };\n  /**\n   * Disconnect from the {@link Room}.\n   * @returns {this}\n   */\n\n\n  Room.prototype.disconnect = function () {\n    this._log.info('Disconnecting');\n\n    this._signaling.disconnect();\n\n    return this;\n  };\n  /**\n   * Get the {@link Room}'s media statistics. This is not supported in Safari 12.0 or below\n   * due to this bug : https://bugs.webkit.org/show_bug.cgi?id=192601\n   *\n   * @returns {Promise.<Array<StatsReport>>}\n   */\n\n\n  Room.prototype.getStats = function () {\n    var _this = this;\n\n    return this._signaling.getStats().then(function (responses) {\n      return Array.from(responses).map(function (_a) {\n        var _b = __read(_a, 2),\n            id = _b[0],\n            response = _b[1];\n\n        return new StatsReport(id, Object.assign({}, response, {\n          localAudioTrackStats: rewriteLocalTrackIds(_this, response.localAudioTrackStats),\n          localVideoTrackStats: rewriteLocalTrackIds(_this, response.localVideoTrackStats)\n        }));\n      });\n    });\n  };\n\n  Room.prototype.toJSON = function () {\n    return valueToJSON(this);\n  };\n\n  return Room;\n}(EventEmitter);\n\nfunction rewriteLocalTrackIds(room, trackStats) {\n  var localParticipantSignaling = room.localParticipant._signaling;\n  return trackStats.reduce(function (trackStats, trackStat) {\n    var publication = localParticipantSignaling.tracks.get(trackStat.trackId);\n    var trackSender = localParticipantSignaling.getSender(publication);\n    return trackSender ? [Object.assign({}, trackStat, {\n      trackId: trackSender.id\n    })].concat(trackStats) : trackStats;\n  }, []);\n}\n/**\n * A {@link Room.SID} is a 34-character string starting with \"RM\"\n * that uniquely identifies a {@link Room}.\n * @type string\n * @typedef Room.SID\n */\n\n/**\n * The Dominant Speaker in the {@link Room} changed. Either the Dominant Speaker\n * is a new {@link RemoteParticipant} or the Dominant Speaker has been reset and\n * is now null.\n * @param {?RemoteParticipant} dominantSpeaker - The Dominant Speaker in the\n *   {@link Room}, if any\n * @event Room#dominantSpeakerChanged\n */\n\n/**\n * Your {@link LocalParticipant} was disconnected from the {@link Room} and all\n * other {@link RemoteParticipant}s.\n * @param {Room} room - The {@link Room} your\n *   {@link LocalParticipant} was disconnected from\n * @param {?TwilioError} error - Present when the {@link LocalParticipant} got\n *   disconnected from the {@link Room} unexpectedly\n * @event Room#disconnected\n * @example\n * myRoom.on('disconnected', function(room, error) {\n *   if (error) {\n *     console.log('Unexpectedly disconnected:', error);\n *   }\n *   myRoom.localParticipant.tracks.forEach(function(track) {\n *     track.stop();\n *     track.detach();\n *   });\n * });\n */\n\n/**\n * A {@link RemoteParticipant} joined the {@link Room}. In Large Group Rooms (Maximum\n * Participants greater than 50), this event is raised only when a {@link RemoteParticipant}\n * publishes at least one {@link LocalTrack}.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who joined\n * @event Room#participantConnected\n * @example\n * myRoom.on('participantConnected', function(participant) {\n *   console.log(participant.identity + ' joined the Room');\n * });\n */\n\n/**\n * A {@link RemoteParticipant} left the {@link Room}. In Large Group Rooms (Maximum\n * Participants greater than 50), this event is raised only when a {@link RemoteParticipant}\n * unpublishes all its {@link LocalTrack}s.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who left\n * @event Room#participantDisconnected\n * @example\n * myRoom.on('participantDisconnected', function(participant) {\n *   console.log(participant.identity + ' left the Room');\n *   participant.tracks.forEach(function(track) {\n *     track.detach().forEach(function(mediaElement) {\n *       mediaElement.remove();\n *     });\n *   });\n * });\n */\n\n/**\n * A {@link RemoteParticipant} has reconnected to the {@link Room} after a signaling connection disruption.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} that has reconnected.\n * @event Room#participantReconnected\n * @example\n * myRoom.on('participantReconnected', participant => {\n *   console.log(participant.identity + ' reconnected to the Room');\n * });\n */\n\n/**\n * A {@link RemoteParticipant} is reconnecting to the {@link Room} after a signaling connection disruption.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} that is reconnecting.\n * @event Room#participantReconnecting\n * @example\n * myRoom.on('participantReconnecting', participant => {\n *   console.log(participant.identity + ' is reconnecting to the Room');\n * });\n */\n\n/**\n * Your application successfully reconnected to the {@link Room}. When this\n * event is emitted, the {@link Room} is in state \"connected\".\n * @event Room#reconnected\n * @example\n * myRoom.on('reconnected', () => {\n *   console.log('Reconnected!');\n * });\n */\n\n/**\n * Your application is reconnecting to the {@link Room}. This happens when there\n * is a disruption in your signaling connection and/or your media connection. When\n * this event is emitted, the {@link Room} is in state \"reconnecting\". If reconnecting\n * succeeds, the {@link Room} will emit a \"reconnected\" event.\n * @param {MediaConnectionError|SignalingConnectionDisconnectedError} error - A\n *   {@link MediaConnectionError} if your application is reconnecting due to a\n *   disruption in your media connection, or a {@link SignalingConnectionDisconnectedError}\n *   if your application is reconnecting due to a disruption in your signaling connection\n * @event Room#reconnecting\n * @example\n * myRoom.on('reconnecting', error => {\n *   if (error.code === 53001) {\n *     console.log('Reconnecting your signaling connection!', error.message);\n *   } else if (error.code === 53405) {\n *     console.log('Reconnecting your media connection!', error.message);\n *   }\n * });\n */\n\n/**\n * The {@link Room} is now being recorded\n * @event Room#recordingStarted\n */\n\n/**\n * The {@link Room} is no longer being recorded\n * @event Room#recordingStopped\n */\n\n/**\n * One of the {@link RemoteParticipant}'s {@link VideoTrack}'s dimensions changed.\n * @param {RemoteVideoTrack} track - The {@link RemoteVideoTrack} whose dimensions changed\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteVideoTrack}'s dimensions changed\n * @event Room#trackDimensionsChanged\n */\n\n/**\n * A {@link RemoteTrack} was disabled by a {@link RemoteParticipant} in the {@link Room}.\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication} that represents disabled {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   disabled the {@link RemoteTrack}\n * @event Room#trackDisabled\n */\n\n/**\n * A {@link RemoteTrack} was enabled by a {@link RemoteParticipant} in the {@link Room}.\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication} that represents enabled {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   enabled the {@link RemoteTrack}\n * @event Room#trackEnabled\n */\n\n/**\n * A message was received over one of the {@link RemoteParticipant}'s\n * {@link RemoteDataTrack}'s.\n * @param {string|ArrayBuffer} data\n * @param {RemoteDataTrack} track - The {@link RemoteDataTrack} over which the\n *   message was received\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteDataTrack} received the message\n * @event Room#trackMessage\n */\n\n/**\n * A {@link RemoteTrack} was published by a {@link RemoteParticipant} after\n * connecting to the {@link Room}. This event is not emitted for\n * {@link RemoteTrack}s that were published while the {@link RemoteParticipant}\n * was connecting to the {@link Room}.\n * @event Room#trackPublished\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   which represents the published {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   published the {@link RemoteTrack}\n * @example\n * function trackPublished(publication, participant) {\n *   console.log(`RemoteParticipant ${participant.sid} published Track ${publication.trackSid}`);\n * }\n *\n * // Handle RemoteTracks published after connecting to the Room.\n * room.on('trackPublished', trackPublished);\n *\n * room.on('participantConnected', participant => {\n *   // Handle RemoteTracks published while connecting to the Room.\n *   participant.trackPublications.forEach(publication => trackPublished(publication, participant));\n * });\n */\n\n/**\n * One of a {@link RemoteParticipant}'s {@link RemoteTrack}s in the {@link Room} started.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that started\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} started\n * @event Room#trackStarted\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was subscribed to.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was subscribed\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was subscribed\n * @event Room#trackSubscribed\n * @example\n * room.on('trackSubscribed', function(track, publication, participant) {\n *   var participantView = document.getElementById('participant-view-' + participant.identity);\n *   participantView.appendChild(track.attach());\n * });\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was switched off.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was switched off\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was switched off\n * @event Room#trackSwitchedOff\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was switched on.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was switched on\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was switched on\n * @event Room#trackSwitchedOn\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} could not be subscribed to.\n * @param {TwilioError} error - The reason the {@link RemoteTrack} could not be\n *   subscribed to\n * @param {RemoteTrackPublication} publication - The\n *   {@link RemoteTrackPublication} for the {@link RemoteTrack} that could not\n *   be subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} could not be subscribed to\n * @event Room#trackSubscriptionFailed\n */\n\n/**\n * The {@link RemoteTrack}'s publish {@link Track.Priority} was changed by the\n * {@link RemoteParticipant}.\n * @param {Track.Priority} priority - the {@link RemoteTrack}'s new publish\n *   {@link Track.Priority};\n * @param {RemoteTrackPublication} publication - The\n *   {@link RemoteTrackPublication} for the {@link RemoteTrack} that changed priority\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} changed priority\n * @event Room#trackPublishPriorityChanged\n */\n\n/**\n * A {@link RemoteTrack} was unpublished by a {@link RemoteParticipant} to the {@link Room}.\n * @event Room#trackUnpublished\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   which represents the unpublished {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   unpublished the {@link RemoteTrack}\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was unsubscribed from.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was unsubscribed\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was unsubscribed from\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was unsubscribed\n * @event Room#trackUnsubscribed\n * @example\n * room.on('trackUnsubscribed', function(track, publication, participant) {\n *   track.detach().forEach(function(mediaElement) {\n *     mediaElement.remove();\n *   });\n * });\n */\n\n\nfunction connectParticipant(room, participantSignaling) {\n  var log = room._log,\n      clientTrackSwitchOffControl = room._clientTrackSwitchOffControl,\n      contentPreferencesMode = room._contentPreferencesMode;\n  var participant = new RemoteParticipant(participantSignaling, {\n    log: log,\n    clientTrackSwitchOffControl: clientTrackSwitchOffControl,\n    contentPreferencesMode: contentPreferencesMode\n  });\n  log.info('A new RemoteParticipant connected:', participant);\n\n  room._participants.set(participant.sid, participant);\n\n  room.emit('participantConnected', participant); // Reemit Track and RemoteParticipant events.\n\n  var eventListeners = [['reconnected', 'participantReconnected'], ['reconnecting', 'participantReconnecting'], 'trackDimensionsChanged', 'trackDisabled', 'trackEnabled', 'trackMessage', 'trackPublished', 'trackPublishPriorityChanged', 'trackStarted', 'trackSubscribed', 'trackSubscriptionFailed', 'trackSwitchedOff', 'trackSwitchedOn', 'trackUnpublished', 'trackUnsubscribed'].map(function (eventOrPair) {\n    var _a = __read(Array.isArray(eventOrPair) ? eventOrPair : [eventOrPair, eventOrPair], 2),\n        event = _a[0],\n        participantEvent = _a[1];\n\n    function reemit() {\n      var args = [].slice.call(arguments);\n      args.unshift(participantEvent);\n      args.push(participant);\n      room.emit.apply(room, __spreadArray([], __read(args)));\n    }\n\n    participant.on(event, reemit);\n    return [event, reemit];\n  });\n  participant.once('disconnected', function participantDisconnected() {\n    var dominantSpeaker = room.dominantSpeaker;\n    log.info('RemoteParticipant disconnected:', participant);\n\n    room._participants.delete(participant.sid);\n\n    eventListeners.forEach(function (args) {\n      participant.removeListener(args[0], args[1]);\n    });\n    room.emit('participantDisconnected', participant);\n\n    if (participant === dominantSpeaker) {\n      room.emit('dominantSpeakerChanged', room.dominantSpeaker);\n    }\n  });\n}\n\nfunction handleRecordingEvents(room, recording) {\n  recording.on('updated', function updated() {\n    var started = recording.isEnabled;\n\n    room._log.info(\"Recording \" + (started ? 'started' : 'stopped'));\n\n    room.emit(\"recording\" + (started ? 'Started' : 'Stopped'));\n  });\n}\n\nfunction handleSignalingEvents(room, signaling) {\n  var log = room._log; // Reemit RemoteParticipant events from the RoomSignaling.\n\n  log.debug('Creating a new RemoteParticipant for each ParticipantSignaling ' + 'in the RoomSignaling');\n  signaling.participants.forEach(connectParticipant.bind(null, room));\n  log.debug('Setting up RemoteParticipant creation for all subsequent ' + 'ParticipantSignalings that connect to the RoomSignaling');\n  signaling.on('participantConnected', connectParticipant.bind(null, room));\n  signaling.on('dominantSpeakerChanged', function () {\n    return room.emit('dominantSpeakerChanged', room.dominantSpeaker);\n  }); // Reemit state transition events from the RoomSignaling.\n\n  signaling.on('stateChanged', function stateChanged(state, error) {\n    log.info('Transitioned to state:', state);\n\n    switch (state) {\n      case 'disconnected':\n        room.participants.forEach(function (participant) {\n          participant._unsubscribeTracks();\n        });\n        room.emit(state, room, error);\n        room.localParticipant.tracks.forEach(function (publication) {\n          publication.unpublish();\n        });\n        signaling.removeListener('stateChanged', stateChanged);\n        break;\n\n      case 'reconnecting':\n        // NOTE(mpatwardhan): `stateChanged` can get emitted with StateMachine locked.\n        // Do not signal  public events synchronously with lock held.\n        setTimeout(function () {\n          return room.emit('reconnecting', error);\n        }, 0);\n        break;\n\n      default:\n        // NOTE(mpatwardhan): `stateChanged` can get emitted with StateMachine locked.\n        // Do not signal  public events synchronously with lock held.\n        setTimeout(function () {\n          return room.emit('reconnected');\n        }, 0);\n    }\n  });\n}\n\nmodule.exports = Room;","map":{"version":3,"mappings":"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","names":["EventEmitter","require","RemoteParticipant","StatsReport","valueToJSON","nInstances","__extends","localParticipant","signaling","options","_super","log","createLog","_this","participants","Map","Object","defineProperties","_log","value","_clientTrackSwitchOffControl","clientTrackSwitchOffControl","_contentPreferencesMode","contentPreferencesMode","_instanceId","_options","_participants","_signaling","dominantSpeaker","enumerable","get","dominantSpeakerSid","isRecording","recording","isEnabled","name","sid","state","mediaRegion","handleRecordingEvents","handleSignalingEvents","info","debug","Array","from","values","Room","disconnect","getStats","then","responses","map","_a","_b","id","response","assign","localAudioTrackStats","rewriteLocalTrackIds","localVideoTrackStats","room","trackStats","localParticipantSignaling","reduce","trackStat","publication","tracks","trackId","trackSender","getSender","concat","connectParticipant","participantSignaling","participant","set","emit","eventListeners","isArray","eventOrPair","event","participantEvent","reemit","args","slice","call","arguments","unshift","push","apply","__spreadArray","on","once","participantDisconnected","delete","forEach","removeListener","updated","started","bind","stateChanged","error","_unsubscribeTracks","unpublish","setTimeout","module","exports"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/room.js"],"sourcesContent":["'use strict';\n\nconst EventEmitter = require('./eventemitter');\nconst RemoteParticipant = require('./remoteparticipant');\nconst StatsReport = require('./stats/statsreport');\nconst { valueToJSON } = require('./util');\n\nlet nInstances = 0;\n\n/**\n * A {@link Room} represents communication between you and one or more\n * {@link RemoteParticipant}s sharing {@link AudioTrack}s and\n * {@link VideoTrack}s.\n * <br><br>\n * You can connect to a {@link Room} by calling {@link module:twilio-video.connect}.\n * @extends EventEmitter\n * @property {?RemoteParticipant} dominantSpeaker - The Dominant Speaker in the\n *   {@link Room}, if any\n * @property {boolean} isRecording - Whether or not the {@link Room} is being\n *   recorded\n * @property {LocalParticipant} localParticipant - Your {@link LocalParticipant}\n *   in the {@link Room}\n * @property {string} mediaRegion - String indicating geographical region\n *    where  media is processed for the {@link Room}.\n * @property {string} name - The {@link Room}'s name\n * @property {Map<Participant.SID, RemoteParticipant>} participants -\n *   The {@link RemoteParticipant}s participating in this {@link Room}\n * @property {Room.SID} sid - The {@link Room}'s SID\n * @property {string} state - \"connected\", \"reconnecting\", or \"disconnected\"\n * @throws {SignalingConnectionDisconnectedError}\n * @emits Room#disconnected\n * @emits Room#participantConnected\n * @emits Room#participantDisconnected\n * @emits Room#participantReconnected\n * @emits Room#participantReconnecting\n * @emits Room#reconnected\n * @emits Room#reconnecting\n * @emits Room#recordingStarted\n * @emits Room#recordingStopped\n * @emits Room#trackDimensionsChanged\n * @emits Room#trackDisabled\n * @emits Room#trackEnabled\n * @emits Room#trackMessage\n * @emits Room#trackPublished\n * @emits Room#trackPublishPriorityChanged\n * @emits Room#trackStarted\n * @emits Room#trackSubscribed\n * @emits Room#trackSwitchedOff\n * @emits Room#trackSwitchedOn\n * @emits Room#trackUnpublished\n * @emits Room#trackUnsubscribed\n */\nclass Room extends EventEmitter {\n  /**\n   * Construct a {@link Room}.\n   * @param {RoomSignaling} signaling\n   * @param {?object} [options={}]\n   */\n  constructor(localParticipant, signaling, options) {\n    super();\n\n    const log = options.log.createLog('default', this);\n    const participants = new Map();\n\n    /* istanbul ignore next */\n    Object.defineProperties(this, {\n      _log: {\n        value: log\n      },\n      _clientTrackSwitchOffControl: {\n        value: options.clientTrackSwitchOffControl || 'disabled'\n      },\n      _contentPreferencesMode: {\n        value: options.contentPreferencesMode || 'disabled'\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _options: {\n        value: options\n      },\n      _participants: {\n        value: participants\n      },\n      _signaling: {\n        value: signaling\n      },\n      dominantSpeaker: {\n        enumerable: true,\n        get() {\n          return this.participants.get(signaling.dominantSpeakerSid) || null;\n        }\n      },\n      isRecording: {\n        enumerable: true,\n        get() {\n          return signaling.recording.isEnabled || false;\n        }\n      },\n      localParticipant: {\n        enumerable: true,\n        value: localParticipant\n      },\n      name: {\n        enumerable: true,\n        value: signaling.name\n      },\n      participants: {\n        enumerable: true,\n        value: participants\n      },\n      sid: {\n        enumerable: true,\n        value: signaling.sid\n      },\n      state: {\n        enumerable: true,\n        get() {\n          return signaling.state;\n        }\n      },\n      mediaRegion: {\n        enumerable: true,\n        value: signaling.mediaRegion\n      }\n    });\n\n    handleRecordingEvents(this, signaling.recording);\n    handleSignalingEvents(this, signaling);\n\n    log.info('Created a new Room:', this.name);\n    log.debug('Initial RemoteParticipants:', Array.from(this._participants.values()));\n  }\n\n  toString() {\n    return `[Room #${this._instanceId}: ${this.sid}]`;\n  }\n\n  /**\n   * Disconnect from the {@link Room}.\n   * @returns {this}\n   */\n  disconnect() {\n    this._log.info('Disconnecting');\n    this._signaling.disconnect();\n    return this;\n  }\n\n  /**\n   * Get the {@link Room}'s media statistics. This is not supported in Safari 12.0 or below\n   * due to this bug : https://bugs.webkit.org/show_bug.cgi?id=192601\n   *\n   * @returns {Promise.<Array<StatsReport>>}\n   */\n  getStats() {\n    return this._signaling.getStats().then(responses =>\n      Array.from(responses).map(([id, response]) =>\n        new StatsReport(id, Object.assign({}, response, {\n          localAudioTrackStats: rewriteLocalTrackIds(this, response.localAudioTrackStats),\n          localVideoTrackStats: rewriteLocalTrackIds(this, response.localVideoTrackStats)\n        }))\n      )\n    );\n  }\n\n  toJSON() {\n    return valueToJSON(this);\n  }\n}\n\nfunction rewriteLocalTrackIds(room, trackStats) {\n  const localParticipantSignaling = room.localParticipant._signaling;\n  return trackStats.reduce((trackStats, trackStat) => {\n    const publication = localParticipantSignaling.tracks.get(trackStat.trackId);\n    const trackSender = localParticipantSignaling.getSender(publication);\n    return trackSender\n      ? [Object.assign({}, trackStat, { trackId: trackSender.id })].concat(trackStats)\n      : trackStats;\n  }, []);\n}\n\n/**\n * A {@link Room.SID} is a 34-character string starting with \"RM\"\n * that uniquely identifies a {@link Room}.\n * @type string\n * @typedef Room.SID\n */\n\n/**\n * The Dominant Speaker in the {@link Room} changed. Either the Dominant Speaker\n * is a new {@link RemoteParticipant} or the Dominant Speaker has been reset and\n * is now null.\n * @param {?RemoteParticipant} dominantSpeaker - The Dominant Speaker in the\n *   {@link Room}, if any\n * @event Room#dominantSpeakerChanged\n */\n\n/**\n * Your {@link LocalParticipant} was disconnected from the {@link Room} and all\n * other {@link RemoteParticipant}s.\n * @param {Room} room - The {@link Room} your\n *   {@link LocalParticipant} was disconnected from\n * @param {?TwilioError} error - Present when the {@link LocalParticipant} got\n *   disconnected from the {@link Room} unexpectedly\n * @event Room#disconnected\n * @example\n * myRoom.on('disconnected', function(room, error) {\n *   if (error) {\n *     console.log('Unexpectedly disconnected:', error);\n *   }\n *   myRoom.localParticipant.tracks.forEach(function(track) {\n *     track.stop();\n *     track.detach();\n *   });\n * });\n */\n\n/**\n * A {@link RemoteParticipant} joined the {@link Room}. In Large Group Rooms (Maximum\n * Participants greater than 50), this event is raised only when a {@link RemoteParticipant}\n * publishes at least one {@link LocalTrack}.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who joined\n * @event Room#participantConnected\n * @example\n * myRoom.on('participantConnected', function(participant) {\n *   console.log(participant.identity + ' joined the Room');\n * });\n */\n\n/**\n * A {@link RemoteParticipant} left the {@link Room}. In Large Group Rooms (Maximum\n * Participants greater than 50), this event is raised only when a {@link RemoteParticipant}\n * unpublishes all its {@link LocalTrack}s.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who left\n * @event Room#participantDisconnected\n * @example\n * myRoom.on('participantDisconnected', function(participant) {\n *   console.log(participant.identity + ' left the Room');\n *   participant.tracks.forEach(function(track) {\n *     track.detach().forEach(function(mediaElement) {\n *       mediaElement.remove();\n *     });\n *   });\n * });\n */\n\n/**\n * A {@link RemoteParticipant} has reconnected to the {@link Room} after a signaling connection disruption.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} that has reconnected.\n * @event Room#participantReconnected\n * @example\n * myRoom.on('participantReconnected', participant => {\n *   console.log(participant.identity + ' reconnected to the Room');\n * });\n */\n\n/**\n * A {@link RemoteParticipant} is reconnecting to the {@link Room} after a signaling connection disruption.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} that is reconnecting.\n * @event Room#participantReconnecting\n * @example\n * myRoom.on('participantReconnecting', participant => {\n *   console.log(participant.identity + ' is reconnecting to the Room');\n * });\n */\n\n/**\n * Your application successfully reconnected to the {@link Room}. When this\n * event is emitted, the {@link Room} is in state \"connected\".\n * @event Room#reconnected\n * @example\n * myRoom.on('reconnected', () => {\n *   console.log('Reconnected!');\n * });\n */\n\n/**\n * Your application is reconnecting to the {@link Room}. This happens when there\n * is a disruption in your signaling connection and/or your media connection. When\n * this event is emitted, the {@link Room} is in state \"reconnecting\". If reconnecting\n * succeeds, the {@link Room} will emit a \"reconnected\" event.\n * @param {MediaConnectionError|SignalingConnectionDisconnectedError} error - A\n *   {@link MediaConnectionError} if your application is reconnecting due to a\n *   disruption in your media connection, or a {@link SignalingConnectionDisconnectedError}\n *   if your application is reconnecting due to a disruption in your signaling connection\n * @event Room#reconnecting\n * @example\n * myRoom.on('reconnecting', error => {\n *   if (error.code === 53001) {\n *     console.log('Reconnecting your signaling connection!', error.message);\n *   } else if (error.code === 53405) {\n *     console.log('Reconnecting your media connection!', error.message);\n *   }\n * });\n */\n\n/**\n * The {@link Room} is now being recorded\n * @event Room#recordingStarted\n */\n\n/**\n * The {@link Room} is no longer being recorded\n * @event Room#recordingStopped\n */\n\n/**\n * One of the {@link RemoteParticipant}'s {@link VideoTrack}'s dimensions changed.\n * @param {RemoteVideoTrack} track - The {@link RemoteVideoTrack} whose dimensions changed\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteVideoTrack}'s dimensions changed\n * @event Room#trackDimensionsChanged\n */\n\n/**\n * A {@link RemoteTrack} was disabled by a {@link RemoteParticipant} in the {@link Room}.\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication} that represents disabled {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   disabled the {@link RemoteTrack}\n * @event Room#trackDisabled\n */\n\n/**\n * A {@link RemoteTrack} was enabled by a {@link RemoteParticipant} in the {@link Room}.\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication} that represents enabled {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   enabled the {@link RemoteTrack}\n * @event Room#trackEnabled\n */\n\n/**\n * A message was received over one of the {@link RemoteParticipant}'s\n * {@link RemoteDataTrack}'s.\n * @param {string|ArrayBuffer} data\n * @param {RemoteDataTrack} track - The {@link RemoteDataTrack} over which the\n *   message was received\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteDataTrack} received the message\n * @event Room#trackMessage\n */\n\n/**\n * A {@link RemoteTrack} was published by a {@link RemoteParticipant} after\n * connecting to the {@link Room}. This event is not emitted for\n * {@link RemoteTrack}s that were published while the {@link RemoteParticipant}\n * was connecting to the {@link Room}.\n * @event Room#trackPublished\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   which represents the published {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   published the {@link RemoteTrack}\n * @example\n * function trackPublished(publication, participant) {\n *   console.log(`RemoteParticipant ${participant.sid} published Track ${publication.trackSid}`);\n * }\n *\n * // Handle RemoteTracks published after connecting to the Room.\n * room.on('trackPublished', trackPublished);\n *\n * room.on('participantConnected', participant => {\n *   // Handle RemoteTracks published while connecting to the Room.\n *   participant.trackPublications.forEach(publication => trackPublished(publication, participant));\n * });\n */\n\n/**\n * One of a {@link RemoteParticipant}'s {@link RemoteTrack}s in the {@link Room} started.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that started\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} started\n * @event Room#trackStarted\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was subscribed to.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was subscribed\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was subscribed\n * @event Room#trackSubscribed\n * @example\n * room.on('trackSubscribed', function(track, publication, participant) {\n *   var participantView = document.getElementById('participant-view-' + participant.identity);\n *   participantView.appendChild(track.attach());\n * });\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was switched off.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was switched off\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was switched off\n * @event Room#trackSwitchedOff\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was switched on.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was switched on\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was switched on\n * @event Room#trackSwitchedOn\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} could not be subscribed to.\n * @param {TwilioError} error - The reason the {@link RemoteTrack} could not be\n *   subscribed to\n * @param {RemoteTrackPublication} publication - The\n *   {@link RemoteTrackPublication} for the {@link RemoteTrack} that could not\n *   be subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} could not be subscribed to\n * @event Room#trackSubscriptionFailed\n */\n\n/**\n * The {@link RemoteTrack}'s publish {@link Track.Priority} was changed by the\n * {@link RemoteParticipant}.\n * @param {Track.Priority} priority - the {@link RemoteTrack}'s new publish\n *   {@link Track.Priority};\n * @param {RemoteTrackPublication} publication - The\n *   {@link RemoteTrackPublication} for the {@link RemoteTrack} that changed priority\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} changed priority\n * @event Room#trackPublishPriorityChanged\n */\n\n/**\n * A {@link RemoteTrack} was unpublished by a {@link RemoteParticipant} to the {@link Room}.\n * @event Room#trackUnpublished\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   which represents the unpublished {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   unpublished the {@link RemoteTrack}\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was unsubscribed from.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was unsubscribed\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was unsubscribed from\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was unsubscribed\n * @event Room#trackUnsubscribed\n * @example\n * room.on('trackUnsubscribed', function(track, publication, participant) {\n *   track.detach().forEach(function(mediaElement) {\n *     mediaElement.remove();\n *   });\n * });\n */\n\nfunction connectParticipant(room, participantSignaling) {\n  const { _log: log, _clientTrackSwitchOffControl: clientTrackSwitchOffControl, _contentPreferencesMode: contentPreferencesMode } = room;\n  const participant = new RemoteParticipant(participantSignaling, { log, clientTrackSwitchOffControl, contentPreferencesMode });\n\n  log.info('A new RemoteParticipant connected:', participant);\n  room._participants.set(participant.sid, participant);\n  room.emit('participantConnected', participant);\n\n  // Reemit Track and RemoteParticipant events.\n  const eventListeners = [\n    ['reconnected', 'participantReconnected'],\n    ['reconnecting', 'participantReconnecting'],\n    'trackDimensionsChanged',\n    'trackDisabled',\n    'trackEnabled',\n    'trackMessage',\n    'trackPublished',\n    'trackPublishPriorityChanged',\n    'trackStarted',\n    'trackSubscribed',\n    'trackSubscriptionFailed',\n    'trackSwitchedOff',\n    'trackSwitchedOn',\n    'trackUnpublished',\n    'trackUnsubscribed'\n  ].map(eventOrPair => {\n    const [event, participantEvent] = Array.isArray(eventOrPair)\n      ? eventOrPair\n      : [eventOrPair, eventOrPair];\n\n    function reemit() {\n      const args = [].slice.call(arguments);\n      args.unshift(participantEvent);\n      args.push(participant);\n      room.emit(...args);\n    }\n    participant.on(event, reemit);\n    return [event, reemit];\n  });\n\n  participant.once('disconnected', function participantDisconnected() {\n    const dominantSpeaker = room.dominantSpeaker;\n    log.info('RemoteParticipant disconnected:', participant);\n    room._participants.delete(participant.sid);\n    eventListeners.forEach(args => {\n      participant.removeListener(args[0], args[1]);\n    });\n    room.emit('participantDisconnected', participant);\n    if (participant === dominantSpeaker) {\n      room.emit('dominantSpeakerChanged', room.dominantSpeaker);\n    }\n  });\n}\n\nfunction handleRecordingEvents(room, recording) {\n  recording.on('updated', function updated() {\n    const started = recording.isEnabled;\n    room._log.info(`Recording ${started ? 'started' : 'stopped'}`);\n    room.emit(`recording${started ? 'Started' : 'Stopped'}`);\n  });\n}\n\nfunction handleSignalingEvents(room, signaling) {\n  const log = room._log;\n\n  // Reemit RemoteParticipant events from the RoomSignaling.\n  log.debug('Creating a new RemoteParticipant for each ParticipantSignaling '\n    + 'in the RoomSignaling');\n  signaling.participants.forEach(connectParticipant.bind(null, room));\n  log.debug('Setting up RemoteParticipant creation for all subsequent '\n    + 'ParticipantSignalings that connect to the RoomSignaling');\n  signaling.on('participantConnected', connectParticipant.bind(null, room));\n\n  signaling.on('dominantSpeakerChanged', () => room.emit('dominantSpeakerChanged', room.dominantSpeaker));\n\n  // Reemit state transition events from the RoomSignaling.\n  signaling.on('stateChanged', function stateChanged(state, error) {\n    log.info('Transitioned to state:', state);\n    switch (state) {\n      case 'disconnected':\n        room.participants.forEach(participant => {\n          participant._unsubscribeTracks();\n        });\n        room.emit(state, room, error);\n        room.localParticipant.tracks.forEach(publication => {\n          publication.unpublish();\n        });\n        signaling.removeListener('stateChanged', stateChanged);\n        break;\n      case 'reconnecting':\n\n        // NOTE(mpatwardhan): `stateChanged` can get emitted with StateMachine locked.\n        // Do not signal  public events synchronously with lock held.\n        setTimeout(() => room.emit('reconnecting', error), 0);\n\n        break;\n      default:\n\n        // NOTE(mpatwardhan): `stateChanged` can get emitted with StateMachine locked.\n        // Do not signal  public events synchronously with lock held.\n        setTimeout(() => room.emit('reconnected'), 0);\n    }\n  });\n}\n\nmodule.exports = Room;\n"]},"metadata":{},"sourceType":"script"}