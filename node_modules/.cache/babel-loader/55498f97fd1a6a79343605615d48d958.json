{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar DataTrackTransceiver = require('./transceiver');\n\nvar DataTransport = require('./transport');\n/**\n * A {@link DataTrackReceiver} represents a {@link DataTrackTransceiver} over\n * which data can be received. Internally, it users a single RTCDataChannel to\n * receive data.\n * @extends DataTrackTransceiver\n * @emits DataTrackReceiver#message\n * @emits DataTrackReceiver#close\n */\n\n\nvar DataTrackReceiver =\n/** @class */\nfunction (_super) {\n  __extends(DataTrackReceiver, _super);\n  /**\n   * Construct an {@link DataTrackReceiver}.\n   * @param {RTCDataChannel} dataChannel\n   */\n\n\n  function DataTrackReceiver(dataChannel) {\n    var _this = _super.call(this, dataChannel.label, dataChannel.maxPacketLifeTime, dataChannel.maxRetransmits, dataChannel.ordered) || this;\n\n    Object.defineProperties(_this, {\n      _dataChannel: {\n        value: dataChannel\n      }\n    }); // NOTE(mmalavalli): In Firefox, the default value for \"binaryType\" is \"blob\".\n    // So, we set it to \"arraybuffer\" to ensure that it is consistent with Chrome\n    // and Safari.\n\n    dataChannel.binaryType = 'arraybuffer';\n    dataChannel.addEventListener('message', function (event) {\n      _this.emit('message', event.data);\n    });\n    dataChannel.addEventListener('close', function () {\n      _this.emit('close');\n    });\n    return _this;\n  }\n\n  DataTrackReceiver.prototype.stop = function () {\n    this._dataChannel.close();\n\n    _super.prototype.stop.call(this);\n  };\n  /**\n   * Create a {@link DataTransport} from the {@link DataTrackReceiver}.\n   * @returns {DataTransport}\n   */\n\n\n  DataTrackReceiver.prototype.toDataTransport = function () {\n    return new DataTransport(this._dataChannel);\n  };\n\n  return DataTrackReceiver;\n}(DataTrackTransceiver);\n/**\n * @event DataTrackReceiver#message\n * @param {string|ArrayBuffer} data\n */\n\n/**\n * @event DataTrackReceiver#close\n */\n\n\nmodule.exports = DataTrackReceiver;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,oBAAoB,GAAGC,OAAO,CAAC,eAAD,CAApC;;AACA,IAAMC,aAAa,GAAGD,OAAO,CAAC,aAAD,CAA7B;AAEA;;;;;;;;;;AAQA;AAAA;AAAA;EAAgCE;EAC9B;;;;;;EAIA,2BAAYC,WAAZ,EAAuB;IAAvB,YACEC,kBACED,WAAW,CAACE,KADd,EAEEF,WAAW,CAACG,iBAFd,EAGEH,WAAW,CAACI,cAHd,EAIEJ,WAAW,CAACK,OAJd,KAKC,IANH;;IAQEC,MAAM,CAACC,gBAAP,CAAwBC,KAAxB,EAA8B;MAC5BC,YAAY,EAAE;QACZC,KAAK,EAAEV;MADK;IADc,CAA9B,EARqB,CAcrB;IACA;IACA;;IACAA,WAAW,CAACW,UAAZ,GAAyB,aAAzB;IAEAX,WAAW,CAACY,gBAAZ,CAA6B,SAA7B,EAAwC,iBAAK;MAC3CJ,KAAI,CAACK,IAAL,CAAU,SAAV,EAAqBC,KAAK,CAACC,IAA3B;IACD,CAFD;IAIAf,WAAW,CAACY,gBAAZ,CAA6B,OAA7B,EAAsC;MACpCJ,KAAI,CAACK,IAAL,CAAU,OAAV;IACD,CAFD;;EAGD;;EAEDG;IACE,KAAKP,YAAL,CAAkBQ,KAAlB;;IACAhB,iBAAMiB,IAAN,CAAUC,IAAV,CAAU,IAAV;EACD,CAHD;EAKA;;;;;;EAIAH;IACE,OAAO,IAAIlB,aAAJ,CAAkB,KAAKW,YAAvB,CAAP;EACD,CAFD;;EAGF;AAAC,CA7CD,CAAgCb,oBAAhC;AA+CA;;;;;AAKA;;;;;AAIAwB,MAAM,CAACC,OAAP,GAAiBL,iBAAjB","names":["DataTrackTransceiver","require","DataTransport","__extends","dataChannel","_super","label","maxPacketLifeTime","maxRetransmits","ordered","Object","defineProperties","_this","_dataChannel","value","binaryType","addEventListener","emit","event","data","DataTrackReceiver","close","stop","call","module","exports"],"sources":["/home/samliu/repos/ieee/tp-robot/node_modules/twilio-video/lib/data/receiver.js"],"sourcesContent":["'use strict';\n\nconst DataTrackTransceiver = require('./transceiver');\nconst DataTransport = require('./transport');\n\n/**\n * A {@link DataTrackReceiver} represents a {@link DataTrackTransceiver} over\n * which data can be received. Internally, it users a single RTCDataChannel to\n * receive data.\n * @extends DataTrackTransceiver\n * @emits DataTrackReceiver#message\n * @emits DataTrackReceiver#close\n */\nclass DataTrackReceiver extends DataTrackTransceiver {\n  /**\n   * Construct an {@link DataTrackReceiver}.\n   * @param {RTCDataChannel} dataChannel\n   */\n  constructor(dataChannel) {\n    super(\n      dataChannel.label,\n      dataChannel.maxPacketLifeTime,\n      dataChannel.maxRetransmits,\n      dataChannel.ordered\n    );\n\n    Object.defineProperties(this, {\n      _dataChannel: {\n        value: dataChannel\n      }\n    });\n\n    // NOTE(mmalavalli): In Firefox, the default value for \"binaryType\" is \"blob\".\n    // So, we set it to \"arraybuffer\" to ensure that it is consistent with Chrome\n    // and Safari.\n    dataChannel.binaryType = 'arraybuffer';\n\n    dataChannel.addEventListener('message', event => {\n      this.emit('message', event.data);\n    });\n\n    dataChannel.addEventListener('close', () => {\n      this.emit('close');\n    });\n  }\n\n  stop() {\n    this._dataChannel.close();\n    super.stop();\n  }\n\n  /**\n   * Create a {@link DataTransport} from the {@link DataTrackReceiver}.\n   * @returns {DataTransport}\n   */\n  toDataTransport() {\n    return new DataTransport(this._dataChannel);\n  }\n}\n\n/**\n * @event DataTrackReceiver#message\n * @param {string|ArrayBuffer} data\n */\n\n/**\n * @event DataTrackReceiver#close\n */\n\nmodule.exports = DataTrackReceiver;\n"]},"metadata":{},"sourceType":"script"}