{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar MediaTrackTransceiver = require('./transceiver');\n/**\n * A {@link MediaTrackSender} represents one or more local RTCRtpSenders.\n * @extends MediaTrackTransceiver\n * @emits MediaTrackSender#replaced\n */\n\n\nvar MediaTrackSender =\n/** @class */\nfunction (_super) {\n  __extends(MediaTrackSender, _super);\n  /**\n   * Construct a {@link MediaTrackSender}.\n   * @param {MediaStreamTrack} mediaStreamTrack\n   */\n\n\n  function MediaTrackSender(mediaStreamTrack) {\n    var _this = _super.call(this, mediaStreamTrack.id, mediaStreamTrack) || this;\n\n    Object.defineProperties(_this, {\n      _clones: {\n        value: new Set()\n      },\n      _senders: {\n        value: new Set()\n      },\n      _senderToPublisherHintCallbacks: {\n        value: new Map()\n      },\n      isPublishing: {\n        get: function () {\n          return !!this._clones.size;\n        }\n      }\n    });\n    return _this;\n  }\n  /**\n   * Return a new {@link MediaTrackSender} containing a clone of the underlying\n   * MediaStreamTrack. No RTCRtpSenders are copied.\n   * @returns {MediaTrackSender}\n   */\n\n\n  MediaTrackSender.prototype.clone = function () {\n    var clone = new MediaTrackSender(this.track.clone());\n\n    this._clones.add(clone);\n\n    return clone;\n  };\n  /**\n   * Remove a cloned {@link MediaTrackSender}.\n   * @returns {void}\n   */\n\n\n  MediaTrackSender.prototype.removeClone = function (clone) {\n    this._clones.delete(clone);\n  };\n  /**\n   * Set the given MediaStreamTrack.\n   * @param {MediaStreamTrack} mediaStreamTrack\n   * @returns {Promise<void>}\n   */\n\n\n  MediaTrackSender.prototype.setMediaStreamTrack = function (mediaStreamTrack) {\n    var _this = this;\n\n    var clones = Array.from(this._clones);\n    var senders = Array.from(this._senders);\n    return Promise.all(clones.map(function (clone) {\n      return clone.setMediaStreamTrack(mediaStreamTrack.clone());\n    }).concat(senders.map(function (sender) {\n      return _this._replaceTrack(sender, mediaStreamTrack);\n    }))).finally(function () {\n      _this._track = mediaStreamTrack;\n    });\n  };\n  /**\n   * Add an RTCRtpSender.\n   * @param {RTCRtpSender} sender\n   * @param {?()=>Promise<string>} publisherHintCallback\n   * @returns {this}\n   */\n\n\n  MediaTrackSender.prototype.addSender = function (sender, publisherHintCallback) {\n    this._senders.add(sender);\n\n    if (publisherHintCallback) {\n      this._senderToPublisherHintCallbacks.set(sender, publisherHintCallback);\n    }\n\n    return this;\n  };\n  /**\n   * Remove an RTCRtpSender.\n   * @param {RTCRtpSender} sender\n   * @returns {this}\n   */\n\n\n  MediaTrackSender.prototype.removeSender = function (sender) {\n    this._senders.delete(sender);\n\n    this._senderToPublisherHintCallbacks.delete(sender);\n\n    return this;\n  };\n  /**\n   * Applies given encodings, or resets encodings if none specified.\n   * @param {Array<{enabled: boolean, layer_index: number}>|null} encodings\n   * @returns {Promise<string>}\n   */\n\n\n  MediaTrackSender.prototype.setPublisherHint = function (encodings) {\n    // Note(mpatwardhan): since publisher hint applies only to group rooms we only look at 1st call callback.\n    var _a = __read(Array.from(this._senderToPublisherHintCallbacks.values()), 1),\n        publisherHintCallback = _a[0];\n\n    return publisherHintCallback ? publisherHintCallback(encodings) : Promise.resolve('COULD_NOT_APPLY_HINT');\n  };\n\n  MediaTrackSender.prototype._replaceTrack = function (sender, mediaStreamTrack) {\n    var _this = this;\n\n    return sender.replaceTrack(mediaStreamTrack).then(function (replaceTrackResult) {\n      // clear any publisherHints and apply default encodings.\n      _this.setPublisherHint(null).catch(function () {});\n\n      _this.emit('replaced');\n\n      return replaceTrackResult;\n    });\n  };\n\n  return MediaTrackSender;\n}(MediaTrackTransceiver);\n/**\n * The {@link MediaTrackSender} replaced the underlying mediaStreamTrack\n * @event MediaTrackSender#replaced\n */\n\n\nmodule.exports = MediaTrackSender;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,qBAAqB,GAAGC,OAAO,CAAC,eAAD,CAArC;AAEA;;;;;;;AAKA;AAAA;AAAA;EAA+BC;EAC7B;;;;;;EAIA,0BAAYC,gBAAZ,EAA4B;IAA5B,YACEC,kBAAMD,gBAAgB,CAACE,EAAvB,EAA2BF,gBAA3B,KAA4C,IAD9C;;IAEEG,MAAM,CAACC,gBAAP,CAAwBC,KAAxB,EAA8B;MAC5BC,OAAO,EAAE;QACPC,KAAK,EAAE,IAAIC,GAAJ;MADA,CADmB;MAI5BC,QAAQ,EAAE;QACRF,KAAK,EAAE,IAAIC,GAAJ;MADC,CAJkB;MAO5BE,+BAA+B,EAAE;QAC/BH,KAAK,EAAE,IAAII,GAAJ;MADwB,CAPL;MAU5BC,YAAY,EAAE;QACZC,GAAG;UACD,OAAO,CAAC,CAAC,KAAKP,OAAL,CAAaQ,IAAtB;QACD;MAHW;IAVc,CAA9B;;EAgBD;EAED;;;;;;;EAKAC;IACE,IAAMC,KAAK,GAAG,IAAID,gBAAJ,CAAqB,KAAKE,KAAL,CAAWD,KAAX,EAArB,CAAd;;IACA,KAAKV,OAAL,CAAaY,GAAb,CAAiBF,KAAjB;;IACA,OAAOA,KAAP;EACD,CAJD;EAMA;;;;;;EAIAD,mDAAYC,KAAZ,EAAiB;IACf,KAAKV,OAAL,CAAaa,MAAb,CAAoBH,KAApB;EACD,CAFD;EAIA;;;;;;;EAKAD,2DAAoBf,gBAApB,EAAoC;IAApC;;IACE,IAAMoB,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAW,KAAKhB,OAAhB,CAAf;IACA,IAAMiB,OAAO,GAAGF,KAAK,CAACC,IAAN,CAAW,KAAKb,QAAhB,CAAhB;IACA,OAAOe,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACM,GAAP,CAAW,iBAAK;MACjC,OAAOV,KAAK,CAACW,mBAAN,CAA0B3B,gBAAgB,CAACgB,KAAjB,EAA1B,CAAP;IACD,CAFkB,EAEhBY,MAFgB,CAETL,OAAO,CAACG,GAAR,CAAY,kBAAM;MAC1B,OAAOrB,KAAI,CAACwB,aAAL,CAAmBC,MAAnB,EAA2B9B,gBAA3B,CAAP;IACD,CAFS,CAFS,CAAZ,EAIF+B,OAJE,CAIM;MACX1B,KAAI,CAAC2B,MAAL,GAAchC,gBAAd;IACD,CANM,CAAP;EAOD,CAVD;EAYA;;;;;;;;EAMAe,iDAAUe,MAAV,EAAkBG,qBAAlB,EAAuC;IACrC,KAAKxB,QAAL,CAAcS,GAAd,CAAkBY,MAAlB;;IACA,IAAIG,qBAAJ,EAA2B;MACzB,KAAKvB,+BAAL,CAAqCwB,GAArC,CAAyCJ,MAAzC,EAAiDG,qBAAjD;IACD;;IACD,OAAO,IAAP;EACD,CAND;EAQA;;;;;;;EAKAlB,oDAAae,MAAb,EAAmB;IACjB,KAAKrB,QAAL,CAAcU,MAAd,CAAqBW,MAArB;;IACA,KAAKpB,+BAAL,CAAqCS,MAArC,CAA4CW,MAA5C;;IACA,OAAO,IAAP;EACD,CAJD;EAMA;;;;;;;EAKAf,wDAAiBoB,SAAjB,EAA0B;IACxB;IACM,gBAA0Bd,KAAK,CAACC,IAAN,CAAW,KAAKZ,+BAAL,CAAqC0B,MAArC,EAAX,CAA1B,EAAmF,CAAnF;IAAA,IAACH,qBAAqB,QAAtB;;IACN,OAAOA,qBAAqB,GAAGA,qBAAqB,CAACE,SAAD,CAAxB,GAAsCX,OAAO,CAACa,OAAR,CAAgB,sBAAhB,CAAlE;EACD,CAJD;;EAMAtB,qDAAce,MAAd,EAAsB9B,gBAAtB,EAAsC;IAAtC;;IACE,OAAO8B,MAAM,CAACQ,YAAP,CAAoBtC,gBAApB,EAAsCuC,IAAtC,CAA2C,8BAAkB;MAClE;MACAlC,KAAI,CAACmC,gBAAL,CAAsB,IAAtB,EAA4BC,KAA5B,CAAkC,aAAQ,CAA1C;;MACApC,KAAI,CAACqC,IAAL,CAAU,UAAV;;MACA,OAAOC,kBAAP;IACD,CALM,CAAP;EAMD,CAPD;;EAQF;AAAC,CAzGD,CAA+B9C,qBAA/B;AA2GA;;;;;;AAKA+C,MAAM,CAACC,OAAP,GAAiB9B,gBAAjB","names":["MediaTrackTransceiver","require","__extends","mediaStreamTrack","_super","id","Object","defineProperties","_this","_clones","value","Set","_senders","_senderToPublisherHintCallbacks","Map","isPublishing","get","size","MediaTrackSender","clone","track","add","delete","clones","Array","from","senders","Promise","all","map","setMediaStreamTrack","concat","_replaceTrack","sender","finally","_track","publisherHintCallback","set","encodings","values","resolve","replaceTrack","then","setPublisherHint","catch","emit","replaceTrackResult","module","exports"],"sources":["/home/samliu/repos/ieee/tp-robot/node_modules/twilio-video/lib/media/track/sender.js"],"sourcesContent":["'use strict';\n\nconst MediaTrackTransceiver = require('./transceiver');\n\n/**\n * A {@link MediaTrackSender} represents one or more local RTCRtpSenders.\n * @extends MediaTrackTransceiver\n * @emits MediaTrackSender#replaced\n */\nclass MediaTrackSender extends MediaTrackTransceiver {\n  /**\n   * Construct a {@link MediaTrackSender}.\n   * @param {MediaStreamTrack} mediaStreamTrack\n   */\n  constructor(mediaStreamTrack) {\n    super(mediaStreamTrack.id, mediaStreamTrack);\n    Object.defineProperties(this, {\n      _clones: {\n        value: new Set()\n      },\n      _senders: {\n        value: new Set()\n      },\n      _senderToPublisherHintCallbacks: {\n        value: new Map()\n      },\n      isPublishing: {\n        get() {\n          return !!this._clones.size;\n        }\n      }\n    });\n  }\n\n  /**\n   * Return a new {@link MediaTrackSender} containing a clone of the underlying\n   * MediaStreamTrack. No RTCRtpSenders are copied.\n   * @returns {MediaTrackSender}\n   */\n  clone() {\n    const clone = new MediaTrackSender(this.track.clone());\n    this._clones.add(clone);\n    return clone;\n  }\n\n  /**\n   * Remove a cloned {@link MediaTrackSender}.\n   * @returns {void}\n   */\n  removeClone(clone) {\n    this._clones.delete(clone);\n  }\n\n  /**\n   * Set the given MediaStreamTrack.\n   * @param {MediaStreamTrack} mediaStreamTrack\n   * @returns {Promise<void>}\n   */\n  setMediaStreamTrack(mediaStreamTrack) {\n    const clones = Array.from(this._clones);\n    const senders = Array.from(this._senders);\n    return Promise.all(clones.map(clone => {\n      return clone.setMediaStreamTrack(mediaStreamTrack.clone());\n    }).concat(senders.map(sender => {\n      return this._replaceTrack(sender, mediaStreamTrack);\n    }))).finally(() => {\n      this._track = mediaStreamTrack;\n    });\n  }\n\n  /**\n   * Add an RTCRtpSender.\n   * @param {RTCRtpSender} sender\n   * @param {?()=>Promise<string>} publisherHintCallback\n   * @returns {this}\n   */\n  addSender(sender, publisherHintCallback) {\n    this._senders.add(sender);\n    if (publisherHintCallback) {\n      this._senderToPublisherHintCallbacks.set(sender, publisherHintCallback);\n    }\n    return this;\n  }\n\n  /**\n   * Remove an RTCRtpSender.\n   * @param {RTCRtpSender} sender\n   * @returns {this}\n   */\n  removeSender(sender) {\n    this._senders.delete(sender);\n    this._senderToPublisherHintCallbacks.delete(sender);\n    return this;\n  }\n\n  /**\n   * Applies given encodings, or resets encodings if none specified.\n   * @param {Array<{enabled: boolean, layer_index: number}>|null} encodings\n   * @returns {Promise<string>}\n   */\n  setPublisherHint(encodings) {\n    // Note(mpatwardhan): since publisher hint applies only to group rooms we only look at 1st call callback.\n    const [publisherHintCallback] = Array.from(this._senderToPublisherHintCallbacks.values());\n    return publisherHintCallback ? publisherHintCallback(encodings) : Promise.resolve('COULD_NOT_APPLY_HINT');\n  }\n\n  _replaceTrack(sender, mediaStreamTrack) {\n    return sender.replaceTrack(mediaStreamTrack).then(replaceTrackResult => {\n      // clear any publisherHints and apply default encodings.\n      this.setPublisherHint(null).catch(() => {});\n      this.emit('replaced');\n      return replaceTrackResult;\n    });\n  }\n}\n\n/**\n * The {@link MediaTrackSender} replaced the underlying mediaStreamTrack\n * @event MediaTrackSender#replaced\n */\n\nmodule.exports = MediaTrackSender;\n"]},"metadata":{},"sourceType":"script"}