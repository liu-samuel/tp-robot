{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar DataTrackTransceiver = require('./transceiver');\n\nvar makeUUID = require('../util').makeUUID;\n/**\n * A {@link DataTrackSender} represents a {@link DataTrackTransceiver} over\n * which data can be sent. Internally, it uses a collection of RTCDataChannels\n * to send data.\n * @extends DataTrackTransceiver\n */\n\n\nvar DataTrackSender =\n/** @class */\nfunction (_super) {\n  __extends(DataTrackSender, _super);\n  /**\n   * Construct a {@link DataTrackSender}.\n   * @param {?number} maxPacketLifeTime\n   * @param {?number} maxRetransmits\n   * @param {boolean} ordered\n   */\n\n\n  function DataTrackSender(maxPacketLifeTime, maxRetransmtis, ordered) {\n    var _this = _super.call(this, makeUUID(), maxPacketLifeTime, maxRetransmtis, ordered) || this;\n\n    Object.defineProperties(_this, {\n      _clones: {\n        value: new Set()\n      },\n      _dataChannels: {\n        value: new Set()\n      }\n    });\n    return _this;\n  }\n  /**\n   * Add a cloned {@link DataTrackSender}.\n   * @private\n   * @returns {void}\n   */\n\n\n  DataTrackSender.prototype._addClone = function (clone) {\n    this._clones.add(clone);\n  };\n  /**\n   * Remove a cloned {@link DataTrackSender}.\n   * @returns {void}\n   */\n\n\n  DataTrackSender.prototype.removeClone = function (clone) {\n    this._clones.delete(clone);\n  };\n  /**\n   * Add an RTCDataChannel to the {@link DataTrackSender}.\n   * @param {RTCDataChannel} dataChannel\n   * @returns {this}\n   */\n\n\n  DataTrackSender.prototype.addDataChannel = function (dataChannel) {\n    this._dataChannels.add(dataChannel);\n\n    return this;\n  };\n  /**\n   * Return a new {@link DataTrackSender}. Any message sent over this\n   * {@link DataTrackSender} will also be sent over the clone. Whenever this\n   * {@link DataTrackSender} is stopped, so to will the clone.\n   * @returns {DataTrackSender}\n   */\n\n\n  DataTrackSender.prototype.clone = function () {\n    var _this = this;\n\n    var clone = new DataTrackSender(this.maxPacketLifeTime, this.maxRetransmits, this.ordered);\n\n    this._addClone(clone);\n\n    clone.once('stopped', function () {\n      return _this.removeClone(clone);\n    });\n    return clone;\n  };\n  /**\n   * Remove an RTCDataChannel from the {@link DataTrackSender}.\n   * @param {RTCDataChannel} dataChannel\n   * @returns {this}\n   */\n\n\n  DataTrackSender.prototype.removeDataChannel = function (dataChannel) {\n    this._dataChannels.delete(dataChannel);\n\n    return this;\n  };\n  /**\n   * Send data over the {@link DataTrackSender}. Internally, this calls\n   * <code>send</code> over each of the underlying RTCDataChannels.\n   * @param {string|Blob|ArrayBuffer|ArrayBufferView} data\n   * @returns {this}\n   */\n\n\n  DataTrackSender.prototype.send = function (data) {\n    this._dataChannels.forEach(function (dataChannel) {\n      try {\n        dataChannel.send(data);\n      } catch (error) {// Do nothing.\n      }\n    });\n\n    this._clones.forEach(function (clone) {\n      try {\n        clone.send(data);\n      } catch (error) {// Do nothing.\n      }\n    });\n\n    return this;\n  };\n\n  DataTrackSender.prototype.stop = function () {\n    this._dataChannels.forEach(function (dataChannel) {\n      return dataChannel.close();\n    });\n\n    this._clones.forEach(function (clone) {\n      return clone.stop();\n    });\n\n    _super.prototype.stop.call(this);\n  };\n\n  return DataTrackSender;\n}(DataTrackTransceiver);\n\nmodule.exports = DataTrackSender;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,oBAAoB,GAAGC,OAAO,CAAC,eAAD,CAApC;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,SAAD,CAAP,CAAmBC,QAApC;AAEA;;;;;;;;AAMA;AAAA;AAAA;EAA8BC;EAC5B;;;;;;;;EAMA,yBAAYC,iBAAZ,EAA+BC,cAA/B,EAA+CC,OAA/C,EAAsD;IAAtD,YACEC,kBAAML,QAAQ,EAAd,EAAkBE,iBAAlB,EAAqCC,cAArC,EAAqDC,OAArD,KAA6D,IAD/D;;IAEEE,MAAM,CAACC,gBAAP,CAAwBC,KAAxB,EAA8B;MAC5BC,OAAO,EAAE;QACPC,KAAK,EAAE,IAAIC,GAAJ;MADA,CADmB;MAI5BC,aAAa,EAAE;QACbF,KAAK,EAAE,IAAIC,GAAJ;MADM;IAJa,CAA9B;;EAQD;EAED;;;;;;;EAKAE,gDAAUC,KAAV,EAAe;IACb,KAAKL,OAAL,CAAaM,GAAb,CAAiBD,KAAjB;EACD,CAFD;EAIA;;;;;;EAIAD,kDAAYC,KAAZ,EAAiB;IACf,KAAKL,OAAL,CAAaO,MAAb,CAAoBF,KAApB;EACD,CAFD;EAIA;;;;;;;EAKAD,qDAAeI,WAAf,EAA0B;IACxB,KAAKL,aAAL,CAAmBG,GAAnB,CAAuBE,WAAvB;;IACA,OAAO,IAAP;EACD,CAHD;EAMA;;;;;;;;EAMAJ;IAAA;;IACE,IAAMC,KAAK,GAAG,IAAID,eAAJ,CACZ,KAAKX,iBADO,EAEZ,KAAKgB,cAFO,EAGZ,KAAKd,OAHO,CAAd;;IAIA,KAAKe,SAAL,CAAeL,KAAf;;IACAA,KAAK,CAACM,IAAN,CAAW,SAAX,EAAsB;MAAM,YAAI,CAACC,WAAL,CAAiBP,KAAjB;IAAuB,CAAnD;IACA,OAAOA,KAAP;EACD,CARD;EAUA;;;;;;;EAKAD,wDAAkBI,WAAlB,EAA6B;IAC3B,KAAKL,aAAL,CAAmBI,MAAnB,CAA0BC,WAA1B;;IACA,OAAO,IAAP;EACD,CAHD;EAKA;;;;;;;;EAMAJ,2CAAKS,IAAL,EAAS;IACP,KAAKV,aAAL,CAAmBW,OAAnB,CAA2B,uBAAW;MACpC,IAAI;QACFN,WAAW,CAACO,IAAZ,CAAiBF,IAAjB;MACD,CAFD,CAEE,OAAOG,KAAP,EAAc,CACd;MACD;IACF,CAND;;IAOA,KAAKhB,OAAL,CAAac,OAAb,CAAqB,iBAAK;MACxB,IAAI;QACFT,KAAK,CAACU,IAAN,CAAWF,IAAX;MACD,CAFD,CAEE,OAAOG,KAAP,EAAc,CACd;MACD;IACF,CAND;;IAOA,OAAO,IAAP;EACD,CAhBD;;EAkBAZ;IACE,KAAKD,aAAL,CAAmBW,OAAnB,CAA2B,uBAAW;MAAI,kBAAW,CAACG,KAAZ;IAAmB,CAA7D;;IACA,KAAKjB,OAAL,CAAac,OAAb,CAAqB,iBAAK;MAAI,YAAK,CAACI,IAAN;IAAY,CAA1C;;IACAtB,iBAAMsB,IAAN,CAAUC,IAAV,CAAU,IAAV;EACD,CAJD;;EAKF;AAAC,CAtGD,CAA8B9B,oBAA9B;;AAwGA+B,MAAM,CAACC,OAAP,GAAiBjB,eAAjB","names":["DataTrackTransceiver","require","makeUUID","__extends","maxPacketLifeTime","maxRetransmtis","ordered","_super","Object","defineProperties","_this","_clones","value","Set","_dataChannels","DataTrackSender","clone","add","delete","dataChannel","maxRetransmits","_addClone","once","removeClone","data","forEach","send","error","close","stop","call","module","exports"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/data/sender.js"],"sourcesContent":["'use strict';\n\nconst DataTrackTransceiver = require('./transceiver');\nconst makeUUID = require('../util').makeUUID;\n\n/**\n * A {@link DataTrackSender} represents a {@link DataTrackTransceiver} over\n * which data can be sent. Internally, it uses a collection of RTCDataChannels\n * to send data.\n * @extends DataTrackTransceiver\n */\nclass DataTrackSender extends DataTrackTransceiver {\n  /**\n   * Construct a {@link DataTrackSender}.\n   * @param {?number} maxPacketLifeTime\n   * @param {?number} maxRetransmits\n   * @param {boolean} ordered\n   */\n  constructor(maxPacketLifeTime, maxRetransmtis, ordered) {\n    super(makeUUID(), maxPacketLifeTime, maxRetransmtis, ordered);\n    Object.defineProperties(this, {\n      _clones: {\n        value: new Set()\n      },\n      _dataChannels: {\n        value: new Set()\n      }\n    });\n  }\n\n  /**\n   * Add a cloned {@link DataTrackSender}.\n   * @private\n   * @returns {void}\n   */\n  _addClone(clone) {\n    this._clones.add(clone);\n  }\n\n  /**\n   * Remove a cloned {@link DataTrackSender}.\n   * @returns {void}\n   */\n  removeClone(clone) {\n    this._clones.delete(clone);\n  }\n\n  /**\n   * Add an RTCDataChannel to the {@link DataTrackSender}.\n   * @param {RTCDataChannel} dataChannel\n   * @returns {this}\n   */\n  addDataChannel(dataChannel) {\n    this._dataChannels.add(dataChannel);\n    return this;\n  }\n\n\n  /**\n   * Return a new {@link DataTrackSender}. Any message sent over this\n   * {@link DataTrackSender} will also be sent over the clone. Whenever this\n   * {@link DataTrackSender} is stopped, so to will the clone.\n   * @returns {DataTrackSender}\n   */\n  clone() {\n    const clone = new DataTrackSender(\n      this.maxPacketLifeTime,\n      this.maxRetransmits,\n      this.ordered);\n    this._addClone(clone);\n    clone.once('stopped', () => this.removeClone(clone));\n    return clone;\n  }\n\n  /**\n   * Remove an RTCDataChannel from the {@link DataTrackSender}.\n   * @param {RTCDataChannel} dataChannel\n   * @returns {this}\n   */\n  removeDataChannel(dataChannel) {\n    this._dataChannels.delete(dataChannel);\n    return this;\n  }\n\n  /**\n   * Send data over the {@link DataTrackSender}. Internally, this calls\n   * <code>send</code> over each of the underlying RTCDataChannels.\n   * @param {string|Blob|ArrayBuffer|ArrayBufferView} data\n   * @returns {this}\n   */\n  send(data) {\n    this._dataChannels.forEach(dataChannel => {\n      try {\n        dataChannel.send(data);\n      } catch (error) {\n        // Do nothing.\n      }\n    });\n    this._clones.forEach(clone => {\n      try {\n        clone.send(data);\n      } catch (error) {\n        // Do nothing.\n      }\n    });\n    return this;\n  }\n\n  stop() {\n    this._dataChannels.forEach(dataChannel => dataChannel.close());\n    this._clones.forEach(clone => clone.stop());\n    super.stop();\n  }\n}\n\nmodule.exports = DataTrackSender;\n"]},"metadata":{},"sourceType":"script"}