{"ast":null,"code":"'use strict';\n/**\n * The {@link DocumentVisibilityMonitor} monitors the visibility state of the DOM\n * and executes the attached listeners in phase order when the DOM is visible.\n */\n\nvar DocumentVisibilityMonitor =\n/** @class */\nfunction () {\n  /**\n   * Constructor.\n   * @param {number} [nPhases=1] - the number of phases\n   */\n  function DocumentVisibilityMonitor(nPhases) {\n    var _this = this;\n\n    if (nPhases === void 0) {\n      nPhases = 1;\n    }\n\n    Object.defineProperties(this, {\n      _listeners: {\n        value: []\n      },\n      _onVisibilityChange: {\n        value: function value() {\n          _this._emitVisible(document.visibilityState === 'visible');\n        }\n      }\n    });\n\n    for (var i = 0; i < nPhases; i++) {\n      this._listeners.push([]);\n    }\n  }\n  /**\n   * clears the state.\n   */\n\n\n  DocumentVisibilityMonitor.prototype.clear = function () {\n    var nPhases = this._listeners.length;\n\n    for (var i = 0; i < nPhases; i++) {\n      this._listeners[i] = [];\n    }\n  };\n\n  DocumentVisibilityMonitor.prototype._listenerCount = function () {\n    return this._listeners.reduce(function (count, phaseListeners) {\n      return count + phaseListeners.length;\n    }, 0);\n  };\n  /**\n   * Call all the listeners. Makes sure that all listeners for a given phase\n   * are executed before calling the listeners of the next phase.\n   * @private\n   */\n\n\n  DocumentVisibilityMonitor.prototype._emitVisible = function (isVisible) {\n    var _this = this;\n\n    var promise = Promise.resolve();\n\n    var _loop_1 = function _loop_1(phase) {\n      promise = promise.then(function () {\n        return _this._emitVisiblePhase(phase, isVisible);\n      });\n    };\n\n    for (var phase = 1; phase <= this._listeners.length; phase++) {\n      _loop_1(phase);\n    }\n\n    return promise;\n  };\n  /**\n   * Call all the listeners for a given phase.\n   * @private\n   */\n\n\n  DocumentVisibilityMonitor.prototype._emitVisiblePhase = function (phase, isVisible) {\n    var phaseListeners = this._listeners[phase - 1];\n    return Promise.all(phaseListeners.map(function (listener) {\n      var ret = listener(isVisible);\n      return ret instanceof Promise ? ret : Promise.resolve(ret);\n    }));\n  };\n  /**\n   * Start listening to the DOM visibility state change.\n   * @private\n   */\n\n\n  DocumentVisibilityMonitor.prototype._start = function () {\n    document.addEventListener('visibilitychange', this._onVisibilityChange);\n  };\n  /**\n   * Stop listening to the DOM visibility state change.\n   * @private\n   */\n\n\n  DocumentVisibilityMonitor.prototype._stop = function () {\n    document.removeEventListener('visibilitychange', this._onVisibilityChange);\n  };\n  /**\n   * Listen for the DOM visibility changes at the given phase.\n   * @param {number} phase\n   * @param {function} listener\n   * @returns {this}\n   */\n\n\n  DocumentVisibilityMonitor.prototype.onVisibilityChange = function (phase, listener) {\n    if (typeof phase !== 'number' || phase <= 0 || phase > this._listeners.length) {\n      throw new Error('invalid phase: ', phase);\n    }\n\n    var phaseListeners = this._listeners[phase - 1];\n    phaseListeners.push(listener);\n\n    if (this._listenerCount() === 1) {\n      this._start();\n    }\n\n    return this;\n  };\n  /**\n   * Stop listening for the DOM visibility change at the given phase.\n   * @param {number} phase\n   * @param {function} listener\n   * @returns {this}\n   */\n\n\n  DocumentVisibilityMonitor.prototype.offVisibilityChange = function (phase, listener) {\n    if (typeof phase !== 'number' || phase <= 0 || phase > this._listeners.length) {\n      throw new Error('invalid phase: ', phase);\n    }\n\n    var phaseListeners = this._listeners[phase - 1];\n    var index = phaseListeners.indexOf(listener);\n\n    if (index !== -1) {\n      phaseListeners.splice(index, 1);\n\n      if (this._listenerCount() === 0) {\n        this._stop();\n      }\n    }\n\n    return this;\n  };\n\n  return DocumentVisibilityMonitor;\n}();\n\nmodule.exports = new DocumentVisibilityMonitor(2);","map":{"version":3,"mappings":"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","names":["nPhases","Object","defineProperties","_listeners","value","_onVisibilityChange","_this","_emitVisible","document","visibilityState","i","push","DocumentVisibilityMonitor","length","reduce","count","phaseListeners","isVisible","promise","Promise","resolve","phase","then","_emitVisiblePhase","all","map","ret","listener","addEventListener","removeEventListener","Error","_listenerCount","_start","index","indexOf","splice","_stop","module","exports"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/util/documentvisibilitymonitor.js"],"sourcesContent":["'use strict';\n\n/**\n * The {@link DocumentVisibilityMonitor} monitors the visibility state of the DOM\n * and executes the attached listeners in phase order when the DOM is visible.\n */\nclass DocumentVisibilityMonitor {\n  /**\n   * Constructor.\n   * @param {number} [nPhases=1] - the number of phases\n   */\n  constructor(nPhases = 1) {\n    Object.defineProperties(this, {\n      _listeners: {\n        value: []\n      },\n      _onVisibilityChange: {\n        value: () => {\n          this._emitVisible(document.visibilityState === 'visible');\n        }\n      }\n    });\n\n    for (let i = 0; i < nPhases; i++) {\n      this._listeners.push([]);\n    }\n  }\n\n\n  /**\n   * clears the state.\n   */\n  clear() {\n    const nPhases = this._listeners.length;\n    for (let i = 0; i < nPhases; i++) {\n      this._listeners[i] = [];\n    }\n  }\n\n  _listenerCount() {\n    return this._listeners.reduce((count, phaseListeners) => count + phaseListeners.length, 0);\n  }\n\n  /**\n   * Call all the listeners. Makes sure that all listeners for a given phase\n   * are executed before calling the listeners of the next phase.\n   * @private\n   */\n  _emitVisible(isVisible) {\n    let promise = Promise.resolve();\n    for (let phase = 1; phase <= this._listeners.length; phase++) {\n      promise = promise.then(() => this._emitVisiblePhase(phase, isVisible));\n    }\n    return promise;\n  }\n\n  /**\n   * Call all the listeners for a given phase.\n   * @private\n   */\n  _emitVisiblePhase(phase, isVisible) {\n    const phaseListeners = this._listeners[phase - 1];\n    return Promise.all(phaseListeners.map(listener => {\n      const ret = listener(isVisible);\n      return ret instanceof Promise ? ret : Promise.resolve(ret);\n    }));\n  }\n\n  /**\n   * Start listening to the DOM visibility state change.\n   * @private\n   */\n  _start() {\n    document.addEventListener('visibilitychange', this._onVisibilityChange);\n  }\n\n  /**\n   * Stop listening to the DOM visibility state change.\n   * @private\n   */\n  _stop() {\n    document.removeEventListener('visibilitychange', this._onVisibilityChange);\n  }\n\n  /**\n   * Listen for the DOM visibility changes at the given phase.\n   * @param {number} phase\n   * @param {function} listener\n   * @returns {this}\n   */\n  onVisibilityChange(phase, listener) {\n    if (typeof phase !== 'number' || phase <= 0 || phase > this._listeners.length) {\n      throw new Error('invalid phase: ', phase);\n    }\n    const phaseListeners = this._listeners[phase - 1];\n    phaseListeners.push(listener);\n    if (this._listenerCount() === 1) {\n      this._start();\n    }\n    return this;\n  }\n\n  /**\n   * Stop listening for the DOM visibility change at the given phase.\n   * @param {number} phase\n   * @param {function} listener\n   * @returns {this}\n   */\n  offVisibilityChange(phase, listener) {\n    if (typeof phase !== 'number' || phase <= 0 || phase > this._listeners.length) {\n      throw new Error('invalid phase: ', phase);\n    }\n\n    const phaseListeners = this._listeners[phase - 1];\n    const index = phaseListeners.indexOf(listener);\n    if (index !== -1) {\n      phaseListeners.splice(index, 1);\n      if (this._listenerCount() === 0) {\n        this._stop();\n      }\n    }\n    return this;\n  }\n}\n\nmodule.exports = new DocumentVisibilityMonitor(2);\n"]},"metadata":{},"sourceType":"script"}