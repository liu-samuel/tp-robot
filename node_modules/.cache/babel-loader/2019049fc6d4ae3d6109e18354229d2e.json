{"ast":null,"code":"/* globals webkitAudioContext, AudioContext */\n'use strict';\n\nvar NativeAudioContext = typeof AudioContext !== 'undefined' ? AudioContext : typeof webkitAudioContext !== 'undefined' ? webkitAudioContext : null;\n/**\n * @interface AudioContextFactoryOptions\n * @property {AudioContext} [AudioContext] - The AudioContext constructor\n */\n\n/**\n * {@link AudioContextFactory} ensures we construct at most one AudioContext\n * at a time, and that it is eventually closed when we no longer need it.\n * @property {AudioContextFactory} AudioContextFactory - The\n *   {@link AudioContextFactory} constructor\n */\n\nvar AudioContextFactory =\n/** @class */\nfunction () {\n  /**\n   * @param {AudioContextFactoryOptions} [options]\n   */\n  function AudioContextFactory(options) {\n    options = Object.assign({\n      AudioContext: NativeAudioContext\n    }, options);\n    Object.defineProperties(this, {\n      _AudioContext: {\n        value: options.AudioContext\n      },\n      _audioContext: {\n        value: null,\n        writable: true\n      },\n      _holders: {\n        value: new Set()\n      },\n      AudioContextFactory: {\n        enumerable: true,\n        value: AudioContextFactory\n      }\n    });\n  }\n  /**\n   * Each call to {@link AudioContextFactory#getOrCreate} should be paired with a\n   * call to {@link AudioContextFactory#release}. Calling this increments an\n   * internal reference count.\n   * @param {*} holder - The object to hold a reference to the AudioContext\n   * @returns {?AudioContext}\n   */\n\n\n  AudioContextFactory.prototype.getOrCreate = function (holder) {\n    if (!this._holders.has(holder)) {\n      this._holders.add(holder);\n\n      if (this._AudioContext && !this._audioContext) {\n        try {\n          this._audioContext = new this._AudioContext();\n        } catch (error) {// Do nothing;\n        }\n      }\n    }\n\n    return this._audioContext;\n  };\n  /**\n   * Decrement the internal reference count. If it reaches zero, close and destroy\n   * the AudioContext.\n   * @param {*} holder - The object that held a reference to the AudioContext\n   * @returns {void}\n   */\n\n\n  AudioContextFactory.prototype.release = function (holder) {\n    if (this._holders.has(holder)) {\n      this._holders.delete(holder);\n\n      if (!this._holders.size && this._audioContext) {\n        this._audioContext.close();\n\n        this._audioContext = null;\n      }\n    }\n  };\n\n  return AudioContextFactory;\n}();\n\nmodule.exports = new AudioContextFactory();","map":{"version":3,"mappings":"AAAA;AACA;;AAEA,IAAMA,kBAAkB,GAAG,OAAOC,YAAP,KAAwB,WAAxB,GACvBA,YADuB,GAEvB,OAAOC,kBAAP,KAA8B,WAA9B,GACEA,kBADF,GAEE,IAJN;AAMA;;;;;AAKA;;;;;;;AAMA;AAAA;AAAA;EACE;;;EAGA,6BAAYC,OAAZ,EAAmB;IACjBA,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc;MACtBJ,YAAY,EAAED;IADQ,CAAd,EAEPG,OAFO,CAAV;IAGAC,MAAM,CAACE,gBAAP,CAAwB,IAAxB,EAA8B;MAC5BC,aAAa,EAAE;QACbC,KAAK,EAAEL,OAAO,CAACF;MADF,CADa;MAI5BQ,aAAa,EAAE;QACbD,KAAK,EAAE,IADM;QAEbE,QAAQ,EAAE;MAFG,CAJa;MAQ5BC,QAAQ,EAAE;QACRH,KAAK,EAAE,IAAII,GAAJ;MADC,CARkB;MAW5BC,mBAAmB,EAAE;QACnBC,UAAU,EAAE,IADO;QAEnBN,KAAK,EAAEK;MAFY;IAXO,CAA9B;EAgBD;EAED;;;;;;;;;EAOAA,sDAAYE,MAAZ,EAAkB;IAChB,IAAI,CAAC,KAAKJ,QAAL,CAAcK,GAAd,CAAkBD,MAAlB,CAAL,EAAgC;MAC9B,KAAKJ,QAAL,CAAcM,GAAd,CAAkBF,MAAlB;;MACA,IAAI,KAAKR,aAAL,IAAsB,CAAC,KAAKE,aAAhC,EAA+C;QAC7C,IAAI;UACF,KAAKA,aAAL,GAAqB,IAAI,KAAKF,aAAT,EAArB;QACD,CAFD,CAEE,OAAOW,KAAP,EAAc,CACd;QACD;MACF;IACF;;IACD,OAAO,KAAKT,aAAZ;EACD,CAZD;EAcA;;;;;;;;EAMAI,kDAAQE,MAAR,EAAc;IACZ,IAAI,KAAKJ,QAAL,CAAcK,GAAd,CAAkBD,MAAlB,CAAJ,EAA+B;MAC7B,KAAKJ,QAAL,CAAcQ,MAAd,CAAqBJ,MAArB;;MACA,IAAI,CAAC,KAAKJ,QAAL,CAAcS,IAAf,IAAuB,KAAKX,aAAhC,EAA+C;QAC7C,KAAKA,aAAL,CAAmBY,KAAnB;;QACA,KAAKZ,aAAL,GAAqB,IAArB;MACD;IACF;EACF,CARD;;EASF;AAAC,CA9DD;;AAgEAa,MAAM,CAACC,OAAP,GAAiB,IAAIV,mBAAJ,EAAjB","names":["NativeAudioContext","AudioContext","webkitAudioContext","options","Object","assign","defineProperties","_AudioContext","value","_audioContext","writable","_holders","Set","AudioContextFactory","enumerable","holder","has","add","error","delete","size","close","module","exports"],"sources":["/home/samliu/repos/ieee/tp-robot/node_modules/twilio-video/lib/webaudio/audiocontext.js"],"sourcesContent":["/* globals webkitAudioContext, AudioContext */\n'use strict';\n\nconst NativeAudioContext = typeof AudioContext !== 'undefined'\n  ? AudioContext\n  : typeof webkitAudioContext !== 'undefined'\n    ? webkitAudioContext\n    : null;\n\n/**\n * @interface AudioContextFactoryOptions\n * @property {AudioContext} [AudioContext] - The AudioContext constructor\n */\n\n/**\n * {@link AudioContextFactory} ensures we construct at most one AudioContext\n * at a time, and that it is eventually closed when we no longer need it.\n * @property {AudioContextFactory} AudioContextFactory - The\n *   {@link AudioContextFactory} constructor\n */\nclass AudioContextFactory {\n  /**\n   * @param {AudioContextFactoryOptions} [options]\n   */\n  constructor(options) {\n    options = Object.assign({\n      AudioContext: NativeAudioContext\n    }, options);\n    Object.defineProperties(this, {\n      _AudioContext: {\n        value: options.AudioContext\n      },\n      _audioContext: {\n        value: null,\n        writable: true\n      },\n      _holders: {\n        value: new Set()\n      },\n      AudioContextFactory: {\n        enumerable: true,\n        value: AudioContextFactory\n      }\n    });\n  }\n\n  /**\n   * Each call to {@link AudioContextFactory#getOrCreate} should be paired with a\n   * call to {@link AudioContextFactory#release}. Calling this increments an\n   * internal reference count.\n   * @param {*} holder - The object to hold a reference to the AudioContext\n   * @returns {?AudioContext}\n   */\n  getOrCreate(holder) {\n    if (!this._holders.has(holder)) {\n      this._holders.add(holder);\n      if (this._AudioContext && !this._audioContext) {\n        try {\n          this._audioContext = new this._AudioContext();\n        } catch (error) {\n          // Do nothing;\n        }\n      }\n    }\n    return this._audioContext;\n  }\n\n  /**\n   * Decrement the internal reference count. If it reaches zero, close and destroy\n   * the AudioContext.\n   * @param {*} holder - The object that held a reference to the AudioContext\n   * @returns {void}\n   */\n  release(holder) {\n    if (this._holders.has(holder)) {\n      this._holders.delete(holder);\n      if (!this._holders.size && this._audioContext) {\n        this._audioContext.close();\n        this._audioContext = null;\n      }\n    }\n  }\n}\n\nmodule.exports = new AudioContextFactory();\n"]},"metadata":{},"sourceType":"script"}