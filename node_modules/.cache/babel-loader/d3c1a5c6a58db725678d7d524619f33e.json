{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar DefaultRecordingSignaling = require('./recording');\n\nvar StateMachine = require('../statemachine');\n\nvar DefaultTimeout = require('../util/timeout');\n\nvar buildLogLevels = require('../util').buildLogLevels;\n\nvar DEFAULT_LOG_LEVEL = require('../util/constants').DEFAULT_LOG_LEVEL;\n\nvar Log = require('../util/log');\n\nvar _a = require('../util/twilio-video-errors'),\n    MediaConnectionError = _a.MediaConnectionError,\n    MediaDTLSTransportFailedError = _a.MediaDTLSTransportFailedError,\n    SignalingConnectionDisconnectedError = _a.SignalingConnectionDisconnectedError;\n\nvar nInstances = 0;\n/*\nRoomSignaling States\n-----------------------\n\n    +-----------+     +--------------+\n    |           |     |              |\n    | connected |---->| disconnected |\n    |           |     |              |\n    +-----------+     +--------------+\n          |  ^               ^\n          |  |               |\n          |  |   +--------------+\n          |  +---|              |\n          |      | reconnecting |\n          +----->|              |\n                 +--------------+\n\n*/\n\nvar states = {\n  connected: ['reconnecting', 'disconnected'],\n  reconnecting: ['connected', 'disconnected'],\n  disconnected: []\n};\n/**\n * A {@link Room} implementation\n * @extends StateMachine\n * @property {RTCPeerConnectionState} connectionState\n * @property {?Participant.SID} dominantSpeakerSid\n * @property {ParticipantSignaling} localParticipant\n * @property {RTCIceConnectionState} iceConnectionState\n * @property {string} name\n * @property {Map<string, RemoteParticipantSignaling>} participants\n * @property {RecordingSignaling} recording\n * @property {Room.SID} sid\n * @property {string} state - \"connected\", \"reconnecting\", or \"disconnected\"\n * @property {string} signalingConnectionState - \"connected\",\n *   \"reconnecting\", or \"disconnected\"\n * @emits RoomSignaling#connectionStateChanged\n * @emits RoomSignaling#dominantSpeakerChanged\n * @emits RoomSignaling#iceConnectionStateChanged\n * @emits RoomSignaling#signalingConnectionStateChanged\n */\n\nvar RoomSignaling =\n/** @class */\nfunction (_super) {\n  __extends(RoomSignaling, _super);\n  /**\n   * Construct a {@link RoomSignaling}.\n   * @param {ParticipantSignaling} localParticipant\n   * @param {Room.SID} sid\n   * @param {string} name\n   * @param {object} options\n   */\n\n\n  function RoomSignaling(localParticipant, sid, name, options) {\n    var _this = this;\n\n    options = Object.assign({\n      logLevel: DEFAULT_LOG_LEVEL,\n      RecordingSignaling: DefaultRecordingSignaling,\n      Timeout: DefaultTimeout\n    }, options);\n    var logLevels = buildLogLevels(options.logLevel);\n    _this = _super.call(this, 'connected', states) || this;\n    var RecordingSignaling = options.RecordingSignaling;\n    var sessionTimeout = new options.Timeout(function () {\n      _this._disconnect(_this._reconnectingError);\n    }, options.sessionTimeout, false);\n    Object.defineProperties(_this, {\n      _instanceId: {\n        value: nInstances++\n      },\n      _log: {\n        value: options.log ? options.log.createLog('default', _this) : new Log('default', _this, logLevels, options.loggerName)\n      },\n      _mediaConnectionIsReconnecting: {\n        writable: true,\n        value: false\n      },\n      _options: {\n        value: options\n      },\n      _reconnectingError: {\n        value: null,\n        writable: true\n      },\n      _sessionTimeout: {\n        value: sessionTimeout\n      },\n      dominantSpeakerSid: {\n        enumerable: true,\n        value: null,\n        writable: true\n      },\n      localParticipant: {\n        enumerable: true,\n        value: localParticipant\n      },\n      name: {\n        enumerable: true,\n        value: name\n      },\n      participants: {\n        enumerable: true,\n        value: new Map()\n      },\n      recording: {\n        enumerable: true,\n        value: new RecordingSignaling()\n      },\n      sid: {\n        enumerable: true,\n        value: sid\n      }\n    });\n\n    _this.on('connectionStateChanged', function () {\n      if (_this.connectionState === 'failed' && !['disconnected', 'failed'].includes(_this.iceConnectionState)) {\n        _this._disconnect(new MediaDTLSTransportFailedError());\n      }\n    });\n\n    _this.on('iceConnectionStateChanged', function () {\n      return maybeUpdateState(_this);\n    });\n\n    _this.on('signalingConnectionStateChanged', function () {\n      return maybeUpdateState(_this);\n    }); // NOTE(mmalavalli): In case \"iceConnectionState\" is already failed, update\n    // the RoomSignaling state. setTimeout() ensures that the state is updated\n    // after RoomV2's constructor is fully executed, thereby making \"signalingConnectionState\"\n    // available here.\n\n\n    setTimeout(function () {\n      return maybeUpdateState(_this);\n    });\n    return _this;\n  }\n  /**\n   * Disconnect, possibly with an Error.\n   * @private\n   * @param {Error} [error]\n   * @returns {boolean}\n   */\n\n\n  RoomSignaling.prototype._disconnect = function (error) {\n    if (this.state !== 'disconnected') {\n      this.preempt('disconnected', null, [error]);\n      return true;\n    }\n\n    return false;\n  };\n\n  RoomSignaling.prototype.toString = function () {\n    return \"[RoomSignaling #\" + this._instanceId + \": \" + (this.localParticipant ? this.localParticipant.sid : 'null') + \"]\";\n  };\n  /**\n   * Connect {@link RemoteParticipantSignaling} to the {@link RoomSignaling}.\n   * @param {RemoteParticipantSignaling} participant\n   * @returns {boolean}\n   */\n\n\n  RoomSignaling.prototype.connectParticipant = function (participant) {\n    var self = this;\n\n    if (participant.state === 'disconnected') {\n      return false;\n    }\n\n    if (this.participants.has(participant.sid)) {\n      return false;\n    }\n\n    this.participants.set(participant.sid, participant);\n    participant.on('stateChanged', function stateChanged(state) {\n      if (state === 'disconnected') {\n        participant.removeListener('stateChanged', stateChanged);\n        self.participants.delete(participant.sid);\n        self.emit('participantDisconnected', participant);\n      }\n    });\n    this.emit('participantConnected', participant);\n    return true;\n  };\n  /**\n   * Disconnect.\n   * @returns {boolean}\n   */\n\n\n  RoomSignaling.prototype.disconnect = function () {\n    return this._disconnect();\n  };\n  /**\n   * Set (or unset) the Dominant Speaker.\n   * @param {?Participant.SID} dominantSpeakerSid\n   * @returns {void}\n   */\n\n\n  RoomSignaling.prototype.setDominantSpeaker = function (dominantSpeakerSid) {\n    this.dominantSpeakerSid = dominantSpeakerSid;\n    this.emit('dominantSpeakerChanged');\n  };\n\n  return RoomSignaling;\n}(StateMachine);\n/**\n * @event RoomSignaling#event:connectionStateChanged\n */\n\n/**\n * @event RoomSignaling#event:dominantSpeakerChanged\n */\n\n/**\n * {@link RemoteParticipantSignaling} connected to the {@link RoomSignaling}.\n * @event RoomSignaling#event:participantConnected\n * @param {RemoteParticipantSignaling} participantSignaling\n */\n\n/**\n * {@link RemoteParticipantSignaling} disconnected from the {@link RoomSignaling}.\n * @event RoomSignaling#event:participantDisconnected\n * @param {RemoteParticipantSignaling} participantSignaling\n */\n\n/**\n * @event RoomSignaling#event:iceConnectionStateChanged\n */\n\n/**\n * @event RoomSignaling#event:signalingConnectionStateChanged\n */\n\n/**\n * Maybe update the {@link RoomSignaling} state.\n * @param {RoomSignaling} roomSignaling\n */\n\n\nfunction maybeUpdateState(roomSignaling) {\n  if (roomSignaling.state === 'disconnected' || roomSignaling.signalingConnectionState === 'disconnected') {\n    roomSignaling._sessionTimeout.clear();\n\n    return;\n  }\n\n  var newState;\n\n  if (roomSignaling.signalingConnectionState === 'reconnecting') {\n    newState = roomSignaling.signalingConnectionState;\n  } else if (roomSignaling.iceConnectionState === 'failed') {\n    roomSignaling._mediaConnectionIsReconnecting = true;\n    newState = 'reconnecting';\n  } else if (roomSignaling.iceConnectionState === 'new' || roomSignaling.iceConnectionState === 'checking') {\n    newState = roomSignaling._mediaConnectionIsReconnecting ? 'reconnecting' : 'connected';\n  } else {\n    roomSignaling._mediaConnectionIsReconnecting = false;\n    roomSignaling._reconnectingError = null;\n\n    roomSignaling._sessionTimeout.clear();\n\n    newState = 'connected';\n  }\n\n  if (newState === roomSignaling.state) {\n    return;\n  }\n\n  if (newState === 'reconnecting') {\n    roomSignaling._reconnectingError = roomSignaling.signalingConnectionState === 'reconnecting' ? new SignalingConnectionDisconnectedError() : new MediaConnectionError();\n\n    roomSignaling._sessionTimeout.start();\n\n    roomSignaling.preempt(newState, null, [roomSignaling._reconnectingError]);\n  } else {\n    roomSignaling.preempt(newState);\n  }\n}\n\nmodule.exports = RoomSignaling;","map":{"version":3,"mappings":"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","names":["DefaultRecordingSignaling","require","StateMachine","DefaultTimeout","buildLogLevels","DEFAULT_LOG_LEVEL","Log","MediaConnectionError","MediaDTLSTransportFailedError","SignalingConnectionDisconnectedError","nInstances","states","connected","reconnecting","disconnected","__extends","localParticipant","sid","name","options","Object","assign","logLevel","RecordingSignaling","Timeout","logLevels","_this","sessionTimeout","_disconnect","_reconnectingError","defineProperties","_instanceId","value","_log","log","createLog","loggerName","_mediaConnectionIsReconnecting","writable","_options","_sessionTimeout","dominantSpeakerSid","enumerable","participants","Map","recording","on","connectionState","includes","iceConnectionState","setTimeout","RoomSignaling","error","state","preempt","participant","self","has","set","stateChanged","removeListener","delete","emit","maybeUpdateState","roomSignaling","signalingConnectionState","clear","newState","start","module","exports"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/signaling/room.js"],"sourcesContent":["'use strict';\n\nconst DefaultRecordingSignaling = require('./recording');\nconst StateMachine = require('../statemachine');\nconst DefaultTimeout = require('../util/timeout');\nconst { buildLogLevels } = require('../util');\nconst { DEFAULT_LOG_LEVEL } = require('../util/constants');\nconst Log = require('../util/log');\n\nconst {\n  MediaConnectionError,\n  MediaDTLSTransportFailedError,\n  SignalingConnectionDisconnectedError\n} = require('../util/twilio-video-errors');\n\nlet nInstances = 0;\n\n/*\nRoomSignaling States\n-----------------------\n\n    +-----------+     +--------------+\n    |           |     |              |\n    | connected |---->| disconnected |\n    |           |     |              |\n    +-----------+     +--------------+\n          |  ^               ^\n          |  |               |\n          |  |   +--------------+\n          |  +---|              |\n          |      | reconnecting |\n          +----->|              |\n                 +--------------+\n\n*/\n\nconst states = {\n  connected: [\n    'reconnecting',\n    'disconnected'\n  ],\n  reconnecting: [\n    'connected',\n    'disconnected'\n  ],\n  disconnected: []\n};\n\n/**\n * A {@link Room} implementation\n * @extends StateMachine\n * @property {RTCPeerConnectionState} connectionState\n * @property {?Participant.SID} dominantSpeakerSid\n * @property {ParticipantSignaling} localParticipant\n * @property {RTCIceConnectionState} iceConnectionState\n * @property {string} name\n * @property {Map<string, RemoteParticipantSignaling>} participants\n * @property {RecordingSignaling} recording\n * @property {Room.SID} sid\n * @property {string} state - \"connected\", \"reconnecting\", or \"disconnected\"\n * @property {string} signalingConnectionState - \"connected\",\n *   \"reconnecting\", or \"disconnected\"\n * @emits RoomSignaling#connectionStateChanged\n * @emits RoomSignaling#dominantSpeakerChanged\n * @emits RoomSignaling#iceConnectionStateChanged\n * @emits RoomSignaling#signalingConnectionStateChanged\n */\nclass RoomSignaling extends StateMachine {\n  /**\n   * Construct a {@link RoomSignaling}.\n   * @param {ParticipantSignaling} localParticipant\n   * @param {Room.SID} sid\n   * @param {string} name\n   * @param {object} options\n   */\n  constructor(localParticipant, sid, name, options) {\n    options = Object.assign({\n      logLevel: DEFAULT_LOG_LEVEL,\n      RecordingSignaling: DefaultRecordingSignaling,\n      Timeout: DefaultTimeout\n    }, options);\n\n    const logLevels = buildLogLevels(options.logLevel);\n\n    super('connected', states);\n\n    const RecordingSignaling = options.RecordingSignaling;\n\n    const sessionTimeout = new options.Timeout(() => {\n      this._disconnect(this._reconnectingError);\n    }, options.sessionTimeout, false);\n\n    Object.defineProperties(this, {\n      _instanceId: {\n        value: nInstances++\n      },\n      _log: {\n        value: options.log\n          ? options.log.createLog('default', this)\n          : new Log('default', this, logLevels, options.loggerName)\n      },\n      _mediaConnectionIsReconnecting: {\n        writable: true,\n        value: false\n      },\n      _options: {\n        value: options\n      },\n      _reconnectingError: {\n        value: null,\n        writable: true\n      },\n      _sessionTimeout: {\n        value: sessionTimeout\n      },\n      dominantSpeakerSid: {\n        enumerable: true,\n        value: null,\n        writable: true\n      },\n      localParticipant: {\n        enumerable: true,\n        value: localParticipant\n      },\n      name: {\n        enumerable: true,\n        value: name\n      },\n      participants: {\n        enumerable: true,\n        value: new Map()\n      },\n      recording: {\n        enumerable: true,\n        value: new RecordingSignaling()\n      },\n      sid: {\n        enumerable: true,\n        value: sid\n      }\n    });\n\n    this.on('connectionStateChanged', () => {\n      if (this.connectionState === 'failed'\n        && !['disconnected', 'failed'].includes(this.iceConnectionState)) {\n        this._disconnect(new MediaDTLSTransportFailedError());\n      }\n    });\n\n    this.on('iceConnectionStateChanged', () => maybeUpdateState(this));\n    this.on('signalingConnectionStateChanged', () => maybeUpdateState(this));\n\n    // NOTE(mmalavalli): In case \"iceConnectionState\" is already failed, update\n    // the RoomSignaling state. setTimeout() ensures that the state is updated\n    // after RoomV2's constructor is fully executed, thereby making \"signalingConnectionState\"\n    // available here.\n    setTimeout(() => maybeUpdateState(this));\n  }\n\n  /**\n   * Disconnect, possibly with an Error.\n   * @private\n   * @param {Error} [error]\n   * @returns {boolean}\n   */\n  _disconnect(error) {\n    if (this.state !== 'disconnected') {\n      this.preempt('disconnected', null, [error]);\n      return true;\n    }\n    return false;\n  }\n\n  toString() {\n    return `[RoomSignaling #${this._instanceId}: ${this.localParticipant ? this.localParticipant.sid : 'null'}]`;\n  }\n\n  /**\n   * Connect {@link RemoteParticipantSignaling} to the {@link RoomSignaling}.\n   * @param {RemoteParticipantSignaling} participant\n   * @returns {boolean}\n   */\n  connectParticipant(participant) {\n    const self = this;\n\n    if (participant.state === 'disconnected') {\n      return false;\n    }\n\n    if (this.participants.has(participant.sid)) {\n      return false;\n    }\n\n    this.participants.set(participant.sid, participant);\n\n    participant.on('stateChanged', function stateChanged(state) {\n      if (state === 'disconnected') {\n        participant.removeListener('stateChanged', stateChanged);\n        self.participants.delete(participant.sid);\n        self.emit('participantDisconnected', participant);\n      }\n    });\n\n    this.emit('participantConnected', participant);\n\n    return true;\n  }\n\n  /**\n   * Disconnect.\n   * @returns {boolean}\n   */\n  disconnect() {\n    return this._disconnect();\n  }\n\n  /**\n   * Set (or unset) the Dominant Speaker.\n   * @param {?Participant.SID} dominantSpeakerSid\n   * @returns {void}\n   */\n  setDominantSpeaker(dominantSpeakerSid) {\n    this.dominantSpeakerSid = dominantSpeakerSid;\n    this.emit('dominantSpeakerChanged');\n  }\n}\n\n/**\n * @event RoomSignaling#event:connectionStateChanged\n */\n\n/**\n * @event RoomSignaling#event:dominantSpeakerChanged\n */\n\n/**\n * {@link RemoteParticipantSignaling} connected to the {@link RoomSignaling}.\n * @event RoomSignaling#event:participantConnected\n * @param {RemoteParticipantSignaling} participantSignaling\n */\n\n/**\n * {@link RemoteParticipantSignaling} disconnected from the {@link RoomSignaling}.\n * @event RoomSignaling#event:participantDisconnected\n * @param {RemoteParticipantSignaling} participantSignaling\n */\n\n/**\n * @event RoomSignaling#event:iceConnectionStateChanged\n */\n\n/**\n * @event RoomSignaling#event:signalingConnectionStateChanged\n */\n\n/**\n * Maybe update the {@link RoomSignaling} state.\n * @param {RoomSignaling} roomSignaling\n */\nfunction maybeUpdateState(roomSignaling) {\n  if (roomSignaling.state === 'disconnected' || roomSignaling.signalingConnectionState === 'disconnected') {\n    roomSignaling._sessionTimeout.clear();\n    return;\n  }\n\n  let newState;\n\n  if (roomSignaling.signalingConnectionState === 'reconnecting') {\n    newState = roomSignaling.signalingConnectionState;\n  } else if (roomSignaling.iceConnectionState === 'failed') {\n    roomSignaling._mediaConnectionIsReconnecting = true;\n    newState = 'reconnecting';\n  } else if (roomSignaling.iceConnectionState === 'new' || roomSignaling.iceConnectionState === 'checking') {\n    newState = roomSignaling._mediaConnectionIsReconnecting ? 'reconnecting' : 'connected';\n  } else {\n    roomSignaling._mediaConnectionIsReconnecting = false;\n    roomSignaling._reconnectingError = null;\n    roomSignaling._sessionTimeout.clear();\n    newState = 'connected';\n  }\n\n  if (newState === roomSignaling.state) {\n    return;\n  }\n\n  if (newState === 'reconnecting') {\n    roomSignaling._reconnectingError = roomSignaling.signalingConnectionState === 'reconnecting'\n      ? new SignalingConnectionDisconnectedError()\n      : new MediaConnectionError();\n    roomSignaling._sessionTimeout.start();\n    roomSignaling.preempt(newState, null, [roomSignaling._reconnectingError]);\n  } else {\n    roomSignaling.preempt(newState);\n  }\n}\n\nmodule.exports = RoomSignaling;\n"]},"metadata":{},"sourceType":"script"}