{"ast":null,"code":"'use strict';\n\nvar defer = require('./').defer;\n/**\n * This is a pair of Deferreds that are set whenever local media is muted and\n * resolved whenever local media is unmuted/ended and restarted if necessary.\n */\n\n\nvar LocalMediaRestartDeferreds =\n/** @class */\nfunction () {\n  /**\n   * Constructor.\n   */\n  function LocalMediaRestartDeferreds() {\n    Object.defineProperties(this, {\n      _audio: {\n        value: defer(),\n        writable: true\n      },\n      _video: {\n        value: defer(),\n        writable: true\n      }\n    }); // Initially, resolve both the Deferreds.\n\n    this._audio.resolve();\n\n    this._video.resolve();\n  }\n  /**\n   * Resolve the Deferred for audio or video.\n   * @param {'audio'|'video'} kind\n   */\n\n\n  LocalMediaRestartDeferreds.prototype.resolveDeferred = function (kind) {\n    if (kind === 'audio') {\n      this._audio.resolve();\n    } else {\n      this._video.resolve();\n    }\n  };\n  /**\n   * Start the Deferred for audio or video.\n   * @param {'audio' | 'video'} kind\n   */\n\n\n  LocalMediaRestartDeferreds.prototype.startDeferred = function (kind) {\n    if (kind === 'audio') {\n      this._audio = defer();\n    } else {\n      this._video = defer();\n    }\n  };\n  /**\n   * Wait until the Deferred for audio or video is resolved.\n   * @param {'audio'|'video'} kind\n   * @returns {Promise<void>}\n   */\n\n\n  LocalMediaRestartDeferreds.prototype.whenResolved = function (kind) {\n    return kind === 'audio' ? this._audio.promise : this._video.promise;\n  };\n\n  return LocalMediaRestartDeferreds;\n}();\n\nmodule.exports = new LocalMediaRestartDeferreds();","map":{"version":3,"mappings":"AAAA;;AAEQ,SAAK,GAAKA,OAAO,CAAC,IAAD,CAAP,CAAaC,KAAvB;AAER;;;;;;AAIA;AAAA;AAAA;EACE;;;EAGA;IACEC,MAAM,CAACC,gBAAP,CAAwB,IAAxB,EAA8B;MAC5BC,MAAM,EAAE;QACNC,KAAK,EAAEJ,KAAK,EADN;QAENK,QAAQ,EAAE;MAFJ,CADoB;MAK5BC,MAAM,EAAE;QACNF,KAAK,EAAEJ,KAAK,EADN;QAENK,QAAQ,EAAE;MAFJ;IALoB,CAA9B,EADF,CAYE;;IACA,KAAKF,MAAL,CAAYI,OAAZ;;IACA,KAAKD,MAAL,CAAYC,OAAZ;EACD;EAED;;;;;;EAIAC,iEAAgBC,IAAhB,EAAoB;IAClB,IAAIA,IAAI,KAAK,OAAb,EAAsB;MACpB,KAAKN,MAAL,CAAYI,OAAZ;IACD,CAFD,MAEO;MACL,KAAKD,MAAL,CAAYC,OAAZ;IACD;EACF,CAND;EAQA;;;;;;EAIAC,+DAAcC,IAAd,EAAkB;IAChB,IAAIA,IAAI,KAAK,OAAb,EAAsB;MACpB,KAAKN,MAAL,GAAcH,KAAK,EAAnB;IACD,CAFD,MAEO;MACL,KAAKM,MAAL,GAAcN,KAAK,EAAnB;IACD;EACF,CAND;EAQA;;;;;;;EAKAQ,8DAAaC,IAAb,EAAiB;IACf,OAAOA,IAAI,KAAK,OAAT,GAAmB,KAAKN,MAAL,CAAYO,OAA/B,GAAyC,KAAKJ,MAAL,CAAYI,OAA5D;EACD,CAFD;;EAGF;AAAC,CArDD;;AAuDAC,MAAM,CAACC,OAAP,GAAiB,IAAIJ,0BAAJ,EAAjB","names":["require","defer","Object","defineProperties","_audio","value","writable","_video","resolve","LocalMediaRestartDeferreds","kind","promise","module","exports"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/util/localmediarestartdeferreds.js"],"sourcesContent":["'use strict';\n\nconst { defer } = require('./');\n\n/**\n * This is a pair of Deferreds that are set whenever local media is muted and\n * resolved whenever local media is unmuted/ended and restarted if necessary.\n */\nclass LocalMediaRestartDeferreds {\n  /**\n   * Constructor.\n   */\n  constructor() {\n    Object.defineProperties(this, {\n      _audio: {\n        value: defer(),\n        writable: true\n      },\n      _video: {\n        value: defer(),\n        writable: true\n      }\n    });\n\n    // Initially, resolve both the Deferreds.\n    this._audio.resolve();\n    this._video.resolve();\n  }\n\n  /**\n   * Resolve the Deferred for audio or video.\n   * @param {'audio'|'video'} kind\n   */\n  resolveDeferred(kind) {\n    if (kind === 'audio') {\n      this._audio.resolve();\n    } else {\n      this._video.resolve();\n    }\n  }\n\n  /**\n   * Start the Deferred for audio or video.\n   * @param {'audio' | 'video'} kind\n   */\n  startDeferred(kind) {\n    if (kind === 'audio') {\n      this._audio = defer();\n    } else {\n      this._video = defer();\n    }\n  }\n\n  /**\n   * Wait until the Deferred for audio or video is resolved.\n   * @param {'audio'|'video'} kind\n   * @returns {Promise<void>}\n   */\n  whenResolved(kind) {\n    return kind === 'audio' ? this._audio.promise : this._video.promise;\n  }\n}\n\nmodule.exports = new LocalMediaRestartDeferreds();\n"]},"metadata":{},"sourceType":"script"}