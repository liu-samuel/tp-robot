{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar DEFAULT_VIDEO_PROCESSOR_STATS_INTERVAL_MS = require('../../util/constants').DEFAULT_VIDEO_PROCESSOR_STATS_INTERVAL_MS;\n/**\n * VideoProcessorEventObserver listens to {@link VideoProcessor} related events\n * and re-emits them as a generic event with some additional information.\n * @extends EventEmitter\n * @emits VideoProcessorEventObserver#event\n */\n\n\nvar VideoProcessorEventObserver =\n/** @class */\nfunction (_super) {\n  __extends(VideoProcessorEventObserver, _super);\n  /**\n   * Constructor.\n   * @param {Log} log\n   */\n\n\n  function VideoProcessorEventObserver(log) {\n    var _this = _super.call(this) || this;\n\n    Object.defineProperties(_this, {\n      _lastStatsSaveTime: {\n        value: null,\n        writable: true\n      },\n      _lastStatsPublishTime: {\n        value: null,\n        writable: true\n      },\n      _log: {\n        value: log\n      },\n      _processorInfo: {\n        value: null,\n        writable: true\n      },\n      _stats: {\n        value: null,\n        writable: true\n      }\n    });\n\n    _this.on('add', function (info) {\n      _this._lastStatsSaveTime = Date.now();\n      _this._lastStatsPublishTime = Date.now();\n      _this._processorInfo = info;\n      _this._stats = [];\n\n      _this._reemitEvent('add', _this._getEventData());\n    });\n\n    _this.on('remove', function () {\n      var data = _this._getEventData();\n\n      _this._lastStatsSaveTime = null;\n      _this._lastStatsPublishTime = null;\n      _this._processorInfo = null;\n      _this._stats = null;\n\n      _this._reemitEvent('remove', data);\n    });\n\n    _this.on('start', function () {\n      _this._reemitEvent('start', _this._getEventData());\n    });\n\n    _this.on('stop', function (message) {\n      _this._reemitEvent('stop', Object.assign({\n        message: message\n      }, _this._getEventData()));\n    });\n\n    _this.on('stats', function () {\n      return _this._maybeEmitStats();\n    });\n\n    return _this;\n  }\n  /**\n   * @private\n   */\n\n\n  VideoProcessorEventObserver.prototype._getEventData = function () {\n    if (!this._processorInfo) {\n      return {};\n    }\n\n    var _a = this._processorInfo,\n        processor = _a.processor,\n        captureHeight = _a.captureHeight,\n        captureWidth = _a.captureWidth,\n        inputFrameRate = _a.inputFrameRate,\n        isRemoteVideoTrack = _a.isRemoteVideoTrack;\n    var data = {\n      captureHeight: captureHeight,\n      captureWidth: captureWidth,\n      inputFrameRate: inputFrameRate,\n      isRemoteVideoTrack: isRemoteVideoTrack\n    };\n    data.name = processor._name || 'VideoProcessor';\n    ['assetsPath', 'blurFilterRadius', 'fitType', 'isSimdEnabled', 'maskBlurRadius', 'version'].forEach(function (prop) {\n      var val = processor[\"_\" + prop];\n\n      if (typeof val !== 'undefined') {\n        data[prop] = val;\n      }\n    });\n    Object.keys(data).forEach(function (prop) {\n      var val = data[prop];\n\n      if (typeof val === 'boolean') {\n        data[prop] = val ? 'true' : 'false';\n      }\n    });\n    return data;\n  };\n  /**\n   * Save stats every second. If a specific time interval has elapsed,\n   * the stats event will be emitted\n   * @private\n   */\n\n\n  VideoProcessorEventObserver.prototype._maybeEmitStats = function () {\n    if (!this._stats || !this._processorInfo) {\n      return;\n    }\n\n    var benchmark = this._processorInfo.processor._benchmark;\n\n    if (!benchmark) {\n      return;\n    }\n\n    var now = Date.now();\n\n    if (now - this._lastStatsSaveTime < 1000) {\n      return;\n    }\n\n    var entry = {\n      outputFrameRate: benchmark.getRate('totalProcessingDelay')\n    };\n    ['captureFrameDelay', 'imageCompositionDelay', 'inputImageResizeDelay', 'processFrameDelay', 'segmentationDelay'].forEach(function (name) {\n      entry[name] = benchmark.getAverageDelay(name);\n    });\n    this._lastStatsSaveTime = now;\n\n    this._stats.push(entry);\n\n    if (now - this._lastStatsPublishTime < DEFAULT_VIDEO_PROCESSOR_STATS_INTERVAL_MS) {\n      return;\n    }\n\n    this._lastStatsPublishTime = now;\n\n    var stats = this._stats.splice(0);\n\n    var averages = stats.reduce(function (averages, current, n) {\n      Object.keys(entry).forEach(function (name) {\n        if (!averages[name]) {\n          averages[name] = 0;\n        }\n\n        averages[name] = (averages[name] * n + current[name]) / (n + 1);\n      });\n      return averages;\n    }, {});\n    Object.keys(averages).forEach(function (name) {\n      averages[name] = parseFloat(averages[name].toFixed(2));\n    });\n\n    this._reemitEvent('stats', Object.assign({}, averages, this._getEventData()));\n  };\n  /**\n   * @private\n   */\n\n\n  VideoProcessorEventObserver.prototype._reemitEvent = function (name, data) {\n    this._log.debug(\"VideoProcessor:\" + name, data);\n\n    this.emit('event', {\n      name: name,\n      data: data\n    });\n  };\n\n  return VideoProcessorEventObserver;\n}(EventEmitter);\n\nmodule.exports = VideoProcessorEventObserver;","map":{"version":3,"mappings":"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","names":["require","EventEmitter","DEFAULT_VIDEO_PROCESSOR_STATS_INTERVAL_MS","__extends","log","_super","Object","defineProperties","_this","_lastStatsSaveTime","value","writable","_lastStatsPublishTime","_log","_processorInfo","_stats","on","Date","now","info","_reemitEvent","_getEventData","data","assign","message","_maybeEmitStats","VideoProcessorEventObserver","processor","captureHeight","captureWidth","inputFrameRate","isRemoteVideoTrack","name","_name","forEach","val","prop","keys","benchmark","_benchmark","entry","outputFrameRate","getRate","getAverageDelay","push","stats","splice","averages","reduce","current","n","parseFloat","toFixed","debug","emit","module","exports"],"sources":["/home/samliu/repos/ieee/tp-robot/node_modules/twilio-video/lib/media/track/videoprocessoreventobserver.js"],"sourcesContent":["'use strict';\n\nconst { EventEmitter } = require('events');\nconst { DEFAULT_VIDEO_PROCESSOR_STATS_INTERVAL_MS } = require('../../util/constants');\n\n/**\n * VideoProcessorEventObserver listens to {@link VideoProcessor} related events\n * and re-emits them as a generic event with some additional information.\n * @extends EventEmitter\n * @emits VideoProcessorEventObserver#event\n */\nclass VideoProcessorEventObserver extends EventEmitter {\n\n  /**\n   * Constructor.\n   * @param {Log} log\n   */\n  constructor(log) {\n    super();\n\n    Object.defineProperties(this, {\n      _lastStatsSaveTime: {\n        value: null,\n        writable: true\n      },\n      _lastStatsPublishTime: {\n        value: null,\n        writable: true\n      },\n      _log: {\n        value: log\n      },\n      _processorInfo: {\n        value: null,\n        writable: true\n      },\n      _stats: {\n        value: null,\n        writable: true\n      }\n    });\n\n    this.on('add', info => {\n      this._lastStatsSaveTime = Date.now();\n      this._lastStatsPublishTime = Date.now();\n      this._processorInfo = info;\n      this._stats = [];\n      this._reemitEvent('add', this._getEventData());\n    });\n\n    this.on('remove', () => {\n      const data = this._getEventData();\n      this._lastStatsSaveTime = null;\n      this._lastStatsPublishTime = null;\n      this._processorInfo = null;\n      this._stats = null;\n      this._reemitEvent('remove', data);\n    });\n\n    this.on('start', () => {\n      this._reemitEvent('start', this._getEventData());\n    });\n\n    this.on('stop', message => {\n      this._reemitEvent('stop', Object.assign({ message }, this._getEventData()));\n    });\n\n    this.on('stats', () => this._maybeEmitStats());\n  }\n\n  /**\n   * @private\n   */\n  _getEventData() {\n    if (!this._processorInfo) {\n      return {};\n    }\n\n    const { processor, captureHeight, captureWidth, inputFrameRate, isRemoteVideoTrack } = this._processorInfo;\n    const data = { captureHeight, captureWidth, inputFrameRate, isRemoteVideoTrack };\n    data.name = processor._name || 'VideoProcessor';\n\n    ['assetsPath', 'blurFilterRadius', 'fitType', 'isSimdEnabled', 'maskBlurRadius', 'version'].forEach(prop => {\n      const val = processor[`_${prop}`];\n      if (typeof val !== 'undefined') {\n        data[prop] = val;\n      }\n    });\n\n    Object.keys(data).forEach(prop => {\n      const val = data[prop];\n      if (typeof val === 'boolean') {\n        data[prop] = val ? 'true' : 'false';\n      }\n    });\n\n    return data;\n  }\n\n  /**\n   * Save stats every second. If a specific time interval has elapsed,\n   * the stats event will be emitted\n   * @private\n   */\n  _maybeEmitStats() {\n    if (!this._stats || !this._processorInfo) {\n      return;\n    }\n    const benchmark = this._processorInfo.processor._benchmark;\n    if (!benchmark) {\n      return;\n    }\n    const now = Date.now();\n    if (now - this._lastStatsSaveTime < 1000) {\n      return;\n    }\n\n    const entry = { outputFrameRate: benchmark.getRate('totalProcessingDelay') };\n    ['captureFrameDelay', 'imageCompositionDelay', 'inputImageResizeDelay', 'processFrameDelay', 'segmentationDelay'].forEach(name => {\n      entry[name] = benchmark.getAverageDelay(name);\n    });\n    this._lastStatsSaveTime = now;\n    this._stats.push(entry);\n\n    if (now - this._lastStatsPublishTime < DEFAULT_VIDEO_PROCESSOR_STATS_INTERVAL_MS) {\n      return;\n    }\n    this._lastStatsPublishTime = now;\n    const stats = this._stats.splice(0);\n    const averages = stats.reduce((averages, current, n) => {\n      Object.keys(entry).forEach(name => {\n        if (!averages[name]) {\n          averages[name] = 0;\n        }\n        averages[name] = ((averages[name] * n) + current[name]) / (n + 1);\n      });\n      return averages;\n    }, {});\n\n    Object.keys(averages).forEach(name => {\n      averages[name] = parseFloat(averages[name].toFixed(2));\n    });\n    this._reemitEvent('stats', Object.assign({}, averages, this._getEventData()));\n  }\n\n  /**\n   * @private\n   */\n  _reemitEvent(name, data) {\n    this._log.debug(`VideoProcessor:${name}`, data);\n    this.emit('event', { name, data });\n  }\n}\n\nmodule.exports = VideoProcessorEventObserver;\n"]},"metadata":{},"sourceType":"script"}