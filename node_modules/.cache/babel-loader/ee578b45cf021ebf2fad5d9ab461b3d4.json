{"ast":null,"code":"/* eslint-disable camelcase */\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar getUserAgent = require('..').getUserAgent;\n\nvar MAX_RECONNECT_ATTEMPTS = 5;\nvar RECONNECT_INTERVAL_MS = 50;\nvar WS_CLOSE_NORMAL = 1000;\nvar toplevel = globalThis;\nvar WebSocket = toplevel.WebSocket ? toplevel.WebSocket : require('ws');\n\nvar _a = require('../constants'),\n    hardwareDevicePublisheriPad = _a.hardwareDevicePublisheriPad,\n    hardwareDevicePublisheriPhone = _a.hardwareDevicePublisheriPhone;\n\nvar util = require('../../util');\n\nvar browserdetection = require('../browserdetection');\n/**\n * Publish events to the Insights gateway.\n * @extends EventEmitter\n * @emits InsightsPublisher#connected\n * @emits InsightsPublisher#disconnected\n * @emits InsightsPublisher#reconnecting\n */\n\n\nvar InsightsPublisher =\n/** @class */\nfunction (_super) {\n  __extends(InsightsPublisher, _super);\n  /**\n   * @param {string} token - Insights gateway token\n   * @param {string} sdkName - Name of the SDK using the {@link InsightsPublisher}\n   * @param {string} sdkVersion - Version of the SDK using the {@link InsightsPublisher}\n   * @param {string} environment - One of 'dev', 'stage' or 'prod'\n   * @param {string} realm - Region identifier\n   * @param {InsightsPublisherOptions} options - Override default behavior\n   */\n\n\n  function InsightsPublisher(token, sdkName, sdkVersion, environment, realm, options) {\n    var _this = _super.call(this) || this;\n\n    options = Object.assign({\n      gateway: createGateway(environment, realm) + \"/v1/VideoEvents\",\n      maxReconnectAttempts: MAX_RECONNECT_ATTEMPTS,\n      reconnectIntervalMs: RECONNECT_INTERVAL_MS,\n      userAgent: getUserAgent(),\n      WebSocket: WebSocket\n    }, options);\n    Object.defineProperties(_this, {\n      _connectTimestamp: {\n        value: 0,\n        writable: true\n      },\n      _eventQueue: {\n        value: []\n      },\n      _readyToConnect: {\n        value: util.defer()\n      },\n      _reconnectAttemptsLeft: {\n        value: options.maxReconnectAttempts,\n        writable: true\n      },\n      _ws: {\n        value: null,\n        writable: true\n      },\n      _WebSocket: {\n        value: options.WebSocket\n      }\n    });\n\n    _this._readyToConnect.promise.then(function (_a) {\n      var roomSid = _a.roomSid,\n          participantSid = _a.participantSid;\n      var self = _this;\n\n      _this.on('disconnected', function maybeReconnect(error) {\n        self._session = null;\n\n        if (error && self._reconnectAttemptsLeft > 0) {\n          self.emit('reconnecting');\n          reconnect(self, token, sdkName, sdkVersion, roomSid, participantSid, options);\n          return;\n        }\n\n        self.removeListener('disconnected', maybeReconnect);\n      });\n\n      connect(_this, token, sdkName, sdkVersion, roomSid, participantSid, options);\n    }).catch(function () {// ignore failures to connect\n    });\n\n    return _this;\n  }\n  /**\n   * Start connecting to the Insights gateway.\n   * @param {string} roomSid\n   * @param {string} participantSid\n   * @returns {void}\n   */\n\n\n  InsightsPublisher.prototype.connect = function (roomSid, participantSid) {\n    this._readyToConnect.resolve({\n      roomSid: roomSid,\n      participantSid: participantSid\n    });\n  };\n  /**\n   * Publish an event to the Insights gateway.\n   * @private\n   * @param {*} event\n   */\n\n\n  InsightsPublisher.prototype._publish = function (event) {\n    event.session = this._session;\n\n    this._ws.send(JSON.stringify(event));\n  };\n  /**\n   * Disconnect from the Insights gateway.\n   * @returns {boolean} true if called when connecting/open, false if not\n   */\n\n\n  InsightsPublisher.prototype.disconnect = function () {\n    if (this._ws === null || this._ws.readyState === this._WebSocket.CLOSING || this._ws.readyState === this._WebSocket.CLOSED) {\n      return false;\n    }\n\n    try {\n      this._ws.close();\n    } catch (error) {// Do nothing.\n    }\n\n    this.emit('disconnected');\n    return true;\n  };\n  /**\n   * Publish (or queue, if not connected) an event to the Insights gateway.\n   * @param {string} groupName - Event group name\n   * @param {string} eventName - Event name\n   * @param {object} payload - Event payload\n   * @returns {boolean} true if queued or published, false if disconnect() called\n   */\n\n\n  InsightsPublisher.prototype.publish = function (groupName, eventName, payload) {\n    if (this._ws !== null && (this._ws.readyState === this._WebSocket.CLOSING || this._ws.readyState === this._WebSocket.CLOSED)) {\n      return false;\n    }\n\n    var publishOrEnqueue = typeof this._session === 'string' ? this._publish.bind(this) : this._eventQueue.push.bind(this._eventQueue);\n    publishOrEnqueue({\n      group: groupName,\n      name: eventName,\n      payload: payload,\n      timestamp: Date.now(),\n      type: 'event',\n      version: 1\n    });\n    return true;\n  };\n\n  return InsightsPublisher;\n}(EventEmitter);\n/**\n * Start connecting to the Insights gateway.\n * @private\n * @param {InsightsPublisher} publisher\n * @param {string} name\n * @param {string} token\n * @param {string} sdkName\n * @param {string} sdkVersion\n * @param {string} roomSid\n * @param {string} participantSid\n * @param {InsightsPublisherOptions} options\n */\n\n\nfunction connect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options) {\n  publisher._connectTimestamp = Date.now();\n  publisher._reconnectAttemptsLeft--;\n  publisher._ws = new options.WebSocket(options.gateway);\n  var ws = publisher._ws;\n  ws.addEventListener('close', function (event) {\n    if (event.code === WS_CLOSE_NORMAL) {\n      publisher.emit('disconnected');\n      return;\n    }\n\n    publisher.emit('disconnected', new Error(\"WebSocket Error \" + event.code + \": \" + event.reason));\n  });\n  ws.addEventListener('message', function (message) {\n    handleConnectResponse(publisher, JSON.parse(message.data), options);\n  });\n  ws.addEventListener('open', function () {\n    var connectRequest = {\n      type: 'connect',\n      token: token,\n      version: 1\n    };\n    connectRequest.publisher = {\n      name: sdkName,\n      sdkVersion: sdkVersion,\n      userAgent: options.userAgent,\n      participantSid: participantSid,\n      roomSid: roomSid\n    };\n\n    if (browserdetection.isIpad()) {\n      connectRequest.publisher = __assign(__assign({}, connectRequest.publisher), hardwareDevicePublisheriPad);\n    } else if (browserdetection.isIphone()) {\n      connectRequest.publisher = __assign(__assign({}, connectRequest.publisher), hardwareDevicePublisheriPhone);\n    }\n\n    ws.send(JSON.stringify(connectRequest));\n  });\n}\n/**\n * Create the Insights Websocket gateway URL.\n * @param {string} environment\n * @param {string} realm\n * @returns {string}\n */\n\n\nfunction createGateway(environment, realm) {\n  return environment === 'prod' ? \"wss://sdkgw.\" + realm + \".twilio.com\" : \"wss://sdkgw.\" + environment + \"-\" + realm + \".twilio.com\";\n}\n/**\n * Handle connect response from the Insights gateway.\n * @param {InsightsPublisher} publisher\n * @param {*} response\n * @param {InsightsPublisherOptions} options\n */\n\n\nfunction handleConnectResponse(publisher, response, options) {\n  switch (response.type) {\n    case 'connected':\n      publisher._session = response.session;\n      publisher._reconnectAttemptsLeft = options.maxReconnectAttempts;\n\n      publisher._eventQueue.splice(0).forEach(publisher._publish, publisher);\n\n      publisher.emit('connected');\n      break;\n\n    case 'error':\n      publisher._ws.close();\n\n      publisher.emit('disconnected', new Error(response.message));\n      break;\n  }\n}\n/**\n * Start re-connecting to the Insights gateway with an appropriate delay based\n * on InsightsPublisherOptions#reconnectIntervalMs.\n * @private\n * @param {InsightsPublisher} publisher\n * @param {string} token\n * @param {string} sdkName\n * @param {string} sdkVersion\n * @param {string} roomSid\n * @param {string} participantSid\n * @param {InsightsPublisherOptions} options\n */\n\n\nfunction reconnect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options) {\n  var connectInterval = Date.now() - publisher._connectTimestamp;\n\n  var timeToWait = options.reconnectIntervalMs - connectInterval;\n\n  if (timeToWait > 0) {\n    setTimeout(function () {\n      connect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options);\n    }, timeToWait);\n    return;\n  }\n\n  connect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options);\n}\n/**\n * The {@link InsightsPublisher} is connected to the gateway.\n * @event InsightsPublisher#connected\n */\n\n/**\n * The {@link InsightsPublisher} is disconnected from the gateway.\n * @event InsightsPublisher#disconnected\n * @param {Error} [error] - Optional error if disconnected unintentionally\n */\n\n/**\n * The {@link InsightsPublisher} is re-connecting to the gateway.\n * @event InsightsPublisher#reconnecting\n */\n\n/**\n * {@link InsightsPublisher} options.\n * @typedef {object} InsightsPublisherOptions\n * @property {string} [gateway=sdkgw.{environment}-{realm}.twilio.com] - Insights WebSocket gateway url\n * @property {number} [maxReconnectAttempts=5] - Max re-connect attempts\n * @property {number} [reconnectIntervalMs=50] - Re-connect interval in ms\n */\n\n\nmodule.exports = InsightsPublisher;","map":{"version":3,"mappings":"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","names":["EventEmitter","require","getUserAgent","MAX_RECONNECT_ATTEMPTS","RECONNECT_INTERVAL_MS","WS_CLOSE_NORMAL","toplevel","globalThis","WebSocket","hardwareDevicePublisheriPad","hardwareDevicePublisheriPhone","util","browserdetection","__extends","token","sdkName","sdkVersion","environment","realm","options","_super","Object","assign","gateway","createGateway","maxReconnectAttempts","reconnectIntervalMs","userAgent","defineProperties","_this","_connectTimestamp","value","writable","_eventQueue","_readyToConnect","defer","_reconnectAttemptsLeft","_ws","_WebSocket","promise","then","_a","roomSid","participantSid","self","on","maybeReconnect","error","_session","emit","reconnect","removeListener","connect","catch","InsightsPublisher","resolve","event","session","send","JSON","stringify","readyState","CLOSING","CLOSED","close","groupName","eventName","payload","publishOrEnqueue","_publish","bind","push","group","name","timestamp","Date","now","type","version","publisher","ws","addEventListener","code","Error","reason","handleConnectResponse","parse","message","data","connectRequest","isIpad","__assign","isIphone","response","splice","forEach","connectInterval","timeToWait","setTimeout","module","exports"],"sources":["/home/samliu/repos/ieee/tp-robot/node_modules/twilio-video/lib/util/insightspublisher/index.js"],"sourcesContent":["/* eslint-disable camelcase */\n'use strict';\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst { getUserAgent } = require('..');\n\nconst MAX_RECONNECT_ATTEMPTS = 5;\nconst RECONNECT_INTERVAL_MS = 50;\nconst WS_CLOSE_NORMAL = 1000;\n\nconst toplevel = globalThis;\nconst WebSocket = toplevel.WebSocket ? toplevel.WebSocket : require('ws');\nconst { hardwareDevicePublisheriPad, hardwareDevicePublisheriPhone } = require('../constants');\nconst util = require('../../util');\nconst browserdetection = require('../browserdetection');\n\n/**\n * Publish events to the Insights gateway.\n * @extends EventEmitter\n * @emits InsightsPublisher#connected\n * @emits InsightsPublisher#disconnected\n * @emits InsightsPublisher#reconnecting\n */\nclass InsightsPublisher extends EventEmitter {\n  /**\n   * @param {string} token - Insights gateway token\n   * @param {string} sdkName - Name of the SDK using the {@link InsightsPublisher}\n   * @param {string} sdkVersion - Version of the SDK using the {@link InsightsPublisher}\n   * @param {string} environment - One of 'dev', 'stage' or 'prod'\n   * @param {string} realm - Region identifier\n   * @param {InsightsPublisherOptions} options - Override default behavior\n   */\n  constructor(token, sdkName, sdkVersion, environment, realm, options) {\n    super();\n\n    options = Object.assign({\n      gateway: `${createGateway(environment, realm)}/v1/VideoEvents`,\n      maxReconnectAttempts: MAX_RECONNECT_ATTEMPTS,\n      reconnectIntervalMs: RECONNECT_INTERVAL_MS,\n      userAgent: getUserAgent(),\n      WebSocket,\n    }, options);\n\n    Object.defineProperties(this, {\n      _connectTimestamp: {\n        value: 0,\n        writable: true\n      },\n      _eventQueue: {\n        value: []\n      },\n      _readyToConnect: {\n        value: util.defer()\n      },\n      _reconnectAttemptsLeft: {\n        value: options.maxReconnectAttempts,\n        writable: true\n      },\n      _ws: {\n        value: null,\n        writable: true\n      },\n      _WebSocket: {\n        value: options.WebSocket\n      }\n    });\n\n    this._readyToConnect.promise.then(({ roomSid, participantSid }) => {\n      const self = this;\n      this.on('disconnected', function maybeReconnect(error) {\n        self._session = null;\n        if (error && self._reconnectAttemptsLeft > 0) {\n          self.emit('reconnecting');\n          reconnect(self, token, sdkName, sdkVersion, roomSid, participantSid, options);\n          return;\n        }\n        self.removeListener('disconnected', maybeReconnect);\n      });\n      connect(this, token, sdkName, sdkVersion, roomSid, participantSid, options);\n    }).catch(() => {\n      // ignore failures to connect\n    });\n  }\n\n  /**\n   * Start connecting to the Insights gateway.\n   * @param {string} roomSid\n   * @param {string} participantSid\n   * @returns {void}\n   */\n  connect(roomSid, participantSid) {\n    this._readyToConnect.resolve({ roomSid, participantSid });\n  }\n\n  /**\n   * Publish an event to the Insights gateway.\n   * @private\n   * @param {*} event\n   */\n  _publish(event) {\n    event.session = this._session;\n    this._ws.send(JSON.stringify(event));\n  }\n\n  /**\n   * Disconnect from the Insights gateway.\n   * @returns {boolean} true if called when connecting/open, false if not\n   */\n  disconnect() {\n    if (this._ws === null\n      || this._ws.readyState === this._WebSocket.CLOSING\n      || this._ws.readyState === this._WebSocket.CLOSED) {\n      return false;\n    }\n\n    try {\n      this._ws.close();\n    } catch (error) {\n      // Do nothing.\n    }\n    this.emit('disconnected');\n\n    return true;\n  }\n\n  /**\n   * Publish (or queue, if not connected) an event to the Insights gateway.\n   * @param {string} groupName - Event group name\n   * @param {string} eventName - Event name\n   * @param {object} payload - Event payload\n   * @returns {boolean} true if queued or published, false if disconnect() called\n   */\n  publish(groupName, eventName, payload) {\n    if (this._ws !== null\n      && (this._ws.readyState === this._WebSocket.CLOSING\n        || this._ws.readyState === this._WebSocket.CLOSED)) {\n      return false;\n    }\n\n    const publishOrEnqueue = typeof this._session === 'string'\n      ? this._publish.bind(this)\n      : this._eventQueue.push.bind(this._eventQueue);\n\n    publishOrEnqueue({\n      group: groupName,\n      name: eventName,\n      payload,\n      timestamp: Date.now(),\n      type: 'event',\n      version: 1\n    });\n\n    return true;\n  }\n}\n\n/**\n * Start connecting to the Insights gateway.\n * @private\n * @param {InsightsPublisher} publisher\n * @param {string} name\n * @param {string} token\n * @param {string} sdkName\n * @param {string} sdkVersion\n * @param {string} roomSid\n * @param {string} participantSid\n * @param {InsightsPublisherOptions} options\n */\nfunction connect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options) {\n  publisher._connectTimestamp = Date.now();\n  publisher._reconnectAttemptsLeft--;\n  publisher._ws = new options.WebSocket(options.gateway);\n  const ws = publisher._ws;\n\n  ws.addEventListener('close', event => {\n    if (event.code === WS_CLOSE_NORMAL) {\n      publisher.emit('disconnected');\n      return;\n    }\n    publisher.emit('disconnected', new Error(`WebSocket Error ${event.code}: ${event.reason}`));\n  });\n\n  ws.addEventListener('message', message => {\n    handleConnectResponse(publisher, JSON.parse(message.data), options);\n  });\n\n  ws.addEventListener('open', () => {\n    const connectRequest = {\n      type: 'connect',\n      token,\n      version: 1\n    };\n\n    connectRequest.publisher = {\n      name: sdkName,\n      sdkVersion,\n      userAgent: options.userAgent,\n      participantSid: participantSid,\n      roomSid: roomSid,\n    };\n\n    if (browserdetection.isIpad()) {\n      connectRequest.publisher = { ...connectRequest.publisher, ...hardwareDevicePublisheriPad };\n    } else if (browserdetection.isIphone()) {\n      connectRequest.publisher = { ...connectRequest.publisher, ...hardwareDevicePublisheriPhone };\n    }\n\n    ws.send(JSON.stringify(connectRequest));\n  });\n}\n\n/**\n * Create the Insights Websocket gateway URL.\n * @param {string} environment\n * @param {string} realm\n * @returns {string}\n */\nfunction createGateway(environment, realm) {\n  return environment === 'prod' ? `wss://sdkgw.${realm}.twilio.com`\n    : `wss://sdkgw.${environment}-${realm}.twilio.com`;\n}\n\n/**\n * Handle connect response from the Insights gateway.\n * @param {InsightsPublisher} publisher\n * @param {*} response\n * @param {InsightsPublisherOptions} options\n */\nfunction handleConnectResponse(publisher, response, options) {\n  switch (response.type) {\n    case 'connected':\n      publisher._session = response.session;\n      publisher._reconnectAttemptsLeft = options.maxReconnectAttempts;\n      publisher._eventQueue.splice(0).forEach(publisher._publish, publisher);\n      publisher.emit('connected');\n      break;\n    case 'error':\n      publisher._ws.close();\n      publisher.emit('disconnected', new Error(response.message));\n      break;\n  }\n}\n\n/**\n * Start re-connecting to the Insights gateway with an appropriate delay based\n * on InsightsPublisherOptions#reconnectIntervalMs.\n * @private\n * @param {InsightsPublisher} publisher\n * @param {string} token\n * @param {string} sdkName\n * @param {string} sdkVersion\n * @param {string} roomSid\n * @param {string} participantSid\n * @param {InsightsPublisherOptions} options\n */\nfunction reconnect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options) {\n  const connectInterval = Date.now() - publisher._connectTimestamp;\n  const timeToWait = options.reconnectIntervalMs - connectInterval;\n\n  if (timeToWait > 0) {\n    setTimeout(() => {\n      connect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options);\n    }, timeToWait);\n    return;\n  }\n\n  connect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options);\n}\n\n/**\n * The {@link InsightsPublisher} is connected to the gateway.\n * @event InsightsPublisher#connected\n */\n\n/**\n * The {@link InsightsPublisher} is disconnected from the gateway.\n * @event InsightsPublisher#disconnected\n * @param {Error} [error] - Optional error if disconnected unintentionally\n */\n\n/**\n * The {@link InsightsPublisher} is re-connecting to the gateway.\n * @event InsightsPublisher#reconnecting\n */\n\n/**\n * {@link InsightsPublisher} options.\n * @typedef {object} InsightsPublisherOptions\n * @property {string} [gateway=sdkgw.{environment}-{realm}.twilio.com] - Insights WebSocket gateway url\n * @property {number} [maxReconnectAttempts=5] - Max re-connect attempts\n * @property {number} [reconnectIntervalMs=50] - Re-connect interval in ms\n */\n\nmodule.exports = InsightsPublisher;\n"]},"metadata":{},"sourceType":"script"}