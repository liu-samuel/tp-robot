{"ast":null,"code":"'use strict';\n\nvar LocalAudioTrackStats = require('./localaudiotrackstats');\n\nvar LocalVideoTrackStats = require('./localvideotrackstats');\n\nvar RemoteAudioTrackStats = require('./remoteaudiotrackstats');\n\nvar RemoteVideoTrackStats = require('./remotevideotrackstats');\n/**\n * Statistics report for an RTCPeerConnection.\n * @property {string} peerConnectionId - ID of the RTCPeerConnection\n * @property {Array<LocalAudioTrackStats>} localAudioTrackStats - List of {@link LocalAudioTrackStats}\n * @property {Array<LocalVideoTrackStats>} localVideoTrackStats - List of {@link LocalVideoTrackStats}\n * @property {Array<RemoteAudioTrackStats>} remoteAudioTrackStats - List of {@link RemoteAudioTrackStats}\n * @property {Array<RemoteVideoTrackStats>} remoteVideoTrackStats - List of {@link RemoteVideoTrackStats}\n */\n\n\nvar StatsReport =\n/** @class */\nfunction () {\n  /**\n   * @param {string} peerConnectionId - RTCPeerConnection ID\n   * @param {StandardizedStatsResponse} statsResponse\n   * @param {boolean} prepareForInsights - if report is being prepared to send to insights.\n   */\n  function StatsReport(peerConnectionId, statsResponse, prepareForInsights) {\n    if (typeof peerConnectionId !== 'string') {\n      throw new Error('RTCPeerConnection id must be a string');\n    }\n\n    Object.defineProperties(this, {\n      peerConnectionId: {\n        value: peerConnectionId,\n        enumerable: true\n      },\n      localAudioTrackStats: {\n        value: statsResponse.localAudioTrackStats.map(function (report) {\n          return new LocalAudioTrackStats(report.trackId, report, prepareForInsights);\n        }),\n        enumerable: true\n      },\n      localVideoTrackStats: {\n        value: statsResponse.localVideoTrackStats.map(function (report) {\n          return new LocalVideoTrackStats(report.trackId, report, prepareForInsights);\n        }),\n        enumerable: true\n      },\n      remoteAudioTrackStats: {\n        value: statsResponse.remoteAudioTrackStats.map(function (report) {\n          return new RemoteAudioTrackStats(report.trackId, report);\n        }),\n        enumerable: true\n      },\n      remoteVideoTrackStats: {\n        value: statsResponse.remoteVideoTrackStats.map(function (report) {\n          return new RemoteVideoTrackStats(report.trackId, report);\n        }),\n        enumerable: true\n      }\n    });\n  }\n\n  return StatsReport;\n}();\n\nmodule.exports = StatsReport;","map":{"version":3,"mappings":"AAAA;;AAEA,IAAMA,oBAAoB,GAAGC,OAAO,CAAC,wBAAD,CAApC;;AACA,IAAMC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAApC;;AACA,IAAME,qBAAqB,GAAGF,OAAO,CAAC,yBAAD,CAArC;;AACA,IAAMG,qBAAqB,GAAGH,OAAO,CAAC,yBAAD,CAArC;AAEA;;;;;;;;;;AAQA;AAAA;AAAA;EACE;;;;;EAKA,qBAAYI,gBAAZ,EAA8BC,aAA9B,EAA6CC,kBAA7C,EAA+D;IAC7D,IAAI,OAAOF,gBAAP,KAA4B,QAAhC,EAA0C;MACxC,MAAM,IAAIG,KAAJ,CAAU,uCAAV,CAAN;IACD;;IAEDC,MAAM,CAACC,gBAAP,CAAwB,IAAxB,EAA8B;MAC5BL,gBAAgB,EAAE;QAChBM,KAAK,EAAEN,gBADS;QAEhBO,UAAU,EAAE;MAFI,CADU;MAK5BC,oBAAoB,EAAE;QACpBF,KAAK,EAAEL,aAAa,CAACO,oBAAd,CAAmCC,GAAnC,CAAuC,kBAAM;UAAI,WAAId,oBAAJ,CAAyBe,MAAM,CAACC,OAAhC,EAAyCD,MAAzC,EAAiDR,kBAAjD;QAAoE,CAArH,CADa;QAEpBK,UAAU,EAAE;MAFQ,CALM;MAS5BK,oBAAoB,EAAE;QACpBN,KAAK,EAAEL,aAAa,CAACW,oBAAd,CAAmCH,GAAnC,CAAuC,kBAAM;UAAI,WAAIZ,oBAAJ,CAAyBa,MAAM,CAACC,OAAhC,EAAyCD,MAAzC,EAAiDR,kBAAjD;QAAoE,CAArH,CADa;QAEpBK,UAAU,EAAE;MAFQ,CATM;MAa5BM,qBAAqB,EAAE;QACrBP,KAAK,EAAEL,aAAa,CAACY,qBAAd,CAAoCJ,GAApC,CAAwC,kBAAM;UAAI,WAAIX,qBAAJ,CAA0BY,MAAM,CAACC,OAAjC,EAA0CD,MAA1C;QAAiD,CAAnG,CADc;QAErBH,UAAU,EAAE;MAFS,CAbK;MAiB5BO,qBAAqB,EAAE;QACrBR,KAAK,EAAEL,aAAa,CAACa,qBAAd,CAAoCL,GAApC,CAAwC,kBAAM;UAAI,WAAIV,qBAAJ,CAA0BW,MAAM,CAACC,OAAjC,EAA0CD,MAA1C;QAAiD,CAAnG,CADc;QAErBH,UAAU,EAAE;MAFS;IAjBK,CAA9B;EAsBD;;EACH;AAAC,CAlCD;;AAoCAQ,MAAM,CAACC,OAAP,GAAiBC,WAAjB","names":["LocalAudioTrackStats","require","LocalVideoTrackStats","RemoteAudioTrackStats","RemoteVideoTrackStats","peerConnectionId","statsResponse","prepareForInsights","Error","Object","defineProperties","value","enumerable","localAudioTrackStats","map","report","trackId","localVideoTrackStats","remoteAudioTrackStats","remoteVideoTrackStats","module","exports","StatsReport"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/stats/statsreport.js"],"sourcesContent":["'use strict';\n\nconst LocalAudioTrackStats = require('./localaudiotrackstats');\nconst LocalVideoTrackStats = require('./localvideotrackstats');\nconst RemoteAudioTrackStats = require('./remoteaudiotrackstats');\nconst RemoteVideoTrackStats = require('./remotevideotrackstats');\n\n/**\n * Statistics report for an RTCPeerConnection.\n * @property {string} peerConnectionId - ID of the RTCPeerConnection\n * @property {Array<LocalAudioTrackStats>} localAudioTrackStats - List of {@link LocalAudioTrackStats}\n * @property {Array<LocalVideoTrackStats>} localVideoTrackStats - List of {@link LocalVideoTrackStats}\n * @property {Array<RemoteAudioTrackStats>} remoteAudioTrackStats - List of {@link RemoteAudioTrackStats}\n * @property {Array<RemoteVideoTrackStats>} remoteVideoTrackStats - List of {@link RemoteVideoTrackStats}\n */\nclass StatsReport {\n  /**\n   * @param {string} peerConnectionId - RTCPeerConnection ID\n   * @param {StandardizedStatsResponse} statsResponse\n   * @param {boolean} prepareForInsights - if report is being prepared to send to insights.\n   */\n  constructor(peerConnectionId, statsResponse, prepareForInsights) {\n    if (typeof peerConnectionId !== 'string') {\n      throw new Error('RTCPeerConnection id must be a string');\n    }\n\n    Object.defineProperties(this, {\n      peerConnectionId: {\n        value: peerConnectionId,\n        enumerable: true\n      },\n      localAudioTrackStats: {\n        value: statsResponse.localAudioTrackStats.map(report => new LocalAudioTrackStats(report.trackId, report, prepareForInsights)),\n        enumerable: true\n      },\n      localVideoTrackStats: {\n        value: statsResponse.localVideoTrackStats.map(report => new LocalVideoTrackStats(report.trackId, report, prepareForInsights)),\n        enumerable: true\n      },\n      remoteAudioTrackStats: {\n        value: statsResponse.remoteAudioTrackStats.map(report => new RemoteAudioTrackStats(report.trackId, report)),\n        enumerable: true\n      },\n      remoteVideoTrackStats: {\n        value: statsResponse.remoteVideoTrackStats.map(report => new RemoteVideoTrackStats(report.trackId, report)),\n        enumerable: true\n      }\n    });\n  }\n}\n\nmodule.exports = StatsReport;\n"]},"metadata":{},"sourceType":"script"}