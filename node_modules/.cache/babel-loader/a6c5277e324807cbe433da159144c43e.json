{"ast":null,"code":"/* eslint callback-return:0 */\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar MediaSignaling = require('./mediasignaling');\n\nvar Timeout = require('../../util/timeout');\n\nvar isDeepEqual = require('../../util').isDeepEqual;\n\nvar RENDER_HINT_RESPONSE_TIME_MS = 2000; // time to wait for server response (before resending all hints.)\n\nvar messageId = 1;\n\nvar RenderHintsSignaling =\n/** @class */\nfunction (_super) {\n  __extends(RenderHintsSignaling, _super);\n  /**\n   * Construct a {@link RenderHintsSignaling}.\n   */\n\n\n  function RenderHintsSignaling(getReceiver, options) {\n    var _this = _super.call(this, getReceiver, 'render_hints', options) || this;\n\n    Object.defineProperties(_this, {\n      _trackSidsToRenderHints: {\n        value: new Map()\n      },\n      _responseTimer: {\n        value: new Timeout(function () {\n          _this._sendAllHints(); // once timer fires, for next round double the delay.\n\n\n          _this._responseTimer.setDelay(_this._responseTimer.delay * 2);\n        }, RENDER_HINT_RESPONSE_TIME_MS, false)\n      }\n    });\n\n    _this.on('ready', function (transport) {\n      transport.on('message', function (message) {\n        _this._log.debug('Incoming: ', message);\n\n        switch (message.type) {\n          case 'render_hints':\n            _this._processHintResults(message && message.subscriber && message.subscriber.hints || []);\n\n            break;\n\n          default:\n            _this._log.warn('Unknown message type: ', message.type);\n\n            break;\n        }\n      }); // NOTE(mpatwardhan): When transport is set (either 1st time of after vms failover)\n      // resend all track states.\n\n      _this._sendAllHints();\n    });\n\n    return _this;\n  }\n\n  RenderHintsSignaling.prototype._sendAllHints = function () {\n    var _this = this; // to force sending all hints simply mark all tracks as dirty.\n\n\n    Array.from(this._trackSidsToRenderHints.keys()).forEach(function (trackSid) {\n      var trackState = _this._trackSidsToRenderHints.get(trackSid);\n\n      if (trackState.renderDimensions) {\n        trackState.isDimensionDirty = true;\n      }\n\n      if ('enabled' in trackState) {\n        trackState.isEnabledDirty = true;\n      }\n    });\n\n    this._sendHints();\n  };\n\n  RenderHintsSignaling.prototype._processHintResults = function (hintResults) {\n    var _this = this;\n\n    this._responseTimer.clear();\n\n    this._responseTimer.setDelay(RENDER_HINT_RESPONSE_TIME_MS);\n\n    hintResults.forEach(function (hintResult) {\n      if (hintResult.result !== 'OK') {\n        _this._log.debug('Server error processing hint:', hintResult);\n      }\n    });\n\n    this._sendHints();\n  };\n\n  RenderHintsSignaling.prototype._sendHints = function () {\n    var _this = this;\n\n    if (!this._transport || this._responseTimer.isSet) {\n      return;\n    }\n\n    var hints = [];\n    Array.from(this._trackSidsToRenderHints.keys()).forEach(function (trackSid) {\n      var trackState = _this._trackSidsToRenderHints.get(trackSid);\n\n      if (trackState.isEnabledDirty || trackState.isDimensionDirty) {\n        var mspHint = {\n          'track': trackSid\n        };\n\n        if (trackState.isEnabledDirty) {\n          mspHint.enabled = trackState.enabled;\n          trackState.isEnabledDirty = false;\n        }\n\n        if (trackState.isDimensionDirty) {\n          // eslint-disable-next-line camelcase\n          mspHint.render_dimensions = trackState.renderDimensions;\n          trackState.isDimensionDirty = false;\n        }\n\n        hints.push(mspHint);\n      }\n    });\n\n    if (hints.length > 0) {\n      var payLoad = {\n        type: 'render_hints',\n        subscriber: {\n          id: messageId++,\n          hints: hints\n        }\n      };\n\n      this._log.debug('Outgoing: ', payLoad);\n\n      this._transport.publish(payLoad);\n\n      this._responseTimer.start();\n    }\n  };\n  /**\n   * @param {Track.SID} trackSid\n   * @param {ClientRenderHint} renderHint\n   */\n\n\n  RenderHintsSignaling.prototype.setTrackHint = function (trackSid, renderHint) {\n    var trackState = this._trackSidsToRenderHints.get(trackSid) || {\n      isEnabledDirty: false,\n      isDimensionDirty: false\n    };\n\n    if ('enabled' in renderHint && trackState.enabled !== renderHint.enabled) {\n      trackState.enabled = !!renderHint.enabled;\n      trackState.isEnabledDirty = true;\n    }\n\n    if (renderHint.renderDimensions && !isDeepEqual(renderHint.renderDimensions, trackState.renderDimensions)) {\n      // eslint-disable-next-line camelcase\n      trackState.renderDimensions = renderHint.renderDimensions;\n      trackState.isDimensionDirty = true;\n    }\n\n    this._trackSidsToRenderHints.set(trackSid, trackState);\n\n    this._sendHints();\n  };\n  /**\n   * must be called when track is unsubscribed.\n   * @param {Track.SID} trackSid\n   */\n\n\n  RenderHintsSignaling.prototype.clearTrackHint = function (trackSid) {\n    this._trackSidsToRenderHints.delete(trackSid);\n  };\n\n  return RenderHintsSignaling;\n}(MediaSignaling);\n\nmodule.exports = RenderHintsSignaling;","map":{"version":3,"mappings":"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","names":["MediaSignaling","require","Timeout","isDeepEqual","RENDER_HINT_RESPONSE_TIME_MS","messageId","__extends","getReceiver","options","_super","Object","defineProperties","_this","_trackSidsToRenderHints","value","Map","_responseTimer","_sendAllHints","setDelay","delay","on","transport","_log","debug","message","type","_processHintResults","subscriber","hints","warn","RenderHintsSignaling","Array","from","keys","forEach","trackState","get","trackSid","renderDimensions","isDimensionDirty","isEnabledDirty","_sendHints","hintResults","clear","hintResult","result","_transport","isSet","mspHint","enabled","render_dimensions","push","length","payLoad","id","publish","start","renderHint","set","delete","module","exports"],"sources":["/home/samliu/repos/ieee/tp-robot/node_modules/twilio-video/lib/signaling/v2/renderhintssignaling.js"],"sourcesContent":["/* eslint callback-return:0 */\n'use strict';\n\nconst MediaSignaling = require('./mediasignaling');\nconst Timeout = require('../../util/timeout');\nconst { isDeepEqual } = require('../../util');\nconst RENDER_HINT_RESPONSE_TIME_MS = 2000; // time to wait for server response (before resending all hints.)\n\nlet messageId = 1;\nclass RenderHintsSignaling extends MediaSignaling {\n  /**\n   * Construct a {@link RenderHintsSignaling}.\n   */\n  constructor(getReceiver, options) {\n    super(getReceiver, 'render_hints', options);\n    Object.defineProperties(this, {\n      _trackSidsToRenderHints: {\n        value: new Map()\n      },\n      _responseTimer: {\n        value: new Timeout(() => {\n          this._sendAllHints();\n          // once timer fires, for next round double the delay.\n          this._responseTimer.setDelay(this._responseTimer.delay * 2);\n        }, RENDER_HINT_RESPONSE_TIME_MS, false),\n      }\n    });\n\n    this.on('ready', transport => {\n      transport.on('message', message => {\n        this._log.debug('Incoming: ', message);\n        switch (message.type) {\n          case 'render_hints':\n            this._processHintResults((message && message.subscriber && message.subscriber.hints) || []);\n            break;\n          default:\n            this._log.warn('Unknown message type: ', message.type);\n            break;\n        }\n      });\n\n      // NOTE(mpatwardhan): When transport is set (either 1st time of after vms failover)\n      // resend all track states.\n      this._sendAllHints();\n    });\n  }\n\n  _sendAllHints() {\n    // to force sending all hints simply mark all tracks as dirty.\n    Array.from(this._trackSidsToRenderHints.keys()).forEach(trackSid => {\n      const trackState = this._trackSidsToRenderHints.get(trackSid);\n      if (trackState.renderDimensions) {\n        trackState.isDimensionDirty = true;\n      }\n\n      if ('enabled' in trackState) {\n        trackState.isEnabledDirty = true;\n      }\n    });\n    this._sendHints();\n  }\n\n  _processHintResults(hintResults) {\n    this._responseTimer.clear();\n    this._responseTimer.setDelay(RENDER_HINT_RESPONSE_TIME_MS);\n    hintResults.forEach(hintResult => {\n      if (hintResult.result !== 'OK') {\n        this._log.debug('Server error processing hint:', hintResult);\n      }\n    });\n    this._sendHints();\n  }\n\n  _sendHints() {\n    if (!this._transport || this._responseTimer.isSet) {\n      return;\n    }\n\n    const hints = [];\n    Array.from(this._trackSidsToRenderHints.keys()).forEach(trackSid => {\n      const trackState = this._trackSidsToRenderHints.get(trackSid);\n      if (trackState.isEnabledDirty || trackState.isDimensionDirty) {\n        const mspHint = {\n          'track': trackSid,\n        };\n        if (trackState.isEnabledDirty) {\n          mspHint.enabled = trackState.enabled;\n          trackState.isEnabledDirty = false;\n        }\n        if (trackState.isDimensionDirty) {\n          // eslint-disable-next-line camelcase\n          mspHint.render_dimensions = trackState.renderDimensions;\n          trackState.isDimensionDirty = false;\n        }\n        hints.push(mspHint);\n      }\n    });\n\n    if (hints.length > 0) {\n      const payLoad = {\n        type: 'render_hints',\n        subscriber: {\n          id: messageId++,\n          hints\n        }\n      };\n      this._log.debug('Outgoing: ', payLoad);\n      this._transport.publish(payLoad);\n      this._responseTimer.start();\n    }\n  }\n\n  /**\n   * @param {Track.SID} trackSid\n   * @param {ClientRenderHint} renderHint\n   */\n  setTrackHint(trackSid, renderHint) {\n    const trackState = this._trackSidsToRenderHints.get(trackSid) || { isEnabledDirty: false, isDimensionDirty: false };\n    if ('enabled' in renderHint && trackState.enabled !== renderHint.enabled) {\n      trackState.enabled = !!renderHint.enabled;\n      trackState.isEnabledDirty = true;\n    }\n\n    if (renderHint.renderDimensions && !isDeepEqual(renderHint.renderDimensions, trackState.renderDimensions)) {\n      // eslint-disable-next-line camelcase\n      trackState.renderDimensions = renderHint.renderDimensions;\n      trackState.isDimensionDirty = true;\n    }\n    this._trackSidsToRenderHints.set(trackSid, trackState);\n    this._sendHints();\n  }\n\n  /**\n   * must be called when track is unsubscribed.\n   * @param {Track.SID} trackSid\n   */\n  clearTrackHint(trackSid) {\n    this._trackSidsToRenderHints.delete(trackSid);\n  }\n}\n\n\nmodule.exports = RenderHintsSignaling;\n"]},"metadata":{},"sourceType":"script"}