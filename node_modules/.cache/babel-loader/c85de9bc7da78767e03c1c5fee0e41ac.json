{"ast":null,"code":"'use strict'; // Cached copy of the <canvas> used to check silent video frames.\n\nvar canvas = null;\nvar N_SAMPLES = 3;\nvar SAMPLE_HEIGHT = 50;\nvar SAMPLE_INTERVAL_MS = 250;\nvar SAMPLE_WIDTH = 50;\n/**\n * Check whether the current video frame is silent by selecting a 50x50\n * sample and calculating the max value of the pixel data. If it is 0, then\n * the frame is considered to be silent.\n * @private\n * @param {HTMLVideoElement} el\n * @returns {boolean} true if silent, false if not\n */\n\nfunction checkSilence(el) {\n  try {\n    var context = canvas.getContext('2d');\n    context.drawImage(el, 0, 0, SAMPLE_WIDTH, SAMPLE_HEIGHT);\n    var frame = context.getImageData(0, 0, SAMPLE_WIDTH, SAMPLE_HEIGHT);\n    var frameDataWithoutAlpha = frame.data.filter(function (item, i) {\n      return (i + 1) % 4;\n    });\n    var max = Math.max.apply(Math, frameDataWithoutAlpha);\n    return max === 0;\n  } catch (ex) {\n    // eslint-disable-next-line no-console\n    console.log('Error checking silence: ', ex);\n    return false;\n  }\n}\n/**\n * Detect whether the video stream rendered by the given HTMLVideoElement is silent.\n * @param {HTMLVideoElement} el\n * @returns {Promise<boolean>} true if silent, false if not.\n */\n\n\nfunction detectSilentVideo(el) {\n  // Create the canvas when detectSilentVideo() is called for the\n  // first time.\n  canvas = canvas || document.createElement('canvas'); // Resolve the returned Promise with true if 3 consecutive sample\n  // frames from the video being played by the HTMLVideoElement are\n  // silent.\n\n  return new Promise(function (resolve) {\n    var samplesLeft = N_SAMPLES;\n    setTimeout(function doCheckSilence() {\n      samplesLeft--;\n\n      if (!checkSilence(el)) {\n        return resolve(false);\n      }\n\n      if (samplesLeft > 0) {\n        return setTimeout(doCheckSilence, SAMPLE_INTERVAL_MS);\n      }\n\n      return resolve(true);\n    }, SAMPLE_INTERVAL_MS);\n  });\n}\n\nmodule.exports = detectSilentVideo;","map":{"version":3,"mappings":"AAAA,a,CAEA;;AACA,IAAIA,MAAM,GAAG,IAAb;AAEA,IAAMC,SAAS,GAAG,CAAlB;AACA,IAAMC,aAAa,GAAG,EAAtB;AACA,IAAMC,kBAAkB,GAAG,GAA3B;AACA,IAAMC,YAAY,GAAG,EAArB;AAEA;;;;;;;;;AAQA,SAASC,YAAT,CAAsBC,EAAtB,EAAwB;EACtB,IAAI;IACF,IAAMC,OAAO,GAAGP,MAAM,CAACQ,UAAP,CAAkB,IAAlB,CAAhB;IACAD,OAAO,CAACE,SAAR,CAAkBH,EAAlB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4BF,YAA5B,EAA0CF,aAA1C;IACA,IAAMQ,KAAK,GAAGH,OAAO,CAACI,YAAR,CAAqB,CAArB,EAAwB,CAAxB,EAA2BP,YAA3B,EAAyCF,aAAzC,CAAd;IACA,IAAMU,qBAAqB,GAAGF,KAAK,CAACG,IAAN,CAAWC,MAAX,CAAkB,UAACC,IAAD,EAAOC,CAAP,EAAQ;MAAK,QAACA,CAAC,GAAG,CAAL,IAAU,CAAV;IAAW,CAA1C,CAA9B;IACA,IAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,CAASE,KAAT,CAAeD,IAAf,EAAqBN,qBAArB,CAAZ;IACA,OAAOK,GAAG,KAAK,CAAf;EACD,CAPD,CAOE,OAAOG,EAAP,EAAW;IACX;IACAC,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCF,EAAxC;IACA,OAAO,KAAP;EACD;AAEF;AAED;;;;;;;AAKA,SAASG,iBAAT,CAA2BjB,EAA3B,EAA6B;EAC3B;EACA;EACAN,MAAM,GAAGA,MAAM,IAAIwB,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAnB,CAH2B,CAK3B;EACA;EACA;;EACA,OAAO,IAAIC,OAAJ,CAAY,mBAAO;IACxB,IAAIC,WAAW,GAAG1B,SAAlB;IACA2B,UAAU,CAAC,SAASC,cAAT,GAAuB;MAChCF,WAAW;;MACX,IAAI,CAACtB,YAAY,CAACC,EAAD,CAAjB,EAAuB;QACrB,OAAOwB,OAAO,CAAC,KAAD,CAAd;MACD;;MACD,IAAIH,WAAW,GAAG,CAAlB,EAAqB;QACnB,OAAOC,UAAU,CAACC,cAAD,EAAiB1B,kBAAjB,CAAjB;MACD;;MACD,OAAO2B,OAAO,CAAC,IAAD,CAAd;IACD,CATS,EASP3B,kBATO,CAAV;EAUD,CAZM,CAAP;AAaD;;AAED4B,MAAM,CAACC,OAAP,GAAiBT,iBAAjB","names":["canvas","N_SAMPLES","SAMPLE_HEIGHT","SAMPLE_INTERVAL_MS","SAMPLE_WIDTH","checkSilence","el","context","getContext","drawImage","frame","getImageData","frameDataWithoutAlpha","data","filter","item","i","max","Math","apply","ex","console","log","detectSilentVideo","document","createElement","Promise","samplesLeft","setTimeout","doCheckSilence","resolve","module","exports"],"sources":["/home/samliu/repos/ieee/tp-robot/node_modules/twilio-video/lib/util/detectsilentvideo.js"],"sourcesContent":["'use strict';\n\n// Cached copy of the <canvas> used to check silent video frames.\nlet canvas = null;\n\nconst N_SAMPLES = 3;\nconst SAMPLE_HEIGHT = 50;\nconst SAMPLE_INTERVAL_MS = 250;\nconst SAMPLE_WIDTH = 50;\n\n/**\n * Check whether the current video frame is silent by selecting a 50x50\n * sample and calculating the max value of the pixel data. If it is 0, then\n * the frame is considered to be silent.\n * @private\n * @param {HTMLVideoElement} el\n * @returns {boolean} true if silent, false if not\n */\nfunction checkSilence(el) {\n  try {\n    const context = canvas.getContext('2d');\n    context.drawImage(el, 0, 0, SAMPLE_WIDTH, SAMPLE_HEIGHT);\n    const frame = context.getImageData(0, 0, SAMPLE_WIDTH, SAMPLE_HEIGHT);\n    const frameDataWithoutAlpha = frame.data.filter((item, i) => (i + 1) % 4);\n    const max = Math.max.apply(Math, frameDataWithoutAlpha);\n    return max === 0;\n  } catch (ex) {\n    // eslint-disable-next-line no-console\n    console.log('Error checking silence: ', ex);\n    return false;\n  }\n\n}\n\n/**\n * Detect whether the video stream rendered by the given HTMLVideoElement is silent.\n * @param {HTMLVideoElement} el\n * @returns {Promise<boolean>} true if silent, false if not.\n */\nfunction detectSilentVideo(el) {\n  // Create the canvas when detectSilentVideo() is called for the\n  // first time.\n  canvas = canvas || document.createElement('canvas');\n\n  // Resolve the returned Promise with true if 3 consecutive sample\n  // frames from the video being played by the HTMLVideoElement are\n  // silent.\n  return new Promise(resolve => {\n    let samplesLeft = N_SAMPLES;\n    setTimeout(function doCheckSilence() {\n      samplesLeft--;\n      if (!checkSilence(el)) {\n        return resolve(false);\n      }\n      if (samplesLeft > 0) {\n        return setTimeout(doCheckSilence, SAMPLE_INTERVAL_MS);\n      }\n      return resolve(true);\n    }, SAMPLE_INTERVAL_MS);\n  });\n}\n\nmodule.exports = detectSilentVideo;\n"]},"metadata":{},"sourceType":"script"}