{"ast":null,"code":"'use strict';\n\nvar CancelablePromise = require('../../util/cancelablepromise');\n\nvar DefaultPeerConnectionManager = require('./peerconnectionmanager');\n\nvar DefaultRoomV2 = require('./room');\n\nvar DefaultTransport = require('./twilioconnectiontransport');\n\nvar _a = require('../../util/twilio-video-errors'),\n    SignalingConnectionDisconnectedError = _a.SignalingConnectionDisconnectedError,\n    SignalingIncomingMessageInvalidError = _a.SignalingIncomingMessageInvalidError;\n\nvar _b = require('../../util'),\n    flatMap = _b.flatMap,\n    createRoomConnectEventPayload = _b.createRoomConnectEventPayload;\n\nfunction createCancelableRoomSignalingPromise(token, wsServer, localParticipant, encodingParameters, preferredCodecs, options) {\n  options = Object.assign({\n    PeerConnectionManager: DefaultPeerConnectionManager,\n    RoomV2: DefaultRoomV2,\n    Transport: DefaultTransport\n  }, options);\n  var adaptiveSimulcast = preferredCodecs.video[0] && preferredCodecs.video[0].adaptiveSimulcast === true;\n  var PeerConnectionManager = options.PeerConnectionManager,\n      RoomV2 = options.RoomV2,\n      Transport = options.Transport,\n      iceServers = options.iceServers,\n      log = options.log;\n  var peerConnectionManager = new PeerConnectionManager(encodingParameters, preferredCodecs, options);\n  var trackSenders = flatMap(localParticipant.tracks, function (trackV2) {\n    return [trackV2.trackTransceiver];\n  });\n  peerConnectionManager.setTrackSenders(trackSenders);\n  var cancellationError = new Error('Canceled');\n  var transport;\n  var cancelablePromise = new CancelablePromise(function (resolve, reject, isCanceled) {\n    var onIced = function (iceServers) {\n      if (isCanceled()) {\n        reject(cancellationError);\n        return Promise.reject(cancellationError);\n      }\n\n      log.debug('Got ICE servers:', iceServers);\n      options.iceServers = iceServers;\n      peerConnectionManager.setConfiguration(options);\n      return peerConnectionManager.createAndOffer().then(function () {\n        if (isCanceled()) {\n          reject(cancellationError);\n          throw cancellationError;\n        }\n\n        log.debug('createAndOffer() succeeded.'); // NOTE(mmalavalli): PeerConnectionManager#createAndOffer() queues the\n        // initial offer in the event queue for the 'description' event. So,\n        // we are dequeueing to prevent the spurious 'update' message sent by\n        // the client after connecting to a room.\n\n        peerConnectionManager.dequeue('description');\n      }).catch(function (error) {\n        log.error('createAndOffer() failed:', error);\n        reject(error);\n        throw error;\n      });\n    };\n\n    var automaticSubscription = options.automaticSubscription,\n        bandwidthProfile = options.bandwidthProfile,\n        dominantSpeaker = options.dominantSpeaker,\n        environment = options.environment,\n        eventObserver = options.eventObserver,\n        loggerName = options.loggerName,\n        logLevel = options.logLevel,\n        name = options.name,\n        networkMonitor = options.networkMonitor,\n        networkQuality = options.networkQuality,\n        notifyWarnings = options.notifyWarnings,\n        realm = options.realm,\n        sdpSemantics = options.sdpSemantics; // decide which msp channels to request\n    // dominantSpeaker, networkQuality\n\n    var trackPriority = !!bandwidthProfile;\n    var trackSwitchOff = !!bandwidthProfile;\n    var renderHints = !!bandwidthProfile && (options.clientTrackSwitchOffControl !== 'disabled' || options.contentPreferencesMode !== 'disabled');\n    var transportOptions = Object.assign({\n      adaptiveSimulcast: adaptiveSimulcast,\n      automaticSubscription: automaticSubscription,\n      dominantSpeaker: dominantSpeaker,\n      environment: environment,\n      eventObserver: eventObserver,\n      loggerName: loggerName,\n      logLevel: logLevel,\n      networkMonitor: networkMonitor,\n      networkQuality: networkQuality,\n      notifyWarnings: notifyWarnings,\n      iceServers: iceServers,\n      onIced: onIced,\n      realm: realm,\n      renderHints: renderHints,\n      sdpSemantics: sdpSemantics,\n      trackPriority: trackPriority,\n      trackSwitchOff: trackSwitchOff\n    }, bandwidthProfile ? {\n      bandwidthProfile: bandwidthProfile\n    } : {});\n    transport = new Transport(name, token, localParticipant, peerConnectionManager, wsServer, transportOptions);\n    var connectEventPayload = createRoomConnectEventPayload(options);\n    eventObserver.emit('event', connectEventPayload);\n    transport.once('connected', function (initialState) {\n      log.debug('Transport connected:', initialState);\n\n      if (isCanceled()) {\n        reject(cancellationError);\n        return;\n      }\n\n      var localParticipantState = initialState.participant;\n\n      if (!localParticipantState) {\n        reject(new SignalingIncomingMessageInvalidError());\n        return;\n      }\n\n      var signalingRegion = initialState.options.signaling_region;\n      localParticipant.setSignalingRegion(signalingRegion);\n      resolve(new RoomV2(localParticipant, initialState, transport, peerConnectionManager, options));\n    });\n    transport.once('stateChanged', function (state, error) {\n      if (state === 'disconnected') {\n        transport = null;\n        reject(error || new SignalingConnectionDisconnectedError());\n      } else {\n        log.debug('Transport state changed:', state);\n      }\n    });\n  }, function () {\n    if (transport) {\n      transport.disconnect();\n      transport = null;\n    }\n  });\n  cancelablePromise.catch(function () {\n    if (transport) {\n      transport.disconnect();\n      transport = null;\n    }\n\n    peerConnectionManager.close();\n  });\n  return cancelablePromise;\n}\n\nmodule.exports = createCancelableRoomSignalingPromise;","map":{"version":3,"mappings":"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","names":["CancelablePromise","require","DefaultPeerConnectionManager","DefaultRoomV2","DefaultTransport","SignalingConnectionDisconnectedError","SignalingIncomingMessageInvalidError","flatMap","createRoomConnectEventPayload","createCancelableRoomSignalingPromise","token","wsServer","localParticipant","encodingParameters","preferredCodecs","options","Object","assign","PeerConnectionManager","RoomV2","Transport","adaptiveSimulcast","video","iceServers","log","peerConnectionManager","trackSenders","tracks","trackV2","trackTransceiver","setTrackSenders","cancellationError","Error","transport","cancelablePromise","resolve","reject","isCanceled","onIced","Promise","debug","setConfiguration","createAndOffer","then","dequeue","catch","error","bandwidthProfile","dominantSpeaker","environment","eventObserver","loggerName","logLevel","name","networkMonitor","networkQuality","notifyWarnings","realm","sdpSemantics","trackPriority","trackSwitchOff","renderHints","clientTrackSwitchOffControl","contentPreferencesMode","transportOptions","automaticSubscription","connectEventPayload","emit","once","initialState","localParticipantState","signalingRegion","signaling_region","setSignalingRegion","state","disconnect","close","module","exports"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/signaling/v2/cancelableroomsignalingpromise.js"],"sourcesContent":["'use strict';\n\nconst CancelablePromise = require('../../util/cancelablepromise');\nconst DefaultPeerConnectionManager = require('./peerconnectionmanager');\nconst DefaultRoomV2 = require('./room');\nconst DefaultTransport = require('./twilioconnectiontransport');\n\nconst {\n  SignalingConnectionDisconnectedError,\n  SignalingIncomingMessageInvalidError\n} = require('../../util/twilio-video-errors');\n\nconst { flatMap, createRoomConnectEventPayload } = require('../../util');\n\nfunction createCancelableRoomSignalingPromise(token, wsServer, localParticipant, encodingParameters, preferredCodecs, options) {\n  options = Object.assign({\n    PeerConnectionManager: DefaultPeerConnectionManager,\n    RoomV2: DefaultRoomV2,\n    Transport: DefaultTransport\n  }, options);\n\n  const adaptiveSimulcast = preferredCodecs.video[0] &&  preferredCodecs.video[0].adaptiveSimulcast === true;\n  const { PeerConnectionManager, RoomV2, Transport, iceServers, log } = options;\n  const peerConnectionManager = new PeerConnectionManager(encodingParameters, preferredCodecs, options);\n  const trackSenders = flatMap(localParticipant.tracks, trackV2 => [trackV2.trackTransceiver]);\n  peerConnectionManager.setTrackSenders(trackSenders);\n\n  const cancellationError = new Error('Canceled');\n\n  let transport;\n\n  const cancelablePromise = new CancelablePromise((resolve, reject, isCanceled) => {\n    const onIced = iceServers => {\n      if (isCanceled()) {\n        reject(cancellationError);\n        return Promise.reject(cancellationError);\n      }\n      log.debug('Got ICE servers:', iceServers);\n      options.iceServers = iceServers;\n      peerConnectionManager.setConfiguration(options);\n\n      return peerConnectionManager.createAndOffer().then(() => {\n        if (isCanceled()) {\n          reject(cancellationError);\n          throw cancellationError;\n        }\n        log.debug('createAndOffer() succeeded.');\n        // NOTE(mmalavalli): PeerConnectionManager#createAndOffer() queues the\n        // initial offer in the event queue for the 'description' event. So,\n        // we are dequeueing to prevent the spurious 'update' message sent by\n        // the client after connecting to a room.\n        peerConnectionManager.dequeue('description');\n      }).catch(error => {\n        log.error('createAndOffer() failed:', error);\n        reject(error);\n        throw error;\n      });\n    };\n\n    const {\n      automaticSubscription,\n      bandwidthProfile,\n      dominantSpeaker,\n      environment,\n      eventObserver,\n      loggerName,\n      logLevel,\n      name,\n      networkMonitor,\n      networkQuality,\n      notifyWarnings,\n      realm,\n      sdpSemantics,\n    } = options;\n\n    // decide which msp channels to request\n    // dominantSpeaker, networkQuality\n    const trackPriority = !!bandwidthProfile;\n    const trackSwitchOff = !!bandwidthProfile;\n    const renderHints = !!bandwidthProfile &&\n      (options.clientTrackSwitchOffControl !== 'disabled' || options.contentPreferencesMode !== 'disabled');\n\n    const transportOptions = Object.assign({\n      adaptiveSimulcast,\n      automaticSubscription,\n      dominantSpeaker,\n      environment,\n      eventObserver,\n      loggerName,\n      logLevel,\n      networkMonitor,\n      networkQuality,\n      notifyWarnings,\n      iceServers,\n      onIced,\n      realm,\n      renderHints,\n      sdpSemantics,\n      trackPriority,\n      trackSwitchOff\n    }, bandwidthProfile ? {\n      bandwidthProfile\n    } : {});\n\n    transport = new Transport(\n      name,\n      token,\n      localParticipant,\n      peerConnectionManager,\n      wsServer,\n      transportOptions);\n\n    const connectEventPayload = createRoomConnectEventPayload(options);\n    eventObserver.emit('event', connectEventPayload);\n\n    transport.once('connected', initialState => {\n      log.debug('Transport connected:', initialState);\n      if (isCanceled()) {\n        reject(cancellationError);\n        return;\n      }\n      const { participant: localParticipantState } = initialState;\n      if (!localParticipantState) {\n        reject(new SignalingIncomingMessageInvalidError());\n        return;\n      }\n\n      const { options: { signaling_region: signalingRegion } } = initialState;\n      localParticipant.setSignalingRegion(signalingRegion);\n      resolve(new RoomV2(localParticipant, initialState, transport, peerConnectionManager, options));\n    });\n\n    transport.once('stateChanged', (state, error) => {\n      if (state === 'disconnected') {\n        transport = null;\n        reject(error || new SignalingConnectionDisconnectedError());\n      } else {\n        log.debug('Transport state changed:', state);\n      }\n    });\n  }, () => {\n    if (transport) {\n      transport.disconnect();\n      transport = null;\n    }\n  });\n\n  cancelablePromise.catch(() => {\n    if (transport) {\n      transport.disconnect();\n      transport = null;\n    }\n    peerConnectionManager.close();\n  });\n\n  return cancelablePromise;\n}\n\nmodule.exports = createCancelableRoomSignalingPromise;\n"]},"metadata":{},"sourceType":"script"}