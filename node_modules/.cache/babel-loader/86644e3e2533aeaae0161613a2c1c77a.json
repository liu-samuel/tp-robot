{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mosToScore = exports.calculateMOS = void 0;\nvar r0 = 94.768; // Constant used in computing \"rFactor\".\n// copied from https://code.hq.twilio.com/client/sdk-frd/blob/master/voice/voice-mos-calculation.md\n\nfunction calculateMOS(rtt, jitter, fractionLost) {\n  // Compute the effective latency.\n  var effectiveLatency = rtt + jitter * 2 + 10; // Compute the initial \"rFactor\" from effective latency.\n\n  var rFactor = 0;\n\n  switch (true) {\n    case effectiveLatency < 160:\n      rFactor = r0 - effectiveLatency / 40;\n      break;\n\n    case effectiveLatency < 1000:\n      rFactor = r0 - (effectiveLatency - 120) / 10;\n      break;\n  } // Adjust \"rFactor\" with the fraction of packets lost.\n\n\n  switch (true) {\n    case fractionLost <= rFactor / 2.5:\n      rFactor = Math.max(rFactor - fractionLost * 2.5, 6.52);\n      break;\n\n    default:\n      rFactor = 0;\n      break;\n  } // Compute MOS from \"rFactor\".\n\n\n  var mos = 1 + 0.035 * rFactor + 0.000007 * rFactor * (rFactor - 60) * (100 - rFactor);\n  return mos;\n}\n\nexports.calculateMOS = calculateMOS;\n\nfunction mosToScore(mosValue) {\n  var score = 0;\n\n  if (!mosValue) {\n    score = 0;\n  } else if (mosValue > 4.2) {\n    score = 5;\n  } else if (mosValue > 4.0) {\n    score = 4;\n  } else if (mosValue > 3.6) {\n    score = 3;\n  } else if (mosValue > 3) {\n    score = 2;\n  } else {\n    score = 1;\n  }\n\n  return score;\n}\n\nexports.mosToScore = mosToScore;","map":{"version":3,"mappings":";;;;;;AAAA,IAAMA,EAAE,GAAG,MAAX,C,CAAmB;AACnB;;AACA,SAAgBC,YAAhB,CAA6BC,GAA7B,EAA0CC,MAA1C,EAA0DC,YAA1D,EAA8E;EAC5E;EACA,IAAMC,gBAAgB,GAAWH,GAAG,GAAIC,MAAM,GAAG,CAAhB,GAAqB,EAAtD,CAF4E,CAI5E;;EACA,IAAIG,OAAO,GAAG,CAAd;;EACA,QAAQ,IAAR;IACE,KAAKD,gBAAgB,GAAG,GAAxB;MACEC,OAAO,GAAGN,EAAE,GAAIK,gBAAgB,GAAG,EAAnC;MACA;;IACF,KAAKA,gBAAgB,GAAG,IAAxB;MACEC,OAAO,GAAGN,EAAE,GAAI,CAACK,gBAAgB,GAAG,GAApB,IAA2B,EAA3C;MACA;EANJ,CAN4E,CAe5E;;;EACA,QAAQ,IAAR;IACE,KAAKD,YAAY,IAAKE,OAAO,GAAG,GAAhC;MACEA,OAAO,GAAGC,IAAI,CAACC,GAAL,CAASF,OAAO,GAAGF,YAAY,GAAG,GAAlC,EAAuC,IAAvC,CAAV;MACA;;IACF;MACEE,OAAO,GAAG,CAAV;MACA;EANJ,CAhB4E,CAyB5E;;;EACA,IAAMG,GAAG,GAAW,IACjB,QAAQH,OADS,GAEjB,WAAWA,OAAZ,IACCA,OAAO,GAAG,EADX,KAEC,MAAMA,OAFP,CAFF;EAMA,OAAOG,GAAP;AACD;;AAjCDC;;AAmCA,SAAgBC,UAAhB,CAA2BC,QAA3B,EAA0D;EACxD,IAAIC,KAAK,GAAG,CAAZ;;EACA,IAAI,CAACD,QAAL,EAAe;IACbC,KAAK,GAAG,CAAR;EACD,CAFD,MAEO,IAAKD,QAAQ,GAAG,GAAhB,EAAqB;IAC1BC,KAAK,GAAG,CAAR;EACD,CAFM,MAEA,IAAKD,QAAQ,GAAG,GAAhB,EAAqB;IAC1BC,KAAK,GAAG,CAAR;EACD,CAFM,MAEA,IAAKD,QAAQ,GAAG,GAAhB,EAAqB;IAC1BC,KAAK,GAAG,CAAR;EACD,CAFM,MAEA,IAAKD,QAAQ,GAAG,CAAhB,EAAmB;IACxBC,KAAK,GAAG,CAAR;EACD,CAFM,MAEC;IACNA,KAAK,GAAG,CAAR;EACD;;EACD,OAAOA,KAAP;AACD;;AAhBDH","names":["r0","calculateMOS","rtt","jitter","fractionLost","effectiveLatency","rFactor","Math","max","mos","exports","mosToScore","mosValue","score"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/preflight/mos.ts"],"sourcesContent":["const r0 = 94.768; // Constant used in computing \"rFactor\".\n// copied from https://code.hq.twilio.com/client/sdk-frd/blob/master/voice/voice-mos-calculation.md\nexport function calculateMOS(rtt: number, jitter: number, fractionLost: number): number {\n  // Compute the effective latency.\n  const effectiveLatency: number = rtt + (jitter * 2) + 10;\n\n  // Compute the initial \"rFactor\" from effective latency.\n  let rFactor = 0;\n  switch (true) {\n    case effectiveLatency < 160:\n      rFactor = r0 - (effectiveLatency / 40);\n      break;\n    case effectiveLatency < 1000:\n      rFactor = r0 - ((effectiveLatency - 120) / 10);\n      break;\n  }\n\n  // Adjust \"rFactor\" with the fraction of packets lost.\n  switch (true) {\n    case fractionLost <= (rFactor / 2.5):\n      rFactor = Math.max(rFactor - fractionLost * 2.5, 6.52);\n      break;\n    default:\n      rFactor = 0;\n      break;\n  }\n\n  // Compute MOS from \"rFactor\".\n  const mos: number = 1 +\n    (0.035 * rFactor) +\n    (0.000007 * rFactor) *\n    (rFactor - 60) *\n    (100 - rFactor);\n\n  return mos;\n}\n\nexport function mosToScore(mosValue: number|null|undefined): number {\n  let score = 0;\n  if (!mosValue) {\n    score = 0;\n  } else if  (mosValue > 4.2) {\n    score = 5;\n  } else if  (mosValue > 4.0) {\n    score = 4;\n  } else if  (mosValue > 3.6) {\n    score = 3;\n  } else if  (mosValue > 3) {\n    score = 2;\n  } else  {\n    score = 1;\n  }\n  return score;\n}\n"]},"metadata":{},"sourceType":"script"}