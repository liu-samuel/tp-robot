{"ast":null,"code":"'use strict';\n\nvar getMediaSections = require('./').getMediaSections;\n/**\n * An {@link TrackMatcher} matches an RTCTrackEvent with a MediaStreamTrack\n * ID based on the MID of the underlying RTCRtpTransceiver.\n */\n\n\nvar TrackMatcher =\n/** @class */\nfunction () {\n  /**\n   * Construct an {@link TrackMatcher}.\n   */\n  function TrackMatcher() {\n    Object.defineProperties(this, {\n      _midsToTrackIds: {\n        value: new Map(),\n        writable: true\n      }\n    });\n  }\n  /**\n   * Match a given MediaStreamTrack with its ID.\n   * @param {RTCTrackEvent} event\n   * @returns {?Track.ID}\n   */\n\n\n  TrackMatcher.prototype.match = function (event) {\n    return this._midsToTrackIds.get(event.transceiver.mid) || null;\n  };\n  /**\n   * Update the {@link TrackMatcher} with a new SDP.\n   * @param {string} sdp\n   */\n\n\n  TrackMatcher.prototype.update = function (sdp) {\n    var sections = getMediaSections(sdp, '(audio|video)');\n    this._midsToTrackIds = sections.reduce(function (midsToTrackIds, section) {\n      var midMatches = section.match(/^a=mid:(.+)$/m) || [];\n      var trackIdMatches = section.match(/^a=msid:.+ (.+)$/m) || [];\n      var mid = midMatches[1];\n      var trackId = trackIdMatches[1];\n      return mid && trackId ? midsToTrackIds.set(mid, trackId) : midsToTrackIds;\n    }, this._midsToTrackIds);\n  };\n\n  return TrackMatcher;\n}();\n\nmodule.exports = TrackMatcher;","map":{"version":3,"mappings":"AAAA;;AAEQ,oBAAgB,GAAKA,OAAO,CAAC,IAAD,CAAP,CAAaC,gBAAlC;AAER;;;;;;AAIA;AAAA;AAAA;EACE;;;EAGA;IACEC,MAAM,CAACC,gBAAP,CAAwB,IAAxB,EAA8B;MAC5BC,eAAe,EAAE;QACfC,KAAK,EAAE,IAAIC,GAAJ,EADQ;QAEfC,QAAQ,EAAE;MAFK;IADW,CAA9B;EAMD;EAED;;;;;;;EAKAC,yCAAMC,KAAN,EAAW;IACT,OAAO,KAAKL,eAAL,CAAqBM,GAArB,CAAyBD,KAAK,CAACE,WAAN,CAAkBC,GAA3C,KAAmD,IAA1D;EACD,CAFD;EAIA;;;;;;EAIAJ,0CAAOK,GAAP,EAAU;IACR,IAAMC,QAAQ,GAAGb,gBAAgB,CAACY,GAAD,EAAM,eAAN,CAAjC;IACA,KAAKT,eAAL,GAAuBU,QAAQ,CAACC,MAAT,CAAgB,UAACC,cAAD,EAAiBC,OAAjB,EAAwB;MAC7D,IAAMC,UAAU,GAAGD,OAAO,CAACE,KAAR,CAAc,eAAd,KAAkC,EAArD;MACA,IAAMC,cAAc,GAAGH,OAAO,CAACE,KAAR,CAAc,mBAAd,KAAsC,EAA7D;MACA,IAAMP,GAAG,GAAGM,UAAU,CAAC,CAAD,CAAtB;MACA,IAAMG,OAAO,GAAGD,cAAc,CAAC,CAAD,CAA9B;MACA,OAAOR,GAAG,IAAIS,OAAP,GAAiBL,cAAc,CAACM,GAAf,CAAmBV,GAAnB,EAAwBS,OAAxB,CAAjB,GAAoDL,cAA3D;IACD,CANsB,EAMpB,KAAKZ,eANe,CAAvB;EAOD,CATD;;EAUF;AAAC,CApCD;;AAsCAmB,MAAM,CAACC,OAAP,GAAiBhB,YAAjB","names":["require","getMediaSections","Object","defineProperties","_midsToTrackIds","value","Map","writable","TrackMatcher","event","get","transceiver","mid","sdp","sections","reduce","midsToTrackIds","section","midMatches","match","trackIdMatches","trackId","set","module","exports"],"sources":["/home/samliu/repos/ieee/tp-robot/node_modules/twilio-video/lib/util/sdp/trackmatcher.js"],"sourcesContent":["'use strict';\n\nconst { getMediaSections } = require('./');\n\n/**\n * An {@link TrackMatcher} matches an RTCTrackEvent with a MediaStreamTrack\n * ID based on the MID of the underlying RTCRtpTransceiver.\n */\nclass TrackMatcher {\n  /**\n   * Construct an {@link TrackMatcher}.\n   */\n  constructor() {\n    Object.defineProperties(this, {\n      _midsToTrackIds: {\n        value: new Map(),\n        writable: true\n      }\n    });\n  }\n\n  /**\n   * Match a given MediaStreamTrack with its ID.\n   * @param {RTCTrackEvent} event\n   * @returns {?Track.ID}\n   */\n  match(event) {\n    return this._midsToTrackIds.get(event.transceiver.mid) || null;\n  }\n\n  /**\n   * Update the {@link TrackMatcher} with a new SDP.\n   * @param {string} sdp\n   */\n  update(sdp) {\n    const sections = getMediaSections(sdp, '(audio|video)');\n    this._midsToTrackIds = sections.reduce((midsToTrackIds, section) => {\n      const midMatches = section.match(/^a=mid:(.+)$/m) || [];\n      const trackIdMatches = section.match(/^a=msid:.+ (.+)$/m) || [];\n      const mid = midMatches[1];\n      const trackId = trackIdMatches[1];\n      return mid && trackId ? midsToTrackIds.set(mid, trackId) : midsToTrackIds;\n    }, this._midsToTrackIds);\n  }\n}\n\nmodule.exports = TrackMatcher;\n"]},"metadata":{},"sourceType":"script"}