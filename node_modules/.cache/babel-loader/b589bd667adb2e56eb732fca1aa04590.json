{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar MediaStreamTrack = require('./webrtc').MediaStreamTrack;\n\nvar _a = require('./util'),\n    asLocalTrack = _a.asLocalTrack,\n    asLocalTrackPublication = _a.asLocalTrackPublication,\n    trackClass = _a.trackClass;\n\nvar _b = require('./util/constants'),\n    E = _b.typeErrors,\n    trackPriority = _b.trackPriority;\n\nvar validateLocalTrack = require('./util/validate').validateLocalTrack;\n\nvar _c = require('./media/track/es5'),\n    LocalAudioTrack = _c.LocalAudioTrack,\n    LocalDataTrack = _c.LocalDataTrack,\n    LocalVideoTrack = _c.LocalVideoTrack;\n\nvar LocalAudioTrackPublication = require('./media/track/localaudiotrackpublication');\n\nvar LocalDataTrackPublication = require('./media/track/localdatatrackpublication');\n\nvar LocalVideoTrackPublication = require('./media/track/localvideotrackpublication');\n\nvar Participant = require('./participant');\n/**\n * A {@link LocalParticipant} represents the local {@link Participant} in a\n * {@link Room}.\n * @extends Participant\n * @property {Map<Track.SID, LocalAudioTrackPublication>} audioTracks -\n *    The {@link LocalParticipant}'s {@link LocalAudioTrackPublication}s\n * @property {Map<Track.SID, LocalDataTrackPublication>} dataTracks -\n *    The {@link LocalParticipant}'s {@link LocalDataTrackPublication}s\n * @property {Map<Track.SID, LocalTrackPublication>} tracks -\n *    The {@link LocalParticipant}'s {@link LocalTrackPublication}s\n * @property {Map<Track.SID, LocalVideoTrackPublication>} videoTracks -\n *    The {@link LocalParticipant}'s {@link LocalVideoTrackPublication}s\n * @property {string} signalingRegion - The geographical region of the\n *     signaling edge the {@link LocalParticipant} is connected to.\n *\n * @emits RemoteParticipant#reconnected\n * @emits RemoteParticipant#reconnecting\n * @emits LocalParticipant#trackDimensionsChanged\n * @emits LocalParticipant#trackDisabled\n * @emits LocalParticipant#trackEnabled\n * @emits LocalParticipant#trackPublicationFailed\n * @emits LocalParticipant#trackPublished\n * @emits LocalParticipant#trackStarted\n * @emits LocalParticipant#trackStopped\n * @emits LocalParticipant#trackWarning\n * @emits LocalParticipant#trackWarningsCleared\n */\n\n\nvar LocalParticipant =\n/** @class */\nfunction (_super) {\n  __extends(LocalParticipant, _super);\n  /**\n   * Construct a {@link LocalParticipant}.\n   * @param {ParticipantSignaling} signaling\n   * @param {Array<LocalTrack>} localTracks\n   * @param {Object} options\n   */\n\n\n  function LocalParticipant(signaling, localTracks, options) {\n    var _this = this;\n\n    options = Object.assign({\n      LocalAudioTrack: LocalAudioTrack,\n      LocalVideoTrack: LocalVideoTrack,\n      LocalDataTrack: LocalDataTrack,\n      MediaStreamTrack: MediaStreamTrack,\n      LocalAudioTrackPublication: LocalAudioTrackPublication,\n      LocalVideoTrackPublication: LocalVideoTrackPublication,\n      LocalDataTrackPublication: LocalDataTrackPublication,\n      shouldStopLocalTracks: false,\n      tracks: localTracks\n    }, options);\n    var tracksToStop = options.shouldStopLocalTracks ? new Set(localTracks.filter(function (localTrack) {\n      return localTrack.kind !== 'data';\n    })) : new Set();\n    _this = _super.call(this, signaling, options) || this;\n    Object.defineProperties(_this, {\n      _eventObserver: {\n        value: options.eventObserver\n      },\n      _LocalAudioTrack: {\n        value: options.LocalAudioTrack\n      },\n      _LocalDataTrack: {\n        value: options.LocalDataTrack\n      },\n      _LocalVideoTrack: {\n        value: options.LocalVideoTrack\n      },\n      _MediaStreamTrack: {\n        value: options.MediaStreamTrack\n      },\n      _LocalAudioTrackPublication: {\n        value: options.LocalAudioTrackPublication\n      },\n      _LocalDataTrackPublication: {\n        value: options.LocalDataTrackPublication\n      },\n      _LocalVideoTrackPublication: {\n        value: options.LocalVideoTrackPublication\n      },\n      _tracksToStop: {\n        value: tracksToStop\n      },\n      signalingRegion: {\n        enumerable: true,\n        get: function () {\n          return signaling.signalingRegion;\n        }\n      }\n    });\n\n    _this._handleTrackSignalingEvents();\n\n    return _this;\n  }\n  /**\n   * @private\n   * @param {LocalTrack} track\n   * @param {Track.ID} id\n   * @param {Track.Priority} priority\n   * @returns {?LocalTrack}\n   */\n\n\n  LocalParticipant.prototype._addTrack = function (track, id, priority) {\n    var addedTrack = _super.prototype._addTrack.call(this, track, id);\n\n    if (addedTrack && this.state !== 'disconnected') {\n      this._addLocalTrack(track, priority);\n    }\n\n    return addedTrack;\n  };\n  /**\n   * @private\n   * @param {LocalTrack} track\n   * @param {Track.Priority} priority\n   * @returns {void}\n   */\n\n\n  LocalParticipant.prototype._addLocalTrack = function (track, priority) {\n    this._signaling.addTrack(track._trackSender, track.name, priority);\n\n    this._log.info(\"Added a new \" + trackClass(track, true) + \":\", track.id);\n\n    this._log.debug(trackClass(track, true) + \":\", track);\n  };\n  /**\n   * @private\n   * @param {LocalTrack} track\n   * @param {Track.ID} id\n   * @returns {?LocalTrack}\n   */\n\n\n  LocalParticipant.prototype._removeTrack = function (track, id) {\n    var removedTrack = _super.prototype._removeTrack.call(this, track, id);\n\n    if (removedTrack && this.state !== 'disconnected') {\n      this._signaling.removeTrack(track._trackSender);\n\n      this._log.info(\"Removed a \" + trackClass(track, true) + \":\", track.id);\n\n      this._log.debug(trackClass(track, true) + \":\", track);\n    }\n\n    return removedTrack;\n  };\n  /**\n   * Get the {@link LocalTrack} events to re-emit.\n   * @private\n   * @returns {Array<Array<string>>} events\n   */\n\n\n  LocalParticipant.prototype._getTrackEvents = function () {\n    return _super.prototype._getTrackEvents.call(this).concat([['disabled', 'trackDisabled'], ['enabled', 'trackEnabled'], ['stopped', 'trackStopped']]);\n  };\n\n  LocalParticipant.prototype.toString = function () {\n    return \"[LocalParticipant #\" + this._instanceId + (this.sid ? \": \" + this.sid : '') + \"]\";\n  };\n  /**\n   * @private\n   */\n\n\n  LocalParticipant.prototype._handleTrackSignalingEvents = function () {\n    var _this = this;\n\n    var log = this._log;\n\n    if (this.state === 'disconnected') {\n      return;\n    }\n\n    var localTrackDisabled = function (localTrack) {\n      var trackSignaling = _this._signaling.getPublication(localTrack._trackSender);\n\n      if (trackSignaling) {\n        trackSignaling.disable();\n        log.debug(\"Disabled the \" + trackClass(localTrack, true) + \":\", localTrack.id);\n      }\n    };\n\n    var localTrackEnabled = function (localTrack) {\n      var trackSignaling = _this._signaling.getPublication(localTrack._trackSender);\n\n      if (trackSignaling) {\n        trackSignaling.enable();\n        log.debug(\"Enabled the \" + trackClass(localTrack, true) + \":\", localTrack.id);\n      }\n    };\n\n    var localTrackStopped = function (localTrack) {\n      // NOTE(mroberts): We shouldn't need to check for `stop`, since DataTracks\n      // do not emit \"stopped\".\n      var trackSignaling = _this._signaling.getPublication(localTrack._trackSender);\n\n      if (trackSignaling) {\n        trackSignaling.stop();\n      }\n\n      return trackSignaling;\n    };\n\n    var stateChanged = function (state) {\n      log.debug('Transitioned to state:', state);\n\n      if (state === 'disconnected') {\n        log.debug('Removing LocalTrack event listeners');\n\n        _this._signaling.removeListener('stateChanged', stateChanged);\n\n        _this.removeListener('trackDisabled', localTrackDisabled);\n\n        _this.removeListener('trackEnabled', localTrackEnabled);\n\n        _this.removeListener('trackStopped', localTrackStopped); // NOTE(mmalavalli): Remove the stale MediaTrackSender clones so that we\n        // do not call replaceTrack() on their RTCRtpSenders.\n\n\n        _this._tracks.forEach(function (track) {\n          var trackSignaling = localTrackStopped(track);\n\n          if (trackSignaling) {\n            track._trackSender.removeClone(trackSignaling._trackTransceiver);\n          }\n        });\n\n        log.info(\"LocalParticipant disconnected. Stopping \" + _this._tracksToStop.size + \" automatically-acquired LocalTracks\");\n\n        _this._tracksToStop.forEach(function (track) {\n          track.stop();\n        });\n      } else if (state === 'connected') {\n        // NOTE(mmalavalli): Any transition to \"connected\" here is a result of\n        // successful signaling reconnection, and not a first-time establishment\n        // of the signaling connection.\n        log.info('reconnected'); // NOTE(mpatwardhan): `stateChanged` can get emitted with StateMachine locked.\n        // Do not signal  public events synchronously with lock held.\n\n        setTimeout(function () {\n          return _this.emit('reconnected');\n        }, 0);\n      }\n    };\n\n    this.on('trackDisabled', localTrackDisabled);\n    this.on('trackEnabled', localTrackEnabled);\n    this.on('trackStopped', localTrackStopped);\n\n    this._signaling.on('stateChanged', stateChanged);\n\n    this._tracks.forEach(function (track) {\n      _this._addLocalTrack(track, trackPriority.PRIORITY_STANDARD);\n\n      _this._getOrCreateLocalTrackPublication(track).catch(function (error) {\n        // Just log a warning for now.\n        log.warn(\"Failed to get or create LocalTrackPublication for \" + track + \":\", error);\n      });\n    });\n  };\n  /**\n   * @private\n   * @param {LocalTrack} localTrack\n   * @returns {Promise<LocalTrackPublication>}\n   */\n\n\n  LocalParticipant.prototype._getOrCreateLocalTrackPublication = function (localTrack) {\n    var localTrackPublication = getTrackPublication(this.tracks, localTrack);\n\n    if (localTrackPublication) {\n      return Promise.resolve(localTrackPublication);\n    }\n\n    var log = this._log;\n    var self = this;\n\n    var trackSignaling = this._signaling.getPublication(localTrack._trackSender);\n\n    if (!trackSignaling) {\n      return Promise.reject(new Error(\"Unexpected error: The \" + localTrack + \" cannot be published\"));\n    }\n\n    return new Promise(function (resolve, reject) {\n      function updated() {\n        var error = trackSignaling.error;\n\n        if (error) {\n          trackSignaling.removeListener('updated', updated);\n          log.warn(\"Failed to publish the \" + trackClass(localTrack, true) + \": \" + error.message);\n\n          self._removeTrack(localTrack, localTrack.id);\n\n          setTimeout(function () {\n            self.emit('trackPublicationFailed', error, localTrack);\n          });\n          reject(error);\n          return;\n        }\n\n        if (!self._tracks.has(localTrack.id)) {\n          trackSignaling.removeListener('updated', updated);\n          reject(new Error(\"The \" + localTrack + \" was unpublished\"));\n          return;\n        }\n\n        var sid = trackSignaling.sid;\n\n        if (!sid) {\n          return;\n        }\n\n        trackSignaling.removeListener('updated', updated);\n        var options = {\n          log: log,\n          LocalAudioTrackPublication: self._LocalAudioTrackPublication,\n          LocalDataTrackPublication: self._LocalDataTrackPublication,\n          LocalVideoTrackPublication: self._LocalVideoTrackPublication\n        };\n        localTrackPublication = getTrackPublication(self.tracks, localTrack);\n\n        var warningHandler = function (twilioWarningName) {\n          return self.emit('trackWarning', twilioWarningName, localTrackPublication);\n        };\n\n        var warningsClearedHandler = function () {\n          return self.emit('trackWarningsCleared', localTrackPublication);\n        };\n\n        var unpublish = function (publication) {\n          localTrackPublication.removeListener('trackWarning', warningHandler);\n          localTrackPublication.removeListener('trackWarningsCleared', warningsClearedHandler);\n          self.unpublishTrack(publication.track);\n        };\n\n        if (!localTrackPublication) {\n          localTrackPublication = asLocalTrackPublication(localTrack, trackSignaling, unpublish, options);\n\n          self._addTrackPublication(localTrackPublication);\n        }\n\n        localTrackPublication.on('warning', warningHandler);\n        localTrackPublication.on('warningsCleared', warningsClearedHandler);\n        var state = self._signaling.state;\n\n        if (state === 'connected' || state === 'connecting') {\n          if (localTrack._processorEventObserver) {\n            localTrack._processorEventObserver.on('event', function (event) {\n              self._eventObserver.emit('event', {\n                name: event.name,\n                payload: event.data,\n                group: 'video-processor',\n                level: 'info'\n              });\n            });\n          } // NOTE(csantos): For tracks created before joining a room or already joined but about to publish it\n\n\n          if (localTrack.processedTrack) {\n            localTrack._captureFrames();\n\n            localTrack._setSenderMediaStreamTrack(true);\n          }\n        }\n\n        if (state === 'connected') {\n          setTimeout(function () {\n            self.emit('trackPublished', localTrackPublication);\n          });\n        }\n\n        resolve(localTrackPublication);\n      }\n\n      trackSignaling.on('updated', updated);\n    });\n  };\n  /**\n   * Publishes a {@link LocalTrack} to the {@link Room}.\n   * @param {LocalTrack} localTrack - The {@link LocalTrack} to publish\n   * @param {LocalTrackPublishOptions} [options] - The {@link LocalTrackPublishOptions}\n   *   for publishing the {@link LocalTrack}\n   * @returns {Promise<LocalTrackPublication>} - Resolves with the corresponding\n   *   {@link LocalTrackPublication} if successful; In a Large Group Room (Maximum\n   *   Participants greater than 50), rejects with a {@link ParticipantMaxTracksExceededError}\n   *   if either the total number of published Tracks in the Room exceeds 16, or the {@link LocalTrack}\n   *   is part of a set of {@link LocalTrack}s which along with the published Tracks exceeds 16.\n   * @throws {TypeError}\n   * @throws {RangeError}\n   * @example\n   * var Video = require('twilio-video');\n   *\n   * Video.connect(token, {\n   *   name: 'my-cool-room',\n   *   audio: true\n   * }).then(function(room) {\n   *   return Video.createLocalVideoTrack({\n   *     name: 'camera'\n   *   }).then(function(localVideoTrack) {\n   *     return room.localParticipant.publishTrack(localVideoTrack, {\n   *       priority: 'high'\n   *     });\n   *   });\n   * }).then(function(publication) {\n   *   console.log('The LocalTrack \"' + publication.trackName\n   *     + '\" was successfully published with priority \"'\n   *     * publication.priority + '\"');\n   * });\n  */\n\n  /**\n  * Publishes a MediaStreamTrack to the {@link Room}.\n  * @param {MediaStreamTrack} mediaStreamTrack - The MediaStreamTrack\n  *   to publish; if a corresponding {@link LocalAudioTrack} or\n  *   {@link LocalVideoTrack} has not yet been published, this method will\n  *   construct one\n  * @param {MediaStreamTrackPublishOptions} [options] - The options for publishing\n  *   the MediaStreamTrack\n  * @returns {Promise<LocalTrackPublication>} - Resolves with the corresponding\n  *   {@link LocalTrackPublication} if successful; In a Large Group Room (Maximum\n  *   Participants greater than 50), rejects with a {@link ParticipantMaxTracksExceededError}\n  *   if the total number of published Tracks in the Room exceeds 16, or the {@link LocalTrack}\n  *   is part of a set of {@link LocalTrack}s which along with the published Tracks exceeds 16.\n  * @throws {TypeError}\n  * @throws {RangeError}\n  * @example\n  * var Video = require('twilio-video');\n  *\n  * Video.connect(token, {\n  *   name: 'my-cool-room',\n  *   audio: true\n  * }).then(function(room) {\n  *   return navigator.mediaDevices.getUserMedia({\n  *     video: true\n  *   }).then(function(mediaStream) {\n  *     var mediaStreamTrack = mediaStream.getTracks()[0];\n  *     return room.localParticipant.publishTrack(mediaStreamTrack, {\n  *       name: 'camera',\n  *       priority: 'high'\n  *     });\n  *   });\n  * }).then(function(publication) {\n  *   console.log('The LocalTrack \"' + publication.trackName\n  *     + '\" was successfully published with priority \"'\n  *     * publication.priority + '\"');\n  * });\n  */\n\n\n  LocalParticipant.prototype.publishTrack = function (localTrackOrMediaStreamTrack, options) {\n    var trackPublication = getTrackPublication(this.tracks, localTrackOrMediaStreamTrack);\n\n    if (trackPublication) {\n      return Promise.resolve(trackPublication);\n    }\n\n    options = Object.assign({\n      log: this._log,\n      priority: trackPriority.PRIORITY_STANDARD,\n      LocalAudioTrack: this._LocalAudioTrack,\n      LocalDataTrack: this._LocalDataTrack,\n      LocalVideoTrack: this._LocalVideoTrack,\n      MediaStreamTrack: this._MediaStreamTrack\n    }, options);\n    var localTrack;\n\n    try {\n      localTrack = asLocalTrack(localTrackOrMediaStreamTrack, options);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    var priorityValues = Object.values(trackPriority);\n\n    if (!priorityValues.includes(options.priority)) {\n      // eslint-disable-next-line new-cap\n      return Promise.reject(E.INVALID_VALUE('LocalTrackPublishOptions.priority', priorityValues));\n    }\n\n    var addedLocalTrack = this._addTrack(localTrack, localTrack.id, options.priority) || this._tracks.get(localTrack.id);\n\n    return this._getOrCreateLocalTrackPublication(addedLocalTrack);\n  };\n  /**\n   * Publishes multiple {@link LocalTrack}s to the {@link Room}.\n   * @param {Array<LocalTrack|MediaStreamTrack>} tracks - The {@link LocalTrack}s\n   *   to publish; for any MediaStreamTracks provided, if a corresponding\n   *   {@link LocalAudioTrack} or {@link LocalVideoTrack} has not yet been\n   *   published, this method will construct one\n   * @returns {Promise<Array<LocalTrackPublication>>} - The resulting\n   *   {@link LocalTrackPublication}s if successful; In a Large Group Room (Maximum\n   *   Participants greater than 50), rejects with a {@link ParticipantMaxTracksExceededError}\n   *   if the total number of published Tracks in the Room exceeds 16, or the {@link LocalTrack}s\n   *   along with the published Tracks exceeds 16.\n   * @throws {TypeError}\n   */\n\n\n  LocalParticipant.prototype.publishTracks = function (tracks) {\n    if (!Array.isArray(tracks)) {\n      // eslint-disable-next-line new-cap\n      throw E.INVALID_TYPE('tracks', 'Array of LocalAudioTrack, LocalVideoTrack, LocalDataTrack, or MediaStreamTrack');\n    }\n\n    return Promise.all(tracks.map(this.publishTrack, this));\n  };\n\n  LocalParticipant.prototype.setBandwidthProfile = function () {\n    this._log.warn('setBandwidthProfile is not implemented yet and may be available in future versions of twilio-video.js');\n  };\n  /**\n   * Sets the {@link NetworkQualityVerbosity} for the {@link LocalParticipant} and\n   * {@link RemoteParticipant}s. It does nothing if Network Quality is not enabled\n   * while calling {@link connect}.\n   * @param {NetworkQualityConfiguration} networkQualityConfiguration - The new\n   *   {@link NetworkQualityConfiguration}; If either or both of the local and\n   *   remote {@link NetworkQualityVerbosity} values are absent, then the corresponding\n   *   existing values are retained\n   * @returns {this}\n   * @example\n   * // Update verbosity levels for both LocalParticipant and RemoteParticipants\n   * localParticipant.setNetworkQualityConfiguration({\n   *   local: 1,\n   *   remote: 2\n   * });\n   * @example\n   * // Update verbosity level for only the LocalParticipant\n   * localParticipant.setNetworkQualityConfiguration({\n   *   local: 1\n   * });\n   *  @example\n   * // Update verbosity level for only the RemoteParticipants\n   * localParticipant.setNetworkQualityConfiguration({\n   *   remote: 2\n   * });\n   */\n\n\n  LocalParticipant.prototype.setNetworkQualityConfiguration = function (networkQualityConfiguration) {\n    if (typeof networkQualityConfiguration !== 'object' || networkQualityConfiguration === null) {\n      // eslint-disable-next-line new-cap\n      throw E.INVALID_TYPE('networkQualityConfiguration', 'NetworkQualityConfiguration');\n    }\n\n    ['local', 'remote'].forEach(function (prop) {\n      if (prop in networkQualityConfiguration && (typeof networkQualityConfiguration[prop] !== 'number' || isNaN(networkQualityConfiguration[prop]))) {\n        // eslint-disable-next-line new-cap\n        throw E.INVALID_TYPE(\"networkQualityConfiguration.\" + prop, 'number');\n      }\n    });\n\n    this._signaling.setNetworkQualityConfiguration(networkQualityConfiguration);\n\n    return this;\n  };\n  /**\n   * Set the {@link LocalParticipant}'s {@link EncodingParameters}.\n   * @param {?EncodingParameters} [encodingParameters] - The new\n   *   {@link EncodingParameters}; If null, then the bitrate limits are removed;\n   *   If not specified, then the existing bitrate limits are preserved\n   * @returns {this}\n   * @throws {TypeError}\n   */\n\n\n  LocalParticipant.prototype.setParameters = function (encodingParameters) {\n    if (typeof encodingParameters !== 'undefined' && typeof encodingParameters !== 'object') {\n      // eslint-disable-next-line new-cap\n      throw E.INVALID_TYPE('encodingParameters', 'EncodingParameters, null or undefined');\n    }\n\n    if (encodingParameters) {\n      if (this._signaling.getParameters().adaptiveSimulcast && encodingParameters.maxVideoBitrate) {\n        // eslint-disable-next-line new-cap\n        throw E.INVALID_TYPE('encodingParameters', 'encodingParameters.maxVideoBitrate is not compatible with \"preferredVideoCodecs=auto\"');\n      }\n\n      ['maxAudioBitrate', 'maxVideoBitrate'].forEach(function (prop) {\n        if (typeof encodingParameters[prop] !== 'undefined' && typeof encodingParameters[prop] !== 'number' && encodingParameters[prop] !== null) {\n          // eslint-disable-next-line new-cap\n          throw E.INVALID_TYPE(\"encodingParameters.\" + prop, 'number, null or undefined');\n        }\n      });\n    } else if (encodingParameters === null) {\n      encodingParameters = {\n        maxAudioBitrate: null,\n        maxVideoBitrate: null\n      };\n    }\n\n    this._signaling.setParameters(encodingParameters);\n\n    return this;\n  };\n  /**\n   * Stops publishing a {@link LocalTrack} to the {@link Room}.\n   * @param {LocalTrack|MediaStreamTrack} track - The {@link LocalTrack}\n   *   to stop publishing; if a MediaStreamTrack is provided, this method\n   *   looks up the corresponding {@link LocalAudioTrack} or\n   *   {@link LocalVideoTrack} to stop publishing\n   * @returns {?LocalTrackPublication} - The corresponding\n   *   {@link LocalTrackPublication} if the {@link LocalTrack} was previously\n   *   published, null otherwise\n   * @throws {TypeError}\n  */\n\n\n  LocalParticipant.prototype.unpublishTrack = function (track) {\n    validateLocalTrack(track, {\n      LocalAudioTrack: this._LocalAudioTrack,\n      LocalDataTrack: this._LocalDataTrack,\n      LocalVideoTrack: this._LocalVideoTrack,\n      MediaStreamTrack: this._MediaStreamTrack\n    });\n\n    var localTrack = this._tracks.get(track.id);\n\n    if (!localTrack) {\n      return null;\n    }\n\n    var trackSignaling = this._signaling.getPublication(localTrack._trackSender);\n\n    trackSignaling.publishFailed(new Error(\"The \" + localTrack + \" was unpublished\"));\n    localTrack = this._removeTrack(localTrack, localTrack.id);\n\n    if (!localTrack) {\n      return null;\n    }\n\n    var localTrackPublication = getTrackPublication(this.tracks, localTrack);\n\n    if (localTrackPublication) {\n      this._removeTrackPublication(localTrackPublication);\n    }\n\n    return localTrackPublication;\n  };\n  /**\n   * Stops publishing multiple {@link LocalTrack}s to the {@link Room}.\n   * @param {Array<LocalTrack|MediaStreamTrack>} tracks - The {@link LocalTrack}s\n   *   to stop publishing; for any MediaStreamTracks provided, this method looks\n   *   up the corresponding {@link LocalAudioTrack} or {@link LocalVideoTrack} to\n   *   stop publishing\n   * @returns {Array<LocalTrackPublication>} - The corresponding\n   *   {@link LocalTrackPublication}s that were successfully unpublished\n   * @throws {TypeError}\n   */\n\n\n  LocalParticipant.prototype.unpublishTracks = function (tracks) {\n    var _this = this;\n\n    if (!Array.isArray(tracks)) {\n      // eslint-disable-next-line new-cap\n      throw E.INVALID_TYPE('tracks', 'Array of LocalAudioTrack, LocalVideoTrack, LocalDataTrack, or MediaStreamTrack');\n    }\n\n    return tracks.reduce(function (unpublishedTracks, track) {\n      var unpublishedTrack = _this.unpublishTrack(track);\n\n      return unpublishedTrack ? unpublishedTracks.concat(unpublishedTrack) : unpublishedTracks;\n    }, []);\n  };\n\n  return LocalParticipant;\n}(Participant);\n/**\n * The {@link LocalParticipant} has reconnected to the {@link Room} after a signaling connection disruption.\n * @event LocalParticipant#reconnected\n */\n\n/**\n * The {@link LocalParticipant} is reconnecting to the {@link Room} after a signaling connection disruption.\n * @event LocalParticipant#reconnecting\n */\n\n/**\n * One of the {@link LocalParticipant}'s {@link LocalVideoTrack}'s dimensions changed.\n * @param {LocalVideoTrack} track - The {@link LocalVideoTrack} whose dimensions changed\n * @event LocalParticipant#trackDimensionsChanged\n */\n\n/**\n * A {@link LocalTrack} was disabled by the {@link LocalParticipant}.\n * @param {LocalTrack} track - The {@link LocalTrack} that was disabled\n * @event LocalParticipant#trackDisabled\n */\n\n/**\n * A {@link LocalTrack} was enabled by the {@link LocalParticipant}.\n * @param {LocalTrack} track - The {@link LocalTrack} that was enabled\n * @event LocalParticipant#trackEnabled\n */\n\n/**\n * A {@link LocalTrack} failed to publish. Check the error message for more\n * information. In a Large Group Room (Maximum Participants greater than 50),\n * this event is raised with a {@link ParticipantMaxTracksExceededError} either\n * when attempting to publish the {@link LocalTrack} will exceed the Maximum Published\n * Tracks limit of 16, or the {@link LocalTrack} is part of a set of {@link LocalTrack}s\n * which along with the published Tracks exceeds 16.\n * @param {TwilioError} error - A {@link TwilioError} explaining why publication\n *   failed\n * @param {LocalTrack} localTrack - The {@link LocalTrack} that failed to\n *   publish\n * @event LocalParticipant#trackPublicationFailed\n */\n\n/**\n * A {@link LocalTrack} was successfully published.\n * @param {LocalTrackPublication} publication - The resulting\n *   {@link LocalTrackPublication} for the published {@link LocalTrack}\n * @event LocalParticipant#trackPublished\n */\n\n/**\n * One of the {@link LocalParticipant}'s {@link LocalTrack}s started.\n * @param {LocalTrack} track - The {@link LocalTrack} that started\n * @event LocalParticipant#trackStarted\n */\n\n/**\n * One of the {@link LocalParticipant}'s {@link LocalTrack}s stopped, either\n * because {@link LocalTrack#stop} was called or because the underlying\n * MediaStreamTrack ended).\n * @param {LocalTrack} track - The {@link LocalTrack} that stopped\n * @event LocalParticipant#trackStopped\n */\n\n/**\n * One of the {@link LocalParticipant}'s {@link LocalTrackPublication}s encountered a warning.\n * This event is only raised if you enabled warnings using <code>notifyWarnings</code> in <code>ConnectOptions</code>.\n * @param {string} name - The warning that was raised.\n * @param {LocalTrackPublication} publication - The {@link LocalTrackPublication} that encountered the warning.\n * @event LocalParticipant#trackWarning\n */\n\n/**\n * One of the {@link LocalParticipant}'s {@link LocalTrackPublication}s cleared all warnings.\n * This event is only raised if you enabled warnings using <code>notifyWarnings</code> in <code>ConnectOptions</code>.\n * @param {LocalTrackPublication} publication - The {@link LocalTrackPublication} that cleared all warnings.\n * @event LocalParticipant#trackWarningsCleared\n */\n\n/**\n * Outgoing media encoding parameters.\n * @typedef {object} EncodingParameters\n * @property {?number} [maxAudioBitrate] - Max outgoing audio bitrate (bps);\n *   If not specified, retains the existing bitrate limit; A <code>null</code> or a\n *   <code>0</code> value removes any previously set bitrate limit; This value is set\n *   as a hint for variable bitrate codecs, but will not take effect for fixed bitrate\n *   codecs; Based on our tests, Chrome, Firefox and Safari support a bitrate range of\n *   12000 bps to 256000 bps for Opus codec; This parameter has no effect on iSAC, PCMU\n *   and PCMA codecs\n * @property {?number} [maxVideoBitrate] - Max outgoing video bitrate (bps);\n *   If not specified, retains the existing bitrate limit; A <code>null</code> or\n *   a <code>0</code> value removes any previously set bitrate limit; This value is\n *   set as a hint for variable bitrate codecs, but will not take effect for fixed\n *   bitrate codecs; Based on our tests, Chrome, Firefox and Safari all seem to support\n *   an average bitrate range of 20000 bps (20 kbps) to 8000000 bps (8 mbps) for a\n *   720p VideoTrack.\n *   Note: this limit is not applied for screen share tracks published on Chrome.\n */\n\n/**\n * Options for publishing a {@link LocalTrack}.\n * @typedef {object} LocalTrackPublishOptions\n * @property {Track.Priority} [priority='standard'] - The priority with which the {@link LocalTrack}\n *   is to be published; In Group or Small Group Rooms, the appropriate bandwidth is\n *   allocated to the {@link LocalTrack} based on its {@link Track.Priority}; It has no\n *   effect in Peer-to-Peer Rooms; It defaults to \"standard\" when not provided\n */\n\n/**\n * Options for publishing a {@link MediaStreamTrack}.\n * @typedef {LocalTrackOptions} MediaStreamTrackPublishOptions\n * @property {Track.Priority} [priority='standard'] - The priority with which the {@link LocalTrack}\n *   is to be published; In Group or Small Group Rooms, the appropriate bandwidth is\n *   allocated to the {@link LocalTrack} based on its {@link Track.Priority}; It has no\n *   effect in Peer-to-Peer Rooms; It defaults to \"standard\" when not provided\n */\n\n/**\n * @private\n * @param {Map<Track.SID, LocalTrackPublication>} trackPublications\n * @param {LocalTrack|MediaStreamTrack} track\n * @returns {?LocalTrackPublication} trackPublication\n */\n\n\nfunction getTrackPublication(trackPublications, track) {\n  return Array.from(trackPublications.values()).find(function (trackPublication) {\n    return trackPublication.track === track || trackPublication.track.mediaStreamTrack === track;\n  }) || null;\n}\n\nmodule.exports = LocalParticipant;","map":{"version":3,"mappings":"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","names":["require","MediaStreamTrack","asLocalTrack","asLocalTrackPublication","trackClass","E","trackPriority","validateLocalTrack","LocalAudioTrack","LocalDataTrack","LocalVideoTrack","LocalAudioTrackPublication","LocalDataTrackPublication","LocalVideoTrackPublication","Participant","__extends","signaling","localTracks","options","Object","assign","shouldStopLocalTracks","tracks","tracksToStop","Set","filter","kind","_this","defineProperties","_eventObserver","value","eventObserver","_LocalAudioTrack","_LocalDataTrack","_LocalVideoTrack","_MediaStreamTrack","_LocalAudioTrackPublication","_LocalDataTrackPublication","_LocalVideoTrackPublication","_tracksToStop","signalingRegion","enumerable","get","_handleTrackSignalingEvents","LocalParticipant","track","id","priority","addedTrack","_super","_addTrack","call","state","_addLocalTrack","_signaling","addTrack","_trackSender","name","_log","info","debug","removedTrack","_removeTrack","removeTrack","_getTrackEvents","concat","_instanceId","sid","log","localTrackDisabled","trackSignaling","getPublication","localTrack","disable","localTrackEnabled","enable","localTrackStopped","stop","stateChanged","removeListener","_tracks","forEach","removeClone","_trackTransceiver","size","setTimeout","emit","on","PRIORITY_STANDARD","_getOrCreateLocalTrackPublication","catch","warn","error","localTrackPublication","getTrackPublication","Promise","resolve","self","reject","Error","updated","message","has","warningHandler","twilioWarningName","warningsClearedHandler","unpublish","unpublishTrack","publication","_addTrackPublication","_processorEventObserver","event","payload","data","group","level","processedTrack","_captureFrames","_setSenderMediaStreamTrack","localTrackOrMediaStreamTrack","trackPublication","priorityValues","values","includes","INVALID_VALUE","addedLocalTrack","Array","isArray","INVALID_TYPE","all","map","publishTrack","networkQualityConfiguration","prop","isNaN","setNetworkQualityConfiguration","encodingParameters","getParameters","adaptiveSimulcast","maxVideoBitrate","maxAudioBitrate","setParameters","publishFailed","_removeTrackPublication","reduce","unpublishedTracks","unpublishedTrack","trackPublications","from","find","mediaStreamTrack","module","exports"],"sources":["/home/samliu/repos/ieee/twilio-video-starter-kit/node_modules/twilio-video/lib/localparticipant.js"],"sourcesContent":["'use strict';\n\nconst { MediaStreamTrack } = require('./webrtc');\nconst { asLocalTrack, asLocalTrackPublication, trackClass } = require('./util');\nconst { typeErrors: E, trackPriority } = require('./util/constants');\nconst { validateLocalTrack } = require('./util/validate');\n\nconst {\n  LocalAudioTrack,\n  LocalDataTrack,\n  LocalVideoTrack\n} = require('./media/track/es5');\n\nconst LocalAudioTrackPublication = require('./media/track/localaudiotrackpublication');\nconst LocalDataTrackPublication = require('./media/track/localdatatrackpublication');\nconst LocalVideoTrackPublication = require('./media/track/localvideotrackpublication');\nconst Participant = require('./participant');\n\n/**\n * A {@link LocalParticipant} represents the local {@link Participant} in a\n * {@link Room}.\n * @extends Participant\n * @property {Map<Track.SID, LocalAudioTrackPublication>} audioTracks -\n *    The {@link LocalParticipant}'s {@link LocalAudioTrackPublication}s\n * @property {Map<Track.SID, LocalDataTrackPublication>} dataTracks -\n *    The {@link LocalParticipant}'s {@link LocalDataTrackPublication}s\n * @property {Map<Track.SID, LocalTrackPublication>} tracks -\n *    The {@link LocalParticipant}'s {@link LocalTrackPublication}s\n * @property {Map<Track.SID, LocalVideoTrackPublication>} videoTracks -\n *    The {@link LocalParticipant}'s {@link LocalVideoTrackPublication}s\n * @property {string} signalingRegion - The geographical region of the\n *     signaling edge the {@link LocalParticipant} is connected to.\n *\n * @emits RemoteParticipant#reconnected\n * @emits RemoteParticipant#reconnecting\n * @emits LocalParticipant#trackDimensionsChanged\n * @emits LocalParticipant#trackDisabled\n * @emits LocalParticipant#trackEnabled\n * @emits LocalParticipant#trackPublicationFailed\n * @emits LocalParticipant#trackPublished\n * @emits LocalParticipant#trackStarted\n * @emits LocalParticipant#trackStopped\n * @emits LocalParticipant#trackWarning\n * @emits LocalParticipant#trackWarningsCleared\n */\nclass LocalParticipant extends Participant {\n  /**\n   * Construct a {@link LocalParticipant}.\n   * @param {ParticipantSignaling} signaling\n   * @param {Array<LocalTrack>} localTracks\n   * @param {Object} options\n   */\n  constructor(signaling, localTracks, options) {\n    options = Object.assign({\n      LocalAudioTrack,\n      LocalVideoTrack,\n      LocalDataTrack,\n      MediaStreamTrack,\n      LocalAudioTrackPublication,\n      LocalVideoTrackPublication,\n      LocalDataTrackPublication,\n      shouldStopLocalTracks: false,\n      tracks: localTracks\n    }, options);\n\n    const tracksToStop = options.shouldStopLocalTracks\n      ? new Set(localTracks.filter(localTrack => localTrack.kind !== 'data'))\n      : new Set();\n\n    super(signaling, options);\n\n    Object.defineProperties(this, {\n      _eventObserver: {\n        value: options.eventObserver\n      },\n      _LocalAudioTrack: {\n        value: options.LocalAudioTrack\n      },\n      _LocalDataTrack: {\n        value: options.LocalDataTrack\n      },\n      _LocalVideoTrack: {\n        value: options.LocalVideoTrack\n      },\n      _MediaStreamTrack: {\n        value: options.MediaStreamTrack\n      },\n      _LocalAudioTrackPublication: {\n        value: options.LocalAudioTrackPublication\n      },\n      _LocalDataTrackPublication: {\n        value: options.LocalDataTrackPublication\n      },\n      _LocalVideoTrackPublication: {\n        value: options.LocalVideoTrackPublication\n      },\n      _tracksToStop: {\n        value: tracksToStop\n      },\n      signalingRegion: {\n        enumerable: true,\n        get() {\n          return signaling.signalingRegion;\n        }\n      }\n    });\n\n    this._handleTrackSignalingEvents();\n  }\n\n  /**\n   * @private\n   * @param {LocalTrack} track\n   * @param {Track.ID} id\n   * @param {Track.Priority} priority\n   * @returns {?LocalTrack}\n   */\n  _addTrack(track, id, priority) {\n    const addedTrack = super._addTrack(track, id);\n    if (addedTrack && this.state !== 'disconnected') {\n      this._addLocalTrack(track, priority);\n    }\n    return addedTrack;\n  }\n\n  /**\n   * @private\n   * @param {LocalTrack} track\n   * @param {Track.Priority} priority\n   * @returns {void}\n   */\n  _addLocalTrack(track, priority) {\n    this._signaling.addTrack(track._trackSender, track.name, priority);\n    this._log.info(`Added a new ${trackClass(track, true)}:`, track.id);\n    this._log.debug(`${trackClass(track, true)}:`, track);\n  }\n\n  /**\n   * @private\n   * @param {LocalTrack} track\n   * @param {Track.ID} id\n   * @returns {?LocalTrack}\n   */\n  _removeTrack(track, id) {\n    const removedTrack = super._removeTrack(track, id);\n    if (removedTrack && this.state !== 'disconnected') {\n      this._signaling.removeTrack(track._trackSender);\n      this._log.info(`Removed a ${trackClass(track, true)}:`, track.id);\n      this._log.debug(`${trackClass(track, true)}:`, track);\n    }\n    return removedTrack;\n  }\n\n  /**\n   * Get the {@link LocalTrack} events to re-emit.\n   * @private\n   * @returns {Array<Array<string>>} events\n   */\n  _getTrackEvents() {\n    return super._getTrackEvents.call(this).concat([\n      ['disabled', 'trackDisabled'],\n      ['enabled', 'trackEnabled'],\n      ['stopped', 'trackStopped']\n    ]);\n  }\n\n  toString() {\n    return `[LocalParticipant #${this._instanceId}${this.sid ? `: ${this.sid}` : ''}]`;\n  }\n\n  /**\n   * @private\n   */\n  _handleTrackSignalingEvents() {\n    const log = this._log;\n\n    if (this.state === 'disconnected') {\n      return;\n    }\n\n    const localTrackDisabled = localTrack => {\n      const trackSignaling = this._signaling.getPublication(localTrack._trackSender);\n      if (trackSignaling) {\n        trackSignaling.disable();\n        log.debug(`Disabled the ${trackClass(localTrack, true)}:`, localTrack.id);\n      }\n    };\n\n    const localTrackEnabled = localTrack => {\n      const trackSignaling = this._signaling.getPublication(localTrack._trackSender);\n      if (trackSignaling) {\n        trackSignaling.enable();\n        log.debug(`Enabled the ${trackClass(localTrack, true)}:`, localTrack.id);\n      }\n    };\n\n    const localTrackStopped = localTrack => {\n      // NOTE(mroberts): We shouldn't need to check for `stop`, since DataTracks\n      // do not emit \"stopped\".\n      const trackSignaling = this._signaling.getPublication(localTrack._trackSender);\n      if (trackSignaling) {\n        trackSignaling.stop();\n      }\n      return trackSignaling;\n    };\n\n    const stateChanged = state => {\n      log.debug('Transitioned to state:', state);\n      if (state === 'disconnected') {\n        log.debug('Removing LocalTrack event listeners');\n        this._signaling.removeListener('stateChanged', stateChanged);\n        this.removeListener('trackDisabled', localTrackDisabled);\n        this.removeListener('trackEnabled', localTrackEnabled);\n        this.removeListener('trackStopped', localTrackStopped);\n\n        // NOTE(mmalavalli): Remove the stale MediaTrackSender clones so that we\n        // do not call replaceTrack() on their RTCRtpSenders.\n        this._tracks.forEach(track => {\n          const trackSignaling = localTrackStopped(track);\n          if (trackSignaling) {\n            track._trackSender.removeClone(trackSignaling._trackTransceiver);\n          }\n        });\n\n        log.info(`LocalParticipant disconnected. Stopping ${this._tracksToStop.size} automatically-acquired LocalTracks`);\n        this._tracksToStop.forEach(track => {\n          track.stop();\n        });\n      } else if (state === 'connected') {\n        // NOTE(mmalavalli): Any transition to \"connected\" here is a result of\n        // successful signaling reconnection, and not a first-time establishment\n        // of the signaling connection.\n        log.info('reconnected');\n\n        // NOTE(mpatwardhan): `stateChanged` can get emitted with StateMachine locked.\n        // Do not signal  public events synchronously with lock held.\n        setTimeout(() => this.emit('reconnected'), 0);\n      }\n    };\n\n    this.on('trackDisabled', localTrackDisabled);\n    this.on('trackEnabled', localTrackEnabled);\n    this.on('trackStopped', localTrackStopped);\n\n    this._signaling.on('stateChanged', stateChanged);\n\n    this._tracks.forEach(track => {\n      this._addLocalTrack(track, trackPriority.PRIORITY_STANDARD);\n      this._getOrCreateLocalTrackPublication(track).catch(error => {\n        // Just log a warning for now.\n        log.warn(`Failed to get or create LocalTrackPublication for ${track}:`, error);\n      });\n    });\n  }\n\n  /**\n   * @private\n   * @param {LocalTrack} localTrack\n   * @returns {Promise<LocalTrackPublication>}\n   */\n  _getOrCreateLocalTrackPublication(localTrack) {\n    let localTrackPublication = getTrackPublication(this.tracks, localTrack);\n    if (localTrackPublication) {\n      return Promise.resolve(localTrackPublication);\n    }\n\n    const log = this._log;\n    const self = this;\n\n    const trackSignaling = this._signaling.getPublication(localTrack._trackSender);\n    if (!trackSignaling) {\n      return Promise.reject(new Error(`Unexpected error: The ${localTrack} cannot be published`));\n    }\n\n    return new Promise((resolve, reject) => {\n      function updated() {\n        const error = trackSignaling.error;\n        if (error) {\n          trackSignaling.removeListener('updated', updated);\n          log.warn(`Failed to publish the ${trackClass(localTrack, true)}: ${error.message}`);\n          self._removeTrack(localTrack, localTrack.id);\n          setTimeout(() => {\n            self.emit('trackPublicationFailed', error, localTrack);\n          });\n          reject(error);\n          return;\n        }\n\n        if (!self._tracks.has(localTrack.id)) {\n          trackSignaling.removeListener('updated', updated);\n          reject(new Error(`The ${localTrack} was unpublished`));\n          return;\n        }\n\n        const sid = trackSignaling.sid;\n        if (!sid) {\n          return;\n        }\n\n        trackSignaling.removeListener('updated', updated);\n\n        const options = {\n          log,\n          LocalAudioTrackPublication: self._LocalAudioTrackPublication,\n          LocalDataTrackPublication: self._LocalDataTrackPublication,\n          LocalVideoTrackPublication: self._LocalVideoTrackPublication\n        };\n\n        localTrackPublication = getTrackPublication(self.tracks, localTrack);\n\n        const warningHandler = twilioWarningName =>\n          self.emit('trackWarning', twilioWarningName, localTrackPublication);\n\n        const warningsClearedHandler = () =>\n          self.emit('trackWarningsCleared', localTrackPublication);\n\n        const unpublish = publication => {\n          localTrackPublication.removeListener('trackWarning', warningHandler);\n          localTrackPublication.removeListener('trackWarningsCleared', warningsClearedHandler);\n          self.unpublishTrack(publication.track);\n        };\n\n        if (!localTrackPublication) {\n          localTrackPublication = asLocalTrackPublication(localTrack, trackSignaling, unpublish, options);\n          self._addTrackPublication(localTrackPublication);\n        }\n\n        localTrackPublication.on('warning', warningHandler);\n        localTrackPublication.on('warningsCleared', warningsClearedHandler);\n\n        const { state } = self._signaling;\n        if (state === 'connected' || state === 'connecting') {\n          if (localTrack._processorEventObserver) {\n            localTrack._processorEventObserver.on('event', event => {\n              self._eventObserver.emit('event', {\n                name: event.name,\n                payload: event.data,\n                group: 'video-processor',\n                level: 'info'\n              });\n            });\n          }\n\n          // NOTE(csantos): For tracks created before joining a room or already joined but about to publish it\n          if (localTrack.processedTrack) {\n            localTrack._captureFrames();\n            localTrack._setSenderMediaStreamTrack(true);\n          }\n        }\n        if (state === 'connected') {\n          setTimeout(() => {\n            self.emit('trackPublished', localTrackPublication);\n          });\n        }\n        resolve(localTrackPublication);\n      }\n\n      trackSignaling.on('updated', updated);\n    });\n  }\n\n  /**\n   * Publishes a {@link LocalTrack} to the {@link Room}.\n   * @param {LocalTrack} localTrack - The {@link LocalTrack} to publish\n   * @param {LocalTrackPublishOptions} [options] - The {@link LocalTrackPublishOptions}\n   *   for publishing the {@link LocalTrack}\n   * @returns {Promise<LocalTrackPublication>} - Resolves with the corresponding\n   *   {@link LocalTrackPublication} if successful; In a Large Group Room (Maximum\n   *   Participants greater than 50), rejects with a {@link ParticipantMaxTracksExceededError}\n   *   if either the total number of published Tracks in the Room exceeds 16, or the {@link LocalTrack}\n   *   is part of a set of {@link LocalTrack}s which along with the published Tracks exceeds 16.\n   * @throws {TypeError}\n   * @throws {RangeError}\n   * @example\n   * var Video = require('twilio-video');\n   *\n   * Video.connect(token, {\n   *   name: 'my-cool-room',\n   *   audio: true\n   * }).then(function(room) {\n   *   return Video.createLocalVideoTrack({\n   *     name: 'camera'\n   *   }).then(function(localVideoTrack) {\n   *     return room.localParticipant.publishTrack(localVideoTrack, {\n   *       priority: 'high'\n   *     });\n   *   });\n   * }).then(function(publication) {\n   *   console.log('The LocalTrack \"' + publication.trackName\n   *     + '\" was successfully published with priority \"'\n   *     * publication.priority + '\"');\n   * });\n  *//**\n   * Publishes a MediaStreamTrack to the {@link Room}.\n   * @param {MediaStreamTrack} mediaStreamTrack - The MediaStreamTrack\n   *   to publish; if a corresponding {@link LocalAudioTrack} or\n   *   {@link LocalVideoTrack} has not yet been published, this method will\n   *   construct one\n   * @param {MediaStreamTrackPublishOptions} [options] - The options for publishing\n   *   the MediaStreamTrack\n   * @returns {Promise<LocalTrackPublication>} - Resolves with the corresponding\n   *   {@link LocalTrackPublication} if successful; In a Large Group Room (Maximum\n   *   Participants greater than 50), rejects with a {@link ParticipantMaxTracksExceededError}\n   *   if the total number of published Tracks in the Room exceeds 16, or the {@link LocalTrack}\n   *   is part of a set of {@link LocalTrack}s which along with the published Tracks exceeds 16.\n   * @throws {TypeError}\n   * @throws {RangeError}\n   * @example\n   * var Video = require('twilio-video');\n   *\n   * Video.connect(token, {\n   *   name: 'my-cool-room',\n   *   audio: true\n   * }).then(function(room) {\n   *   return navigator.mediaDevices.getUserMedia({\n   *     video: true\n   *   }).then(function(mediaStream) {\n   *     var mediaStreamTrack = mediaStream.getTracks()[0];\n   *     return room.localParticipant.publishTrack(mediaStreamTrack, {\n   *       name: 'camera',\n   *       priority: 'high'\n   *     });\n   *   });\n   * }).then(function(publication) {\n   *   console.log('The LocalTrack \"' + publication.trackName\n   *     + '\" was successfully published with priority \"'\n   *     * publication.priority + '\"');\n   * });\n   */\n  publishTrack(localTrackOrMediaStreamTrack, options) {\n    const trackPublication = getTrackPublication(this.tracks, localTrackOrMediaStreamTrack);\n    if (trackPublication) {\n      return Promise.resolve(trackPublication);\n    }\n\n    options = Object.assign({\n      log: this._log,\n      priority: trackPriority.PRIORITY_STANDARD,\n      LocalAudioTrack: this._LocalAudioTrack,\n      LocalDataTrack: this._LocalDataTrack,\n      LocalVideoTrack: this._LocalVideoTrack,\n      MediaStreamTrack: this._MediaStreamTrack\n    }, options);\n\n    let localTrack;\n    try {\n      localTrack = asLocalTrack(localTrackOrMediaStreamTrack, options);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    const priorityValues = Object.values(trackPriority);\n    if (!priorityValues.includes(options.priority)) {\n      // eslint-disable-next-line new-cap\n      return Promise.reject(E.INVALID_VALUE('LocalTrackPublishOptions.priority', priorityValues));\n    }\n\n    let addedLocalTrack = this._addTrack(localTrack, localTrack.id, options.priority)\n      || this._tracks.get(localTrack.id);\n\n    return this._getOrCreateLocalTrackPublication(addedLocalTrack);\n  }\n\n  /**\n   * Publishes multiple {@link LocalTrack}s to the {@link Room}.\n   * @param {Array<LocalTrack|MediaStreamTrack>} tracks - The {@link LocalTrack}s\n   *   to publish; for any MediaStreamTracks provided, if a corresponding\n   *   {@link LocalAudioTrack} or {@link LocalVideoTrack} has not yet been\n   *   published, this method will construct one\n   * @returns {Promise<Array<LocalTrackPublication>>} - The resulting\n   *   {@link LocalTrackPublication}s if successful; In a Large Group Room (Maximum\n   *   Participants greater than 50), rejects with a {@link ParticipantMaxTracksExceededError}\n   *   if the total number of published Tracks in the Room exceeds 16, or the {@link LocalTrack}s\n   *   along with the published Tracks exceeds 16.\n   * @throws {TypeError}\n   */\n  publishTracks(tracks) {\n    if (!Array.isArray(tracks)) {\n      // eslint-disable-next-line new-cap\n      throw E.INVALID_TYPE('tracks',\n        'Array of LocalAudioTrack, LocalVideoTrack, LocalDataTrack, or MediaStreamTrack');\n    }\n    return Promise.all(tracks.map(this.publishTrack, this));\n  }\n\n  setBandwidthProfile() {\n    this._log.warn('setBandwidthProfile is not implemented yet and may be available in future versions of twilio-video.js');\n  }\n\n  /**\n   * Sets the {@link NetworkQualityVerbosity} for the {@link LocalParticipant} and\n   * {@link RemoteParticipant}s. It does nothing if Network Quality is not enabled\n   * while calling {@link connect}.\n   * @param {NetworkQualityConfiguration} networkQualityConfiguration - The new\n   *   {@link NetworkQualityConfiguration}; If either or both of the local and\n   *   remote {@link NetworkQualityVerbosity} values are absent, then the corresponding\n   *   existing values are retained\n   * @returns {this}\n   * @example\n   * // Update verbosity levels for both LocalParticipant and RemoteParticipants\n   * localParticipant.setNetworkQualityConfiguration({\n   *   local: 1,\n   *   remote: 2\n   * });\n   * @example\n   * // Update verbosity level for only the LocalParticipant\n   * localParticipant.setNetworkQualityConfiguration({\n   *   local: 1\n   * });\n   *  @example\n   * // Update verbosity level for only the RemoteParticipants\n   * localParticipant.setNetworkQualityConfiguration({\n   *   remote: 2\n   * });\n   */\n  setNetworkQualityConfiguration(networkQualityConfiguration) {\n    if (typeof networkQualityConfiguration !== 'object'\n      || networkQualityConfiguration === null) {\n      // eslint-disable-next-line new-cap\n      throw E.INVALID_TYPE('networkQualityConfiguration', 'NetworkQualityConfiguration');\n    }\n    ['local', 'remote'].forEach(prop => {\n      if (prop in networkQualityConfiguration && (typeof networkQualityConfiguration[prop] !== 'number' || isNaN(networkQualityConfiguration[prop]))) {\n        // eslint-disable-next-line new-cap\n        throw E.INVALID_TYPE(`networkQualityConfiguration.${prop}`, 'number');\n      }\n    });\n    this._signaling.setNetworkQualityConfiguration(networkQualityConfiguration);\n    return this;\n  }\n\n  /**\n   * Set the {@link LocalParticipant}'s {@link EncodingParameters}.\n   * @param {?EncodingParameters} [encodingParameters] - The new\n   *   {@link EncodingParameters}; If null, then the bitrate limits are removed;\n   *   If not specified, then the existing bitrate limits are preserved\n   * @returns {this}\n   * @throws {TypeError}\n   */\n  setParameters(encodingParameters) {\n    if (typeof encodingParameters !== 'undefined'\n      && typeof encodingParameters !== 'object') {\n      // eslint-disable-next-line new-cap\n      throw E.INVALID_TYPE('encodingParameters',\n        'EncodingParameters, null or undefined');\n    }\n\n    if (encodingParameters) {\n      if (this._signaling.getParameters().adaptiveSimulcast && encodingParameters.maxVideoBitrate) {\n        // eslint-disable-next-line new-cap\n        throw E.INVALID_TYPE('encodingParameters', 'encodingParameters.maxVideoBitrate is not compatible with \"preferredVideoCodecs=auto\"');\n      }\n\n      ['maxAudioBitrate', 'maxVideoBitrate'].forEach(prop => {\n        if (typeof encodingParameters[prop] !== 'undefined'\n          && typeof encodingParameters[prop] !== 'number'\n          && encodingParameters[prop] !== null) {\n          // eslint-disable-next-line new-cap\n          throw E.INVALID_TYPE(`encodingParameters.${prop}`, 'number, null or undefined');\n        }\n      });\n    } else if (encodingParameters === null) {\n      encodingParameters = { maxAudioBitrate: null, maxVideoBitrate: null };\n    }\n\n    this._signaling.setParameters(encodingParameters);\n    return this;\n  }\n\n  /**\n   * Stops publishing a {@link LocalTrack} to the {@link Room}.\n   * @param {LocalTrack|MediaStreamTrack} track - The {@link LocalTrack}\n   *   to stop publishing; if a MediaStreamTrack is provided, this method\n   *   looks up the corresponding {@link LocalAudioTrack} or\n   *   {@link LocalVideoTrack} to stop publishing\n   * @returns {?LocalTrackPublication} - The corresponding\n   *   {@link LocalTrackPublication} if the {@link LocalTrack} was previously\n   *   published, null otherwise\n   * @throws {TypeError}\n  */\n  unpublishTrack(track) {\n    validateLocalTrack(track, {\n      LocalAudioTrack: this._LocalAudioTrack,\n      LocalDataTrack: this._LocalDataTrack,\n      LocalVideoTrack: this._LocalVideoTrack,\n      MediaStreamTrack: this._MediaStreamTrack\n    });\n\n    let localTrack = this._tracks.get(track.id);\n    if (!localTrack) {\n      return null;\n    }\n\n    const trackSignaling = this._signaling.getPublication(localTrack._trackSender);\n    trackSignaling.publishFailed(new Error(`The ${localTrack} was unpublished`));\n\n    localTrack = this._removeTrack(localTrack, localTrack.id);\n    if (!localTrack) {\n      return null;\n    }\n\n    const localTrackPublication = getTrackPublication(this.tracks, localTrack);\n    if (localTrackPublication) {\n      this._removeTrackPublication(localTrackPublication);\n    }\n    return localTrackPublication;\n  }\n\n  /**\n   * Stops publishing multiple {@link LocalTrack}s to the {@link Room}.\n   * @param {Array<LocalTrack|MediaStreamTrack>} tracks - The {@link LocalTrack}s\n   *   to stop publishing; for any MediaStreamTracks provided, this method looks\n   *   up the corresponding {@link LocalAudioTrack} or {@link LocalVideoTrack} to\n   *   stop publishing\n   * @returns {Array<LocalTrackPublication>} - The corresponding\n   *   {@link LocalTrackPublication}s that were successfully unpublished\n   * @throws {TypeError}\n   */\n  unpublishTracks(tracks) {\n    if (!Array.isArray(tracks)) {\n      // eslint-disable-next-line new-cap\n      throw E.INVALID_TYPE('tracks',\n        'Array of LocalAudioTrack, LocalVideoTrack, LocalDataTrack, or MediaStreamTrack');\n    }\n\n    return tracks.reduce((unpublishedTracks, track) => {\n      const unpublishedTrack = this.unpublishTrack(track);\n      return unpublishedTrack ? unpublishedTracks.concat(unpublishedTrack) : unpublishedTracks;\n    }, []);\n  }\n}\n\n/**\n * The {@link LocalParticipant} has reconnected to the {@link Room} after a signaling connection disruption.\n * @event LocalParticipant#reconnected\n */\n\n/**\n * The {@link LocalParticipant} is reconnecting to the {@link Room} after a signaling connection disruption.\n * @event LocalParticipant#reconnecting\n */\n\n/**\n * One of the {@link LocalParticipant}'s {@link LocalVideoTrack}'s dimensions changed.\n * @param {LocalVideoTrack} track - The {@link LocalVideoTrack} whose dimensions changed\n * @event LocalParticipant#trackDimensionsChanged\n */\n\n/**\n * A {@link LocalTrack} was disabled by the {@link LocalParticipant}.\n * @param {LocalTrack} track - The {@link LocalTrack} that was disabled\n * @event LocalParticipant#trackDisabled\n */\n\n/**\n * A {@link LocalTrack} was enabled by the {@link LocalParticipant}.\n * @param {LocalTrack} track - The {@link LocalTrack} that was enabled\n * @event LocalParticipant#trackEnabled\n */\n\n/**\n * A {@link LocalTrack} failed to publish. Check the error message for more\n * information. In a Large Group Room (Maximum Participants greater than 50),\n * this event is raised with a {@link ParticipantMaxTracksExceededError} either\n * when attempting to publish the {@link LocalTrack} will exceed the Maximum Published\n * Tracks limit of 16, or the {@link LocalTrack} is part of a set of {@link LocalTrack}s\n * which along with the published Tracks exceeds 16.\n * @param {TwilioError} error - A {@link TwilioError} explaining why publication\n *   failed\n * @param {LocalTrack} localTrack - The {@link LocalTrack} that failed to\n *   publish\n * @event LocalParticipant#trackPublicationFailed\n */\n\n/**\n * A {@link LocalTrack} was successfully published.\n * @param {LocalTrackPublication} publication - The resulting\n *   {@link LocalTrackPublication} for the published {@link LocalTrack}\n * @event LocalParticipant#trackPublished\n */\n\n/**\n * One of the {@link LocalParticipant}'s {@link LocalTrack}s started.\n * @param {LocalTrack} track - The {@link LocalTrack} that started\n * @event LocalParticipant#trackStarted\n */\n\n/**\n * One of the {@link LocalParticipant}'s {@link LocalTrack}s stopped, either\n * because {@link LocalTrack#stop} was called or because the underlying\n * MediaStreamTrack ended).\n * @param {LocalTrack} track - The {@link LocalTrack} that stopped\n * @event LocalParticipant#trackStopped\n */\n\n/**\n * One of the {@link LocalParticipant}'s {@link LocalTrackPublication}s encountered a warning.\n * This event is only raised if you enabled warnings using <code>notifyWarnings</code> in <code>ConnectOptions</code>.\n * @param {string} name - The warning that was raised.\n * @param {LocalTrackPublication} publication - The {@link LocalTrackPublication} that encountered the warning.\n * @event LocalParticipant#trackWarning\n */\n\n/**\n * One of the {@link LocalParticipant}'s {@link LocalTrackPublication}s cleared all warnings.\n * This event is only raised if you enabled warnings using <code>notifyWarnings</code> in <code>ConnectOptions</code>.\n * @param {LocalTrackPublication} publication - The {@link LocalTrackPublication} that cleared all warnings.\n * @event LocalParticipant#trackWarningsCleared\n */\n\n/**\n * Outgoing media encoding parameters.\n * @typedef {object} EncodingParameters\n * @property {?number} [maxAudioBitrate] - Max outgoing audio bitrate (bps);\n *   If not specified, retains the existing bitrate limit; A <code>null</code> or a\n *   <code>0</code> value removes any previously set bitrate limit; This value is set\n *   as a hint for variable bitrate codecs, but will not take effect for fixed bitrate\n *   codecs; Based on our tests, Chrome, Firefox and Safari support a bitrate range of\n *   12000 bps to 256000 bps for Opus codec; This parameter has no effect on iSAC, PCMU\n *   and PCMA codecs\n * @property {?number} [maxVideoBitrate] - Max outgoing video bitrate (bps);\n *   If not specified, retains the existing bitrate limit; A <code>null</code> or\n *   a <code>0</code> value removes any previously set bitrate limit; This value is\n *   set as a hint for variable bitrate codecs, but will not take effect for fixed\n *   bitrate codecs; Based on our tests, Chrome, Firefox and Safari all seem to support\n *   an average bitrate range of 20000 bps (20 kbps) to 8000000 bps (8 mbps) for a\n *   720p VideoTrack.\n *   Note: this limit is not applied for screen share tracks published on Chrome.\n */\n\n/**\n * Options for publishing a {@link LocalTrack}.\n * @typedef {object} LocalTrackPublishOptions\n * @property {Track.Priority} [priority='standard'] - The priority with which the {@link LocalTrack}\n *   is to be published; In Group or Small Group Rooms, the appropriate bandwidth is\n *   allocated to the {@link LocalTrack} based on its {@link Track.Priority}; It has no\n *   effect in Peer-to-Peer Rooms; It defaults to \"standard\" when not provided\n */\n\n/**\n * Options for publishing a {@link MediaStreamTrack}.\n * @typedef {LocalTrackOptions} MediaStreamTrackPublishOptions\n * @property {Track.Priority} [priority='standard'] - The priority with which the {@link LocalTrack}\n *   is to be published; In Group or Small Group Rooms, the appropriate bandwidth is\n *   allocated to the {@link LocalTrack} based on its {@link Track.Priority}; It has no\n *   effect in Peer-to-Peer Rooms; It defaults to \"standard\" when not provided\n */\n\n/**\n * @private\n * @param {Map<Track.SID, LocalTrackPublication>} trackPublications\n * @param {LocalTrack|MediaStreamTrack} track\n * @returns {?LocalTrackPublication} trackPublication\n */\nfunction getTrackPublication(trackPublications, track) {\n  return Array.from(trackPublications.values()).find(trackPublication => trackPublication.track === track\n    || trackPublication.track.mediaStreamTrack === track) || null;\n}\n\nmodule.exports = LocalParticipant;\n"]},"metadata":{},"sourceType":"script"}